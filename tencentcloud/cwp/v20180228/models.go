// Copyright (c) 2017-2018 THL A29 Limited, a Tencent company. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package v20180228

import (
    tcerr "github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/common/errors"
    tchttp "github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/common/http"
    "github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/common/json"
)

type ABTestConfig struct {
	// 灰度项目名称
	ProjectName *string `json:"ProjectName,omitnil,omitempty" name:"ProjectName"`

	// true：正在灰度，false：不在灰度
	Status *bool `json:"Status,omitnil,omitempty" name:"Status"`
}

type AccountStatistics struct {
	// 用户名。
	Username *string `json:"Username,omitnil,omitempty" name:"Username"`

	// 主机数量。
	MachineNum *uint64 `json:"MachineNum,omitnil,omitempty" name:"MachineNum"`
}

// Predefined struct for user
type AddLoginWhiteListsRequestParams struct {
	// 异地登录白名单实体
	HostLoginWhiteObj *HostLoginWhiteObj `json:"HostLoginWhiteObj,omitnil,omitempty" name:"HostLoginWhiteObj"`

	// 事件同步处理方式：
	//   "" -- 不操作
	//   "All" -- 将符合此配置的所有事件记录加白
	//   "Id" -- 将EventId对应的事件记录加白
	ProcessType *string `json:"ProcessType,omitnil,omitempty" name:"ProcessType"`

	// 异地登录事件ID，当ProcessType为Id时此项必填
	EventId *uint64 `json:"EventId,omitnil,omitempty" name:"EventId"`
}

type AddLoginWhiteListsRequest struct {
	*tchttp.BaseRequest
	
	// 异地登录白名单实体
	HostLoginWhiteObj *HostLoginWhiteObj `json:"HostLoginWhiteObj,omitnil,omitempty" name:"HostLoginWhiteObj"`

	// 事件同步处理方式：
	//   "" -- 不操作
	//   "All" -- 将符合此配置的所有事件记录加白
	//   "Id" -- 将EventId对应的事件记录加白
	ProcessType *string `json:"ProcessType,omitnil,omitempty" name:"ProcessType"`

	// 异地登录事件ID，当ProcessType为Id时此项必填
	EventId *uint64 `json:"EventId,omitnil,omitempty" name:"EventId"`
}

func (r *AddLoginWhiteListsRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *AddLoginWhiteListsRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "HostLoginWhiteObj")
	delete(f, "ProcessType")
	delete(f, "EventId")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "AddLoginWhiteListsRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type AddLoginWhiteListsResponseParams struct {
	// 重复添加的提示列表
	// 注意：此字段可能返回 null，表示取不到有效值。
	DuplicateHosts []*DuplicateHosts `json:"DuplicateHosts,omitnil,omitempty" name:"DuplicateHosts"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type AddLoginWhiteListsResponse struct {
	*tchttp.BaseResponse
	Response *AddLoginWhiteListsResponseParams `json:"Response"`
}

func (r *AddLoginWhiteListsResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *AddLoginWhiteListsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type AlarmInfo struct {
	// 该节点关联的告警，告警的table_name+id（t1:id1,t2:id2,...)
	AlarmId *string `json:"AlarmId,omitnil,omitempty" name:"AlarmId"`

	// 告警事件表状态，当该节点为告警点时生效
	Status *int64 `json:"Status,omitnil,omitempty" name:"Status"`
}

type AssetAppBaseInfo struct {
	// 主机内网IP
	MachineIp *string `json:"MachineIp,omitnil,omitempty" name:"MachineIp"`

	// 主机名称
	MachineName *string `json:"MachineName,omitnil,omitempty" name:"MachineName"`

	// 主机外网IP
	MachineWanIp *string `json:"MachineWanIp,omitnil,omitempty" name:"MachineWanIp"`

	// 主机Uuid
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 主机Quuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 主机业务组ID
	ProjectId *uint64 `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// 主机标签
	// 注意：此字段可能返回 null，表示取不到有效值。
	Tag []*MachineTag `json:"Tag,omitnil,omitempty" name:"Tag"`

	// 应用名称
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// 应用类型	
	// 1: 运维
	// 2 : 数据库
	// 3 : 安全
	// 4 : 可疑应用
	// 5 : 系统架构
	// 6 : 系统应用
	// 7 : WEB服务
	// 99: 其他
	Type *uint64 `json:"Type,omitnil,omitempty" name:"Type"`

	// 二进制路径
	BinPath *string `json:"BinPath,omitnil,omitempty" name:"BinPath"`

	// 操作系统信息
	OsInfo *string `json:"OsInfo,omitnil,omitempty" name:"OsInfo"`

	// 关联进程数
	ProcessCount *uint64 `json:"ProcessCount,omitnil,omitempty" name:"ProcessCount"`

	// 应用描述
	Desc *string `json:"Desc,omitnil,omitempty" name:"Desc"`

	// 版本号
	Version *string `json:"Version,omitnil,omitempty" name:"Version"`

	// 配置文件路径
	ConfigPath *string `json:"ConfigPath,omitnil,omitempty" name:"ConfigPath"`

	// 首次采集时间
	FirstTime *string `json:"FirstTime,omitnil,omitempty" name:"FirstTime"`

	// 数据更新时间
	// 注意：此字段可能返回 null，表示取不到有效值。
	UpdateTime *string `json:"UpdateTime,omitnil,omitempty" name:"UpdateTime"`

	// 是否新增[0:否|1:是]
	// 注意：此字段可能返回 null，表示取不到有效值。
	IsNew *int64 `json:"IsNew,omitnil,omitempty" name:"IsNew"`

	// 附加信息
	// 注意：此字段可能返回 null，表示取不到有效值。
	MachineExtraInfo *MachineExtraInfo `json:"MachineExtraInfo,omitnil,omitempty" name:"MachineExtraInfo"`
}

type AssetAppProcessInfo struct {
	// 名称
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// 进程状态
	Status *string `json:"Status,omitnil,omitempty" name:"Status"`

	// 进程版本
	Version *string `json:"Version,omitnil,omitempty" name:"Version"`

	// 路径
	Path *string `json:"Path,omitnil,omitempty" name:"Path"`

	// 用户
	User *string `json:"User,omitnil,omitempty" name:"User"`

	// 启动时间
	StartTime *string `json:"StartTime,omitnil,omitempty" name:"StartTime"`
}

type AssetCoreModuleBaseInfo struct {
	// 名称
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// 描述
	Desc *string `json:"Desc,omitnil,omitempty" name:"Desc"`

	// 路径
	Path *string `json:"Path,omitnil,omitempty" name:"Path"`

	// 版本
	Version *string `json:"Version,omitnil,omitempty" name:"Version"`

	// 服务器IP
	MachineIp *string `json:"MachineIp,omitnil,omitempty" name:"MachineIp"`

	// 服务器名称
	MachineName *string `json:"MachineName,omitnil,omitempty" name:"MachineName"`

	// 操作系统
	OsInfo *string `json:"OsInfo,omitnil,omitempty" name:"OsInfo"`

	// 模块大小
	Size *uint64 `json:"Size,omitnil,omitempty" name:"Size"`

	// 依赖进程数
	ProcessCount *uint64 `json:"ProcessCount,omitnil,omitempty" name:"ProcessCount"`

	// 依赖模块数
	ModuleCount *uint64 `json:"ModuleCount,omitnil,omitempty" name:"ModuleCount"`

	// 模块ID
	Id *string `json:"Id,omitnil,omitempty" name:"Id"`

	// 主机Quuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 主机uuid
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 数据更新时间
	// 注意：此字段可能返回 null，表示取不到有效值。
	UpdateTime *string `json:"UpdateTime,omitnil,omitempty" name:"UpdateTime"`

	// 首次采集时间
	FirstTime *string `json:"FirstTime,omitnil,omitempty" name:"FirstTime"`

	// 是否新增[0:否|1:是]
	IsNew *int64 `json:"IsNew,omitnil,omitempty" name:"IsNew"`

	// 服务器外网IP
	MachineWanIp *string `json:"MachineWanIp,omitnil,omitempty" name:"MachineWanIp"`

	//  附加信息
	// 注意：此字段可能返回 null，表示取不到有效值。
	MachineExtraInfo *MachineExtraInfo `json:"MachineExtraInfo,omitnil,omitempty" name:"MachineExtraInfo"`
}

type AssetCoreModuleDetail struct {
	// 名称
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// 描述
	Desc *string `json:"Desc,omitnil,omitempty" name:"Desc"`

	// 路径
	Path *string `json:"Path,omitnil,omitempty" name:"Path"`

	// 版本
	Version *string `json:"Version,omitnil,omitempty" name:"Version"`

	// 大小
	Size *uint64 `json:"Size,omitnil,omitempty" name:"Size"`

	// 依赖进程
	Processes *string `json:"Processes,omitnil,omitempty" name:"Processes"`

	// 被依赖模块
	Modules *string `json:"Modules,omitnil,omitempty" name:"Modules"`

	// 参数信息
	// 注意：此字段可能返回 null，表示取不到有效值。
	Params []*AssetCoreModuleParam `json:"Params,omitnil,omitempty" name:"Params"`

	// 数据更新时间
	// 注意：此字段可能返回 null，表示取不到有效值。
	UpdateTime *string `json:"UpdateTime,omitnil,omitempty" name:"UpdateTime"`
}

type AssetCoreModuleParam struct {
	// 名称
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// 数据
	Data *string `json:"Data,omitnil,omitempty" name:"Data"`
}

type AssetDatabaseBaseInfo struct {
	// 主机内网IP
	MachineIp *string `json:"MachineIp,omitnil,omitempty" name:"MachineIp"`

	// 主机外网IP
	MachineWanIp *string `json:"MachineWanIp,omitnil,omitempty" name:"MachineWanIp"`

	// 主机Quuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 主机Uuid
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 操作系统信息
	OsInfo *string `json:"OsInfo,omitnil,omitempty" name:"OsInfo"`

	// 主机业务组ID
	ProjectId *uint64 `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// 主机标签
	// 注意：此字段可能返回 null，表示取不到有效值。
	Tag []*MachineTag `json:"Tag,omitnil,omitempty" name:"Tag"`

	// 数据库名
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// 版本
	Version *string `json:"Version,omitnil,omitempty" name:"Version"`

	// 监听端口
	Port *string `json:"Port,omitnil,omitempty" name:"Port"`

	// 协议
	Proto *string `json:"Proto,omitnil,omitempty" name:"Proto"`

	// 运行用户
	User *string `json:"User,omitnil,omitempty" name:"User"`

	// 绑定IP
	Ip *string `json:"Ip,omitnil,omitempty" name:"Ip"`

	// 配置文件路径
	ConfigPath *string `json:"ConfigPath,omitnil,omitempty" name:"ConfigPath"`

	// 日志文件路径
	LogPath *string `json:"LogPath,omitnil,omitempty" name:"LogPath"`

	// 数据路径
	DataPath *string `json:"DataPath,omitnil,omitempty" name:"DataPath"`

	// 运行权限
	Permission *string `json:"Permission,omitnil,omitempty" name:"Permission"`

	// 错误日志路径
	ErrorLogPath *string `json:"ErrorLogPath,omitnil,omitempty" name:"ErrorLogPath"`

	// 插件路径
	PlugInPath *string `json:"PlugInPath,omitnil,omitempty" name:"PlugInPath"`

	// 二进制路径
	BinPath *string `json:"BinPath,omitnil,omitempty" name:"BinPath"`

	// 启动参数
	Param *string `json:"Param,omitnil,omitempty" name:"Param"`

	// 数据库ID
	Id *string `json:"Id,omitnil,omitempty" name:"Id"`

	// 数据更新时间
	// 注意：此字段可能返回 null，表示取不到有效值。
	UpdateTime *string `json:"UpdateTime,omitnil,omitempty" name:"UpdateTime"`

	// 首次采集时间
	FirstTime *string `json:"FirstTime,omitnil,omitempty" name:"FirstTime"`

	// 是否新增[0:否|1:是]
	IsNew *int64 `json:"IsNew,omitnil,omitempty" name:"IsNew"`

	// 主机名称
	MachineName *string `json:"MachineName,omitnil,omitempty" name:"MachineName"`

	//  附加信息
	// 注意：此字段可能返回 null，表示取不到有效值。
	MachineExtraInfo *MachineExtraInfo `json:"MachineExtraInfo,omitnil,omitempty" name:"MachineExtraInfo"`
}

type AssetDatabaseDetail struct {
	// 主机内网IP
	MachineIp *string `json:"MachineIp,omitnil,omitempty" name:"MachineIp"`

	// 主机外网IP
	MachineWanIp *string `json:"MachineWanIp,omitnil,omitempty" name:"MachineWanIp"`

	// 主机Quuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 主机Uuid
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 操作系统信息
	OsInfo *string `json:"OsInfo,omitnil,omitempty" name:"OsInfo"`

	// 数据库名
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// 版本
	Version *string `json:"Version,omitnil,omitempty" name:"Version"`

	// 监听端口
	Port *string `json:"Port,omitnil,omitempty" name:"Port"`

	// 协议
	Proto *string `json:"Proto,omitnil,omitempty" name:"Proto"`

	// 运行用户
	User *string `json:"User,omitnil,omitempty" name:"User"`

	// 绑定IP
	Ip *string `json:"Ip,omitnil,omitempty" name:"Ip"`

	// 配置文件路径
	ConfigPath *string `json:"ConfigPath,omitnil,omitempty" name:"ConfigPath"`

	// 日志文件路径
	LogPath *string `json:"LogPath,omitnil,omitempty" name:"LogPath"`

	// 数据路径
	DataPath *string `json:"DataPath,omitnil,omitempty" name:"DataPath"`

	// 运行权限
	Permission *string `json:"Permission,omitnil,omitempty" name:"Permission"`

	// 错误日志路径
	ErrorLogPath *string `json:"ErrorLogPath,omitnil,omitempty" name:"ErrorLogPath"`

	// 插件路径
	PlugInPath *string `json:"PlugInPath,omitnil,omitempty" name:"PlugInPath"`

	// 二进制路径
	BinPath *string `json:"BinPath,omitnil,omitempty" name:"BinPath"`

	// 启动参数
	Param *string `json:"Param,omitnil,omitempty" name:"Param"`

	// 数据更新时间
	// 注意：此字段可能返回 null，表示取不到有效值。
	UpdateTime *string `json:"UpdateTime,omitnil,omitempty" name:"UpdateTime"`
}

type AssetDiskPartitionInfo struct {
	// 分区名
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// 分区大小：单位G
	Size *uint64 `json:"Size,omitnil,omitempty" name:"Size"`

	// 分区使用率
	Percent *float64 `json:"Percent,omitnil,omitempty" name:"Percent"`

	// 文件系统类型
	Type *string `json:"Type,omitnil,omitempty" name:"Type"`

	// 挂载目录
	Path *string `json:"Path,omitnil,omitempty" name:"Path"`

	// 已使用空间：单位G
	Used *uint64 `json:"Used,omitnil,omitempty" name:"Used"`
}

type AssetEnvBaseInfo struct {
	// 名称
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// 类型：
	// 0:用户变量
	// 1:系统变量
	Type *uint64 `json:"Type,omitnil,omitempty" name:"Type"`

	// 启动用户
	User *string `json:"User,omitnil,omitempty" name:"User"`

	// 环境变量值
	Value *string `json:"Value,omitnil,omitempty" name:"Value"`

	// 服务器IP
	MachineIp *string `json:"MachineIp,omitnil,omitempty" name:"MachineIp"`

	// 服务器名称
	MachineName *string `json:"MachineName,omitnil,omitempty" name:"MachineName"`

	// 操作系统
	OsInfo *string `json:"OsInfo,omitnil,omitempty" name:"OsInfo"`

	// 主机Quuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 主机uuid
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 数据更新时间
	// 注意：此字段可能返回 null，表示取不到有效值。
	UpdateTime *string `json:"UpdateTime,omitnil,omitempty" name:"UpdateTime"`

	// 首次采集时间
	FirstTime *string `json:"FirstTime,omitnil,omitempty" name:"FirstTime"`

	// 是否新增[0:否|1:是]
	IsNew *int64 `json:"IsNew,omitnil,omitempty" name:"IsNew"`

	// 服务器外网IP
	MachineWanIp *string `json:"MachineWanIp,omitnil,omitempty" name:"MachineWanIp"`

	//  附加信息
	// 
	// 注意：此字段可能返回 null，表示取不到有效值。
	MachineExtraInfo *MachineExtraInfo `json:"MachineExtraInfo,omitnil,omitempty" name:"MachineExtraInfo"`
}

type AssetFilters struct {
	// 过滤键的名称。
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// 一个或者多个过滤值。
	Values []*string `json:"Values,omitnil,omitempty" name:"Values"`

	// 是否模糊查询
	ExactMatch *bool `json:"ExactMatch,omitnil,omitempty" name:"ExactMatch"`
}

type AssetInitServiceBaseInfo struct {
	// 名称
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// 类型：
	// 1:编码器
	// 2:IE插件
	// 3:网络提供者
	// 4:镜像劫持
	// 5:LSA提供者
	// 6:KnownDLLs
	// 7:启动执行
	// 8:WMI
	// 9:计划任务
	// 10:Winsock提供者
	// 11:打印监控器
	// 12:资源管理器
	// 13:驱动服务
	// 14:登录
	Type *uint64 `json:"Type,omitnil,omitempty" name:"Type"`

	// 默认启用状态：0未启用，1启用
	Status *uint64 `json:"Status,omitnil,omitempty" name:"Status"`

	// 启动用户
	User *string `json:"User,omitnil,omitempty" name:"User"`

	// 路径
	Path *string `json:"Path,omitnil,omitempty" name:"Path"`

	// 服务器IP
	MachineIp *string `json:"MachineIp,omitnil,omitempty" name:"MachineIp"`

	// 服务器名称
	MachineName *string `json:"MachineName,omitnil,omitempty" name:"MachineName"`

	// 操作系统
	OsInfo *string `json:"OsInfo,omitnil,omitempty" name:"OsInfo"`

	// 主机Quuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 主机uuid
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 数据更新时间
	UpdateTime *string `json:"UpdateTime,omitnil,omitempty" name:"UpdateTime"`

	// 首次采集时间
	FirstTime *string `json:"FirstTime,omitnil,omitempty" name:"FirstTime"`

	// 是否新增[0:否|1:是]
	IsNew *int64 `json:"IsNew,omitnil,omitempty" name:"IsNew"`

	// 服务器外网IP
	MachineWanIp *string `json:"MachineWanIp,omitnil,omitempty" name:"MachineWanIp"`

	//  附加信息
	// 
	// 注意：此字段可能返回 null，表示取不到有效值。
	MachineExtraInfo *MachineExtraInfo `json:"MachineExtraInfo,omitnil,omitempty" name:"MachineExtraInfo"`

	// 开机自启动[0:否|1:是]
	IsAutoRun *int64 `json:"IsAutoRun,omitnil,omitempty" name:"IsAutoRun"`
}

type AssetJarBaseInfo struct {
	// 名称
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// 类型：1应用程序，2系统类库，3Web服务自带库，8:其他，
	Type *int64 `json:"Type,omitnil,omitempty" name:"Type"`

	// 是否可执行：0未知，1是，2否
	Status *uint64 `json:"Status,omitnil,omitempty" name:"Status"`

	// 版本
	Version *string `json:"Version,omitnil,omitempty" name:"Version"`

	// 路径
	Path *string `json:"Path,omitnil,omitempty" name:"Path"`

	// 服务器IP
	MachineIp *string `json:"MachineIp,omitnil,omitempty" name:"MachineIp"`

	// 服务器名称
	MachineName *string `json:"MachineName,omitnil,omitempty" name:"MachineName"`

	// 操作系统
	OsInfo *string `json:"OsInfo,omitnil,omitempty" name:"OsInfo"`

	// Jar包ID
	Id *string `json:"Id,omitnil,omitempty" name:"Id"`

	// Jar包Md5
	Md5 *string `json:"Md5,omitnil,omitempty" name:"Md5"`

	// 主机Quuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 主机uuid
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 数据更新时间
	// 注意：此字段可能返回 null，表示取不到有效值。
	UpdateTime *string `json:"UpdateTime,omitnil,omitempty" name:"UpdateTime"`

	// 首次采集时间
	FirstTime *string `json:"FirstTime,omitnil,omitempty" name:"FirstTime"`

	// 是否新增[0:否|1:是]
	IsNew *int64 `json:"IsNew,omitnil,omitempty" name:"IsNew"`

	// 服务器外网IP
	MachineWanIp *string `json:"MachineWanIp,omitnil,omitempty" name:"MachineWanIp"`

	//  附加信息
	// 
	// 注意：此字段可能返回 null，表示取不到有效值。
	MachineExtraInfo *MachineExtraInfo `json:"MachineExtraInfo,omitnil,omitempty" name:"MachineExtraInfo"`
}

type AssetJarDetail struct {
	// 名称
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// 类型：1应用程序，2系统类库，3Web服务自带库，8:其他，
	Type *int64 `json:"Type,omitnil,omitempty" name:"Type"`

	// 是否可执行：0未知，1是，2否
	Status *uint64 `json:"Status,omitnil,omitempty" name:"Status"`

	// 版本
	Version *string `json:"Version,omitnil,omitempty" name:"Version"`

	// 路径
	Path *string `json:"Path,omitnil,omitempty" name:"Path"`

	// 服务器IP
	MachineIp *string `json:"MachineIp,omitnil,omitempty" name:"MachineIp"`

	// 服务器名称
	MachineName *string `json:"MachineName,omitnil,omitempty" name:"MachineName"`

	// 操作系统
	OsInfo *string `json:"OsInfo,omitnil,omitempty" name:"OsInfo"`

	// 引用进程列表
	// 注意：此字段可能返回 null，表示取不到有效值。
	Process []*AssetAppProcessInfo `json:"Process,omitnil,omitempty" name:"Process"`

	// Jar包Md5
	// 注意：此字段可能返回 null，表示取不到有效值。
	Md5 *string `json:"Md5,omitnil,omitempty" name:"Md5"`

	// 数据更新时间
	// 注意：此字段可能返回 null，表示取不到有效值。
	UpdateTime *string `json:"UpdateTime,omitnil,omitempty" name:"UpdateTime"`
}

type AssetKeyVal struct {
	// 标签
	Key *string `json:"Key,omitnil,omitempty" name:"Key"`

	// 数量
	Value *int64 `json:"Value,omitnil,omitempty" name:"Value"`

	// 描述信息
	// 注意：此字段可能返回 null，表示取不到有效值。
	Desc *string `json:"Desc,omitnil,omitempty" name:"Desc"`

	// 今日新增数量
	// 注意：此字段可能返回 null，表示取不到有效值。
	NewCount *int64 `json:"NewCount,omitnil,omitempty" name:"NewCount"`
}

type AssetLoadDetail struct {
	// 主机名称
	MachineName *string `json:"MachineName,omitnil,omitempty" name:"MachineName"`

	// 描述
	Desc *string `json:"Desc,omitnil,omitempty" name:"Desc"`

	// 负载
	Value *float64 `json:"Value,omitnil,omitempty" name:"Value"`

	// 主机Quuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 主机Uuid
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`
}

type AssetLoadSummary struct {
	// 负载量数组，依次为：
	// [
	// 0%或未知数量，
	// 0%～20%，
	// 20%～50%，
	// 50%～80%，
	// 80%～100%
	// ]
	Counts []*uint64 `json:"Counts,omitnil,omitempty" name:"Counts"`

	// 负载Top5
	// 注意：此字段可能返回 null，表示取不到有效值。
	Top5 []*AssetLoadDetail `json:"Top5,omitnil,omitempty" name:"Top5"`
}

type AssetMachineBaseInfo struct {
	// 服务器Quuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 服务器uuid
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 服务器内网IP
	MachineIp *string `json:"MachineIp,omitnil,omitempty" name:"MachineIp"`

	// 服务器名称
	MachineName *string `json:"MachineName,omitnil,omitempty" name:"MachineName"`

	// 操作系统名称
	OsInfo *string `json:"OsInfo,omitnil,omitempty" name:"OsInfo"`

	// CPU信息
	Cpu *string `json:"Cpu,omitnil,omitempty" name:"Cpu"`

	// 内存容量：单位G
	MemSize *uint64 `json:"MemSize,omitnil,omitempty" name:"MemSize"`

	// 内存使用率百分比
	MemLoad *string `json:"MemLoad,omitnil,omitempty" name:"MemLoad"`

	// 硬盘容量：单位G
	DiskSize *uint64 `json:"DiskSize,omitnil,omitempty" name:"DiskSize"`

	// 硬盘使用率百分比
	DiskLoad *string `json:"DiskLoad,omitnil,omitempty" name:"DiskLoad"`

	// 分区数
	PartitionCount *uint64 `json:"PartitionCount,omitnil,omitempty" name:"PartitionCount"`

	// 主机外网IP
	MachineWanIp *string `json:"MachineWanIp,omitnil,omitempty" name:"MachineWanIp"`

	// 业务组ID
	ProjectId *uint64 `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Cpu数量
	CpuSize *uint64 `json:"CpuSize,omitnil,omitempty" name:"CpuSize"`

	// Cpu使用率百分比
	CpuLoad *string `json:"CpuLoad,omitnil,omitempty" name:"CpuLoad"`

	// 标签
	// 注意：此字段可能返回 null，表示取不到有效值。
	Tag []*MachineTag `json:"Tag,omitnil,omitempty" name:"Tag"`

	// 数据更新时间
	// 注意：此字段可能返回 null，表示取不到有效值。
	UpdateTime *string `json:"UpdateTime,omitnil,omitempty" name:"UpdateTime"`

	// 是否新增[0:否|1:是]
	IsNew *int64 `json:"IsNew,omitnil,omitempty" name:"IsNew"`

	// 首次采集时间
	FirstTime *string `json:"FirstTime,omitnil,omitempty" name:"FirstTime"`

	// 附加信息
	// 注意：此字段可能返回 null，表示取不到有效值。
	MachineExtraInfo *MachineExtraInfo `json:"MachineExtraInfo,omitnil,omitempty" name:"MachineExtraInfo"`

	// cpu负载读数（仅linux系统有效）
	// 注意：此字段可能返回 null，表示取不到有效值。
	CpuLoadNum *string `json:"CpuLoadNum,omitnil,omitempty" name:"CpuLoadNum"`
}

type AssetMachineDetail struct {
	// 服务器Quuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 服务器uuid
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 服务器内网IP
	MachineIp *string `json:"MachineIp,omitnil,omitempty" name:"MachineIp"`

	// 服务器名称
	MachineName *string `json:"MachineName,omitnil,omitempty" name:"MachineName"`

	// 操作系统名称
	OsInfo *string `json:"OsInfo,omitnil,omitempty" name:"OsInfo"`

	// CPU信息
	Cpu *string `json:"Cpu,omitnil,omitempty" name:"Cpu"`

	// 内存容量：单位G
	MemSize *uint64 `json:"MemSize,omitnil,omitempty" name:"MemSize"`

	// 内存使用率百分比
	MemLoad *string `json:"MemLoad,omitnil,omitempty" name:"MemLoad"`

	// 硬盘容量：单位G
	DiskSize *uint64 `json:"DiskSize,omitnil,omitempty" name:"DiskSize"`

	// 硬盘使用率百分比
	DiskLoad *string `json:"DiskLoad,omitnil,omitempty" name:"DiskLoad"`

	// 分区数
	PartitionCount *uint64 `json:"PartitionCount,omitnil,omitempty" name:"PartitionCount"`

	// 主机外网IP
	MachineWanIp *string `json:"MachineWanIp,omitnil,omitempty" name:"MachineWanIp"`

	// Cpu数量
	CpuSize *uint64 `json:"CpuSize,omitnil,omitempty" name:"CpuSize"`

	// Cpu负载
	CpuLoad *string `json:"CpuLoad,omitnil,omitempty" name:"CpuLoad"`

	// 防护级别：0基础版，1专业版，2旗舰版，3普惠版
	ProtectLevel *uint64 `json:"ProtectLevel,omitnil,omitempty" name:"ProtectLevel"`

	// 风险状态：UNKNOW-未知，RISK-风险，SAFT-安全
	RiskStatus *string `json:"RiskStatus,omitnil,omitempty" name:"RiskStatus"`

	// 已防护天数
	ProtectDays *uint64 `json:"ProtectDays,omitnil,omitempty" name:"ProtectDays"`

	// 专业版开通时间
	BuyTime *string `json:"BuyTime,omitnil,omitempty" name:"BuyTime"`

	// 专业版到期时间
	EndTime *string `json:"EndTime,omitnil,omitempty" name:"EndTime"`

	// 内核版本
	CoreVersion *string `json:"CoreVersion,omitnil,omitempty" name:"CoreVersion"`

	// Linux/Windows
	OsType *string `json:"OsType,omitnil,omitempty" name:"OsType"`

	// agent版本
	AgentVersion *string `json:"AgentVersion,omitnil,omitempty" name:"AgentVersion"`

	// 安装时间
	InstallTime *string `json:"InstallTime,omitnil,omitempty" name:"InstallTime"`

	// 系统启动时间
	BootTime *string `json:"BootTime,omitnil,omitempty" name:"BootTime"`

	// 最后上线时间
	LastLiveTime *string `json:"LastLiveTime,omitnil,omitempty" name:"LastLiveTime"`

	// 生产商
	Producer *string `json:"Producer,omitnil,omitempty" name:"Producer"`

	// 序列号
	SerialNumber *string `json:"SerialNumber,omitnil,omitempty" name:"SerialNumber"`

	// 网卡
	NetCards []*AssetNetworkCardInfo `json:"NetCards,omitnil,omitempty" name:"NetCards"`

	// 分区
	Disks []*AssetDiskPartitionInfo `json:"Disks,omitnil,omitempty" name:"Disks"`

	// 0在线，1已离线
	Status *uint64 `json:"Status,omitnil,omitempty" name:"Status"`

	// 业务组ID
	ProjectId *uint64 `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// 设备型号
	DeviceVersion *string `json:"DeviceVersion,omitnil,omitempty" name:"DeviceVersion"`

	// 离线时间
	// 注意：此字段可能返回 null，表示取不到有效值。
	OfflineTime *string `json:"OfflineTime,omitnil,omitempty" name:"OfflineTime"`

	// 主机ID
	// 注意：此字段可能返回 null，表示取不到有效值。
	InstanceId *string `json:"InstanceId,omitnil,omitempty" name:"InstanceId"`

	// 数据更新时间
	// 注意：此字段可能返回 null，表示取不到有效值。
	UpdateTime *string `json:"UpdateTime,omitnil,omitempty" name:"UpdateTime"`

	// 主机二外信息
	// 注意：此字段可能返回 null，表示取不到有效值。
	MachineExtraInfo *MachineExtraInfo `json:"MachineExtraInfo,omitnil,omitempty" name:"MachineExtraInfo"`

	// CpuLoadVul
	// 注意：此字段可能返回 null，表示取不到有效值。
	CpuLoadVul *string `json:"CpuLoadVul,omitnil,omitempty" name:"CpuLoadVul"`

	// 时间
	// 注意：此字段可能返回 null，表示取不到有效值。
	FirstTime *string `json:"FirstTime,omitnil,omitempty" name:"FirstTime"`
}

type AssetNetworkCardInfo struct {
	// 网卡名称
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// Ipv4对应IP
	Ip *string `json:"Ip,omitnil,omitempty" name:"Ip"`

	// 网关
	GateWay *string `json:"GateWay,omitnil,omitempty" name:"GateWay"`

	// MAC地址
	Mac *string `json:"Mac,omitnil,omitempty" name:"Mac"`

	// Ipv6对应IP
	Ipv6 *string `json:"Ipv6,omitnil,omitempty" name:"Ipv6"`

	// DNS服务器
	DnsServer *string `json:"DnsServer,omitnil,omitempty" name:"DnsServer"`
}

type AssetPlanTask struct {
	// 默认启用状态：1启用，2未启用
	Status *uint64 `json:"Status,omitnil,omitempty" name:"Status"`

	// 执行周期
	Cycle *string `json:"Cycle,omitnil,omitempty" name:"Cycle"`

	// 执行命令或脚本
	Command *string `json:"Command,omitnil,omitempty" name:"Command"`

	// 启动用户
	User *string `json:"User,omitnil,omitempty" name:"User"`

	// 配置文件路径
	ConfigPath *string `json:"ConfigPath,omitnil,omitempty" name:"ConfigPath"`

	// 服务器IP
	MachineIp *string `json:"MachineIp,omitnil,omitempty" name:"MachineIp"`

	// 服务器名称
	MachineName *string `json:"MachineName,omitnil,omitempty" name:"MachineName"`

	// 操作系统
	OsInfo *string `json:"OsInfo,omitnil,omitempty" name:"OsInfo"`

	// 主机Quuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 主机uuid
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 数据更新时间
	// 注意：此字段可能返回 null，表示取不到有效值。
	UpdateTime *string `json:"UpdateTime,omitnil,omitempty" name:"UpdateTime"`

	// 首次采集时间
	FirstTime *string `json:"FirstTime,omitnil,omitempty" name:"FirstTime"`

	// 是否新增[0:否|1:是]
	IsNew *int64 `json:"IsNew,omitnil,omitempty" name:"IsNew"`

	// 服务器外网IP
	MachineWanIp *string `json:"MachineWanIp,omitnil,omitempty" name:"MachineWanIp"`

	//  附加信息
	// 注意：此字段可能返回 null，表示取不到有效值。
	MachineExtraInfo *MachineExtraInfo `json:"MachineExtraInfo,omitnil,omitempty" name:"MachineExtraInfo"`
}

type AssetPortBaseInfo struct {
	// 主机内网IP
	MachineIp *string `json:"MachineIp,omitnil,omitempty" name:"MachineIp"`

	// 主机外网IP
	MachineWanIp *string `json:"MachineWanIp,omitnil,omitempty" name:"MachineWanIp"`

	// 主机Quuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 主机Uuid
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 操作系统信息
	OsInfo *string `json:"OsInfo,omitnil,omitempty" name:"OsInfo"`

	// 主机业务组ID
	ProjectId *uint64 `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// 主机标签
	// 注意：此字段可能返回 null，表示取不到有效值。
	Tag []*MachineTag `json:"Tag,omitnil,omitempty" name:"Tag"`

	// 进程名称
	ProcessName *string `json:"ProcessName,omitnil,omitempty" name:"ProcessName"`

	// 进程版本
	ProcessVersion *string `json:"ProcessVersion,omitnil,omitempty" name:"ProcessVersion"`

	// 进程路径
	ProcessPath *string `json:"ProcessPath,omitnil,omitempty" name:"ProcessPath"`

	// 进程ID
	Pid *string `json:"Pid,omitnil,omitempty" name:"Pid"`

	// 运行用户
	User *string `json:"User,omitnil,omitempty" name:"User"`

	// 启动时间
	StartTime *string `json:"StartTime,omitnil,omitempty" name:"StartTime"`

	// 启动参数
	Param *string `json:"Param,omitnil,omitempty" name:"Param"`

	// 进程TTY
	Teletype *string `json:"Teletype,omitnil,omitempty" name:"Teletype"`

	// 端口
	Port *string `json:"Port,omitnil,omitempty" name:"Port"`

	// 所属用户组
	GroupName *string `json:"GroupName,omitnil,omitempty" name:"GroupName"`

	// 进程MD5
	Md5 *string `json:"Md5,omitnil,omitempty" name:"Md5"`

	// 父进程ID
	Ppid *string `json:"Ppid,omitnil,omitempty" name:"Ppid"`

	// 父进程名称
	ParentProcessName *string `json:"ParentProcessName,omitnil,omitempty" name:"ParentProcessName"`

	// 端口协议
	Proto *string `json:"Proto,omitnil,omitempty" name:"Proto"`

	// 绑定IP
	BindIp *string `json:"BindIp,omitnil,omitempty" name:"BindIp"`

	// 主机名称
	MachineName *string `json:"MachineName,omitnil,omitempty" name:"MachineName"`

	// 数据更新时间
	// 注意：此字段可能返回 null，表示取不到有效值。
	UpdateTime *string `json:"UpdateTime,omitnil,omitempty" name:"UpdateTime"`

	// 首次采集时间
	FirstTime *string `json:"FirstTime,omitnil,omitempty" name:"FirstTime"`

	// 是否新增[0:否|1:是]
	IsNew *int64 `json:"IsNew,omitnil,omitempty" name:"IsNew"`

	//  附加信息
	// 注意：此字段可能返回 null，表示取不到有效值。
	MachineExtraInfo *MachineExtraInfo `json:"MachineExtraInfo,omitnil,omitempty" name:"MachineExtraInfo"`
}

type AssetProcessBaseInfo struct {
	// 主机内网IP
	MachineIp *string `json:"MachineIp,omitnil,omitempty" name:"MachineIp"`

	// 主机外网IP
	MachineWanIp *string `json:"MachineWanIp,omitnil,omitempty" name:"MachineWanIp"`

	// 主机Quuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 主机Uuid
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 操作系统信息
	OsInfo *string `json:"OsInfo,omitnil,omitempty" name:"OsInfo"`

	// 主机业务组ID
	ProjectId *uint64 `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// 主机标签
	// 注意：此字段可能返回 null，表示取不到有效值。
	Tag []*MachineTag `json:"Tag,omitnil,omitempty" name:"Tag"`

	// 进程名称
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// 进程说明
	Desc *string `json:"Desc,omitnil,omitempty" name:"Desc"`

	// 进程路径
	Path *string `json:"Path,omitnil,omitempty" name:"Path"`

	// 进程ID
	Pid *string `json:"Pid,omitnil,omitempty" name:"Pid"`

	// 运行用户
	User *string `json:"User,omitnil,omitempty" name:"User"`

	// 启动时间
	StartTime *string `json:"StartTime,omitnil,omitempty" name:"StartTime"`

	// 启动参数
	Param *string `json:"Param,omitnil,omitempty" name:"Param"`

	// 进程TTY
	Tty *string `json:"Tty,omitnil,omitempty" name:"Tty"`

	// 进程版本
	Version *string `json:"Version,omitnil,omitempty" name:"Version"`

	// 进程用户组
	GroupName *string `json:"GroupName,omitnil,omitempty" name:"GroupName"`

	// 进程MD5
	Md5 *string `json:"Md5,omitnil,omitempty" name:"Md5"`

	// 父进程ID
	Ppid *string `json:"Ppid,omitnil,omitempty" name:"Ppid"`

	// 父进程名称
	ParentProcessName *string `json:"ParentProcessName,omitnil,omitempty" name:"ParentProcessName"`

	// 进程状态
	Status *string `json:"Status,omitnil,omitempty" name:"Status"`

	// 数字签名:0无，1有， 999 空，仅Windows
	HasSign *uint64 `json:"HasSign,omitnil,omitempty" name:"HasSign"`

	// 是否通过安装包安装：:0否，1是， 999 空，仅linux
	InstallByPackage *uint64 `json:"InstallByPackage,omitnil,omitempty" name:"InstallByPackage"`

	// 软件包名
	PackageName *string `json:"PackageName,omitnil,omitempty" name:"PackageName"`

	// 主机名称
	MachineName *string `json:"MachineName,omitnil,omitempty" name:"MachineName"`

	// 数据更新时间
	// 注意：此字段可能返回 null，表示取不到有效值。
	UpdateTime *string `json:"UpdateTime,omitnil,omitempty" name:"UpdateTime"`

	// 首次采集时间
	FirstTime *string `json:"FirstTime,omitnil,omitempty" name:"FirstTime"`

	// 是否新增[0:否|1:是]
	IsNew *int64 `json:"IsNew,omitnil,omitempty" name:"IsNew"`

	// 
	//  附加信息
	// 
	// 注意：此字段可能返回 null，表示取不到有效值。
	MachineExtraInfo *MachineExtraInfo `json:"MachineExtraInfo,omitnil,omitempty" name:"MachineExtraInfo"`
}

type AssetSystemPackageInfo struct {
	// 数据库名
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// 描述
	Desc *string `json:"Desc,omitnil,omitempty" name:"Desc"`

	// 版本
	Version *string `json:"Version,omitnil,omitempty" name:"Version"`

	// 安装时间
	InstallTime *string `json:"InstallTime,omitnil,omitempty" name:"InstallTime"`

	// 类型
	Type *string `json:"Type,omitnil,omitempty" name:"Type"`

	// 主机名称
	MachineName *string `json:"MachineName,omitnil,omitempty" name:"MachineName"`

	// 主机IP
	MachineIp *string `json:"MachineIp,omitnil,omitempty" name:"MachineIp"`

	// 操作系统
	OsInfo *string `json:"OsInfo,omitnil,omitempty" name:"OsInfo"`

	// 数据更新时间
	// 注意：此字段可能返回 null，表示取不到有效值。
	UpdateTime *string `json:"UpdateTime,omitnil,omitempty" name:"UpdateTime"`

	// 首次采集时间
	FirstTime *string `json:"FirstTime,omitnil,omitempty" name:"FirstTime"`

	// 是否新增[0:否|1:是]
	IsNew *int64 `json:"IsNew,omitnil,omitempty" name:"IsNew"`

	// 附加信息
	MachineExtraInfo *MachineExtraInfo `json:"MachineExtraInfo,omitnil,omitempty" name:"MachineExtraInfo"`

	// 主机Id
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// Agent Id
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`
}

type AssetType struct {
	// 类型ID
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`

	// 类型名称
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`
}

type AssetUserBaseInfo struct {
	// 主机内网IP
	MachineIp *string `json:"MachineIp,omitnil,omitempty" name:"MachineIp"`

	// 主机外网IP
	MachineWanIp *string `json:"MachineWanIp,omitnil,omitempty" name:"MachineWanIp"`

	// 主机名称
	MachineName *string `json:"MachineName,omitnil,omitempty" name:"MachineName"`

	// 操作系统信息
	OsInfo *string `json:"OsInfo,omitnil,omitempty" name:"OsInfo"`

	// 主机Uuid
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 主机Quuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 账号UID
	Uid *string `json:"Uid,omitnil,omitempty" name:"Uid"`

	// 账号GID
	Gid *string `json:"Gid,omitnil,omitempty" name:"Gid"`

	// 账号状态：0-禁用；1-启用
	Status *uint64 `json:"Status,omitnil,omitempty" name:"Status"`

	// 是否有root权限：0-否；1是，999为空: 仅linux
	IsRoot *uint64 `json:"IsRoot,omitnil,omitempty" name:"IsRoot"`

	// 登录方式：0-不可登录；1-只允许key登录；2只允许密码登录；3-允许key和密码，999为空，仅linux
	LoginType *uint64 `json:"LoginType,omitnil,omitempty" name:"LoginType"`

	// 上次登录时间
	LastLoginTime *string `json:"LastLoginTime,omitnil,omitempty" name:"LastLoginTime"`

	// 账号名称
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// 主机业务组ID
	ProjectId *uint64 `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// 账号类型：0访客用户，1标准用户，2管理员用户 ,999为空,仅Windows
	UserType *uint64 `json:"UserType,omitnil,omitempty" name:"UserType"`

	// 是否域账号：0否， 1是，2否, 999为空  仅Windows
	IsDomain *uint64 `json:"IsDomain,omitnil,omitempty" name:"IsDomain"`

	// 是否有sudo权限，1是，0否, 999为空, 仅linux
	IsSudo *uint64 `json:"IsSudo,omitnil,omitempty" name:"IsSudo"`

	// 是否允许ssh登录，1是，0否, 999为空, 仅linux
	IsSshLogin *uint64 `json:"IsSshLogin,omitnil,omitempty" name:"IsSshLogin"`

	// Home目录
	HomePath *string `json:"HomePath,omitnil,omitempty" name:"HomePath"`

	// Shell路径  仅linux
	Shell *string `json:"Shell,omitnil,omitempty" name:"Shell"`

	// 是否shell登录性，0不是；1是 仅linux
	ShellLoginStatus *uint64 `json:"ShellLoginStatus,omitnil,omitempty" name:"ShellLoginStatus"`

	// 密码修改时间
	PasswordChangeTime *string `json:"PasswordChangeTime,omitnil,omitempty" name:"PasswordChangeTime"`

	// 密码过期时间  仅linux
	PasswordDueTime *string `json:"PasswordDueTime,omitnil,omitempty" name:"PasswordDueTime"`

	// 密码锁定时间：单位天, -1为永不锁定 999为空，仅linux
	PasswordLockDays *int64 `json:"PasswordLockDays,omitnil,omitempty" name:"PasswordLockDays"`

	// 密码状态：1正常 2即将过期 3已过期 4已锁定 999为空 仅linux
	PasswordStatus *int64 `json:"PasswordStatus,omitnil,omitempty" name:"PasswordStatus"`

	// 更新时间
	// 注意：此字段可能返回 null，表示取不到有效值。
	UpdateTime *string `json:"UpdateTime,omitnil,omitempty" name:"UpdateTime"`

	// 首次采集时间
	FirstTime *string `json:"FirstTime,omitnil,omitempty" name:"FirstTime"`

	// 是否新增[0:否|1:是]
	IsNew *int64 `json:"IsNew,omitnil,omitempty" name:"IsNew"`

	// 
	//  附加信息
	// 注意：此字段可能返回 null，表示取不到有效值。
	MachineExtraInfo *MachineExtraInfo `json:"MachineExtraInfo,omitnil,omitempty" name:"MachineExtraInfo"`
}

type AssetUserDetail struct {
	// 主机内网IP
	MachineIp *string `json:"MachineIp,omitnil,omitempty" name:"MachineIp"`

	// 主机名称
	MachineName *string `json:"MachineName,omitnil,omitempty" name:"MachineName"`

	// 主机Uuid
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 主机Quuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 账号UID
	Uid *string `json:"Uid,omitnil,omitempty" name:"Uid"`

	// 账号GID
	Gid *string `json:"Gid,omitnil,omitempty" name:"Gid"`

	// 账号状态：0-禁用；1-启用
	Status *uint64 `json:"Status,omitnil,omitempty" name:"Status"`

	// 是否有root权限：0-否；1是，999为空: 仅linux
	IsRoot *uint64 `json:"IsRoot,omitnil,omitempty" name:"IsRoot"`

	// 上次登录时间
	LastLoginTime *string `json:"LastLoginTime,omitnil,omitempty" name:"LastLoginTime"`

	// 账号名称
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// 账号类型：0访客用户，1标准用户，2管理员用户 ,999为空,仅Windows
	UserType *uint64 `json:"UserType,omitnil,omitempty" name:"UserType"`

	// 是否域账号：0否， 1是, 999为空  仅Windows
	IsDomain *uint64 `json:"IsDomain,omitnil,omitempty" name:"IsDomain"`

	// 是否允许ssh登录，1是，0否, 999为空, 仅linux
	IsSshLogin *uint64 `json:"IsSshLogin,omitnil,omitempty" name:"IsSshLogin"`

	// Home目录
	HomePath *string `json:"HomePath,omitnil,omitempty" name:"HomePath"`

	// Shell路径  仅linux
	Shell *string `json:"Shell,omitnil,omitempty" name:"Shell"`

	// 是否shell登录性，0不是；1是 仅linux
	ShellLoginStatus *uint64 `json:"ShellLoginStatus,omitnil,omitempty" name:"ShellLoginStatus"`

	// 密码修改时间
	PasswordChangeTime *string `json:"PasswordChangeTime,omitnil,omitempty" name:"PasswordChangeTime"`

	// 密码过期时间  仅linux
	PasswordDueTime *string `json:"PasswordDueTime,omitnil,omitempty" name:"PasswordDueTime"`

	// 密码锁定时间：单位天, -1为永不锁定 999为空，仅linux
	PasswordLockDays *int64 `json:"PasswordLockDays,omitnil,omitempty" name:"PasswordLockDays"`

	// 备注
	Remark *string `json:"Remark,omitnil,omitempty" name:"Remark"`

	// 用户组名
	GroupName *string `json:"GroupName,omitnil,omitempty" name:"GroupName"`

	// 账号到期时间
	DisableTime *string `json:"DisableTime,omitnil,omitempty" name:"DisableTime"`

	// 最近登录终端
	LastLoginTerminal *string `json:"LastLoginTerminal,omitnil,omitempty" name:"LastLoginTerminal"`

	// 最近登录位置
	LastLoginLoc *string `json:"LastLoginLoc,omitnil,omitempty" name:"LastLoginLoc"`

	// 最近登录IP
	LastLoginIp *string `json:"LastLoginIp,omitnil,omitempty" name:"LastLoginIp"`

	// 密码过期提醒：单位天
	PasswordWarnDays *uint64 `json:"PasswordWarnDays,omitnil,omitempty" name:"PasswordWarnDays"`

	// 密码修改设置：0-不可修改，1-可修改
	PasswordChangeType *uint64 `json:"PasswordChangeType,omitnil,omitempty" name:"PasswordChangeType"`

	// 用户公钥列表
	// 注意：此字段可能返回 null，表示取不到有效值。
	Keys []*AssetUserKeyInfo `json:"Keys,omitnil,omitempty" name:"Keys"`

	// 数据更新时间
	// 注意：此字段可能返回 null，表示取不到有效值。
	UpdateTime *string `json:"UpdateTime,omitnil,omitempty" name:"UpdateTime"`
}

type AssetUserKeyInfo struct {
	// 公钥值
	Value *string `json:"Value,omitnil,omitempty" name:"Value"`

	// 公钥备注
	Comment *string `json:"Comment,omitnil,omitempty" name:"Comment"`

	// 加密方式
	EncryptType *string `json:"EncryptType,omitnil,omitempty" name:"EncryptType"`
}

type AssetWebAppBaseInfo struct {
	// 主机内网IP
	MachineIp *string `json:"MachineIp,omitnil,omitempty" name:"MachineIp"`

	// 主机外网IP
	MachineWanIp *string `json:"MachineWanIp,omitnil,omitempty" name:"MachineWanIp"`

	// 主机Quuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 主机Uuid
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 操作系统信息
	OsInfo *string `json:"OsInfo,omitnil,omitempty" name:"OsInfo"`

	// 主机业务组ID
	ProjectId *uint64 `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// 主机标签
	// 注意：此字段可能返回 null，表示取不到有效值。
	Tag []*MachineTag `json:"Tag,omitnil,omitempty" name:"Tag"`

	// 应用名
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// 版本
	Version *string `json:"Version,omitnil,omitempty" name:"Version"`

	// 根路径
	RootPath *string `json:"RootPath,omitnil,omitempty" name:"RootPath"`

	// 服务类型
	ServiceType *string `json:"ServiceType,omitnil,omitempty" name:"ServiceType"`

	// 站点域名
	Domain *string `json:"Domain,omitnil,omitempty" name:"Domain"`

	// 虚拟路径
	VirtualPath *string `json:"VirtualPath,omitnil,omitempty" name:"VirtualPath"`

	// 插件数
	PluginCount *uint64 `json:"PluginCount,omitnil,omitempty" name:"PluginCount"`

	// 应用ID
	Id *string `json:"Id,omitnil,omitempty" name:"Id"`

	// 应用描述
	Desc *string `json:"Desc,omitnil,omitempty" name:"Desc"`

	// 主机名称
	MachineName *string `json:"MachineName,omitnil,omitempty" name:"MachineName"`

	// 数据更新时间
	// 注意：此字段可能返回 null，表示取不到有效值。
	UpdateTime *string `json:"UpdateTime,omitnil,omitempty" name:"UpdateTime"`

	// 首次采集时间
	FirstTime *string `json:"FirstTime,omitnil,omitempty" name:"FirstTime"`

	// 是否新增[0:否|1:是]
	IsNew *int64 `json:"IsNew,omitnil,omitempty" name:"IsNew"`

	//  附加信息
	// 注意：此字段可能返回 null，表示取不到有效值。
	MachineExtraInfo *MachineExtraInfo `json:"MachineExtraInfo,omitnil,omitempty" name:"MachineExtraInfo"`
}

type AssetWebAppPluginInfo struct {
	// 名称
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// 描述
	Desc *string `json:"Desc,omitnil,omitempty" name:"Desc"`

	// 版本
	Version *string `json:"Version,omitnil,omitempty" name:"Version"`

	// 链接
	Link *string `json:"Link,omitnil,omitempty" name:"Link"`
}

type AssetWebFrameBaseInfo struct {
	// 主机内网IP
	MachineIp *string `json:"MachineIp,omitnil,omitempty" name:"MachineIp"`

	// 主机外网IP
	MachineWanIp *string `json:"MachineWanIp,omitnil,omitempty" name:"MachineWanIp"`

	// 主机Quuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 主机Uuid
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 操作系统信息
	OsInfo *string `json:"OsInfo,omitnil,omitempty" name:"OsInfo"`

	// 主机业务组ID
	ProjectId *uint64 `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// 主机标签
	// 注意：此字段可能返回 null，表示取不到有效值。
	Tag []*MachineTag `json:"Tag,omitnil,omitempty" name:"Tag"`

	// Web应用名
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// 版本
	Version *string `json:"Version,omitnil,omitempty" name:"Version"`

	// 语言
	Lang *string `json:"Lang,omitnil,omitempty" name:"Lang"`

	// 服务类型
	ServiceType *string `json:"ServiceType,omitnil,omitempty" name:"ServiceType"`

	// 主机名称
	MachineName *string `json:"MachineName,omitnil,omitempty" name:"MachineName"`

	// 数据更新时间
	UpdateTime *string `json:"UpdateTime,omitnil,omitempty" name:"UpdateTime"`

	// 首次采集时间
	FirstTime *string `json:"FirstTime,omitnil,omitempty" name:"FirstTime"`

	// 是否新增[0:否|1:是]
	IsNew *int64 `json:"IsNew,omitnil,omitempty" name:"IsNew"`

	//  附加信息
	// 注意：此字段可能返回 null，表示取不到有效值。
	MachineExtraInfo *MachineExtraInfo `json:"MachineExtraInfo,omitnil,omitempty" name:"MachineExtraInfo"`

	// 应用路径
	Path *string `json:"Path,omitnil,omitempty" name:"Path"`
}

type AssetWebLocationBaseInfo struct {
	// 主机Uuid
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 主机Quuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 内网IP
	MachineIp *string `json:"MachineIp,omitnil,omitempty" name:"MachineIp"`

	// 外网IP
	MachineWanIp *string `json:"MachineWanIp,omitnil,omitempty" name:"MachineWanIp"`

	// 主机名称
	MachineName *string `json:"MachineName,omitnil,omitempty" name:"MachineName"`

	// 操作系统
	OsInfo *string `json:"OsInfo,omitnil,omitempty" name:"OsInfo"`

	// 域名
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// 站点端口
	Port *string `json:"Port,omitnil,omitempty" name:"Port"`

	// 站点协议
	Proto *string `json:"Proto,omitnil,omitempty" name:"Proto"`

	// 服务类型
	ServiceType *string `json:"ServiceType,omitnil,omitempty" name:"ServiceType"`

	// 站点路经数
	PathCount *uint64 `json:"PathCount,omitnil,omitempty" name:"PathCount"`

	// 运行用户
	User *string `json:"User,omitnil,omitempty" name:"User"`

	// 主目录
	MainPath *string `json:"MainPath,omitnil,omitempty" name:"MainPath"`

	// 主目录所有者
	MainPathOwner *string `json:"MainPathOwner,omitnil,omitempty" name:"MainPathOwner"`

	// 拥有者权限
	Permission *string `json:"Permission,omitnil,omitempty" name:"Permission"`

	// 主机业务组ID
	ProjectId *uint64 `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// 主机标签
	Tag []*MachineTag `json:"Tag,omitnil,omitempty" name:"Tag"`

	// Web站点Id
	Id *string `json:"Id,omitnil,omitempty" name:"Id"`

	// 数据更新时间
	// 注意：此字段可能返回 null，表示取不到有效值。
	UpdateTime *string `json:"UpdateTime,omitnil,omitempty" name:"UpdateTime"`

	// 首次采集时间
	FirstTime *string `json:"FirstTime,omitnil,omitempty" name:"FirstTime"`

	// 是否新增[0:否|1:是]
	// 注意：此字段可能返回 null，表示取不到有效值。
	IsNew *int64 `json:"IsNew,omitnil,omitempty" name:"IsNew"`

	//  附加信息
	// 注意：此字段可能返回 null，表示取不到有效值。
	MachineExtraInfo *MachineExtraInfo `json:"MachineExtraInfo,omitnil,omitempty" name:"MachineExtraInfo"`
}

type AssetWebLocationInfo struct {
	// 域名
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// 站点端口
	Port *string `json:"Port,omitnil,omitempty" name:"Port"`

	// 站点协议
	Proto *string `json:"Proto,omitnil,omitempty" name:"Proto"`

	// 服务类型
	ServiceType *string `json:"ServiceType,omitnil,omitempty" name:"ServiceType"`

	// 安全模块状态：0未启用，1启用，999空，仅nginx
	SafeStatus *uint64 `json:"SafeStatus,omitnil,omitempty" name:"SafeStatus"`

	// 运行用户
	User *string `json:"User,omitnil,omitempty" name:"User"`

	// 主目录
	MainPath *string `json:"MainPath,omitnil,omitempty" name:"MainPath"`

	// 启动命令
	Command *string `json:"Command,omitnil,omitempty" name:"Command"`

	// 绑定IP
	Ip *string `json:"Ip,omitnil,omitempty" name:"Ip"`

	// 数据更新时间
	// 注意：此字段可能返回 null，表示取不到有效值。
	UpdateTime *string `json:"UpdateTime,omitnil,omitempty" name:"UpdateTime"`
}

type AssetWebLocationPath struct {
	// 虚拟路径
	VirtualPath *string `json:"VirtualPath,omitnil,omitempty" name:"VirtualPath"`

	// 物理路径
	RealPath *string `json:"RealPath,omitnil,omitempty" name:"RealPath"`

	// 文件所有者
	User *string `json:"User,omitnil,omitempty" name:"User"`

	// 文件所属组
	Group *string `json:"Group,omitnil,omitempty" name:"Group"`

	// 文件权限
	Permission *string `json:"Permission,omitnil,omitempty" name:"Permission"`
}

type AssetWebServiceBaseInfo struct {
	// 主机内网IP
	MachineIp *string `json:"MachineIp,omitnil,omitempty" name:"MachineIp"`

	// 主机外网IP
	MachineWanIp *string `json:"MachineWanIp,omitnil,omitempty" name:"MachineWanIp"`

	// 主机Quuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 主机Uuid
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 操作系统信息
	OsInfo *string `json:"OsInfo,omitnil,omitempty" name:"OsInfo"`

	// 主机业务组ID
	ProjectId *uint64 `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// 主机标签
	// 注意：此字段可能返回 null，表示取不到有效值。
	Tag []*MachineTag `json:"Tag,omitnil,omitempty" name:"Tag"`

	// 服务名
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// 版本
	Version *string `json:"Version,omitnil,omitempty" name:"Version"`

	// 二进制路径
	BinPath *string `json:"BinPath,omitnil,omitempty" name:"BinPath"`

	// 启动用户
	User *string `json:"User,omitnil,omitempty" name:"User"`

	// 安装路径
	InstallPath *string `json:"InstallPath,omitnil,omitempty" name:"InstallPath"`

	// 配置路径
	ConfigPath *string `json:"ConfigPath,omitnil,omitempty" name:"ConfigPath"`

	// 关联进程数
	ProcessCount *uint64 `json:"ProcessCount,omitnil,omitempty" name:"ProcessCount"`

	// Web服务ID
	Id *string `json:"Id,omitnil,omitempty" name:"Id"`

	// 主机名称
	MachineName *string `json:"MachineName,omitnil,omitempty" name:"MachineName"`

	// 描述
	Desc *string `json:"Desc,omitnil,omitempty" name:"Desc"`

	// 数据更新时间
	// 注意：此字段可能返回 null，表示取不到有效值。
	UpdateTime *string `json:"UpdateTime,omitnil,omitempty" name:"UpdateTime"`

	// 首次采集时间
	FirstTime *string `json:"FirstTime,omitnil,omitempty" name:"FirstTime"`

	// 是否新增[0:否|1:是]
	IsNew *int64 `json:"IsNew,omitnil,omitempty" name:"IsNew"`

	//  附加信息
	// 注意：此字段可能返回 null，表示取不到有效值。
	MachineExtraInfo *MachineExtraInfo `json:"MachineExtraInfo,omitnil,omitempty" name:"MachineExtraInfo"`
}

type AttackSource struct {
	// 攻击溯源节点描述
	// 注意：此字段可能返回 null，表示取不到有效值。
	Nodes []*AttackSourceNode `json:"Nodes,omitnil,omitempty" name:"Nodes"`

	// 攻击溯源节点路径
	// 注意：此字段可能返回 null，表示取不到有效值。
	Edges []*AttackSourceEdge `json:"Edges,omitnil,omitempty" name:"Edges"`

	// 请求节点相关事件详情的参数
	// 注意：此字段可能返回 null，表示取不到有效值。
	EventInfoParam *string `json:"EventInfoParam,omitnil,omitempty" name:"EventInfoParam"`
}

type AttackSourceEdge struct {
	// 出发节点
	From *string `json:"From,omitnil,omitempty" name:"From"`

	// 目标节点
	To *string `json:"To,omitnil,omitempty" name:"To"`
}

type AttackSourceEvent struct {
	// 事件类型：0：文件查杀，1：异常登录， 2：密码破解，3：恶意请求，4：高危命令
	EventType *uint64 `json:"EventType,omitnil,omitempty" name:"EventType"`

	// 【文件查杀】病毒名 VirusName、文件名 FileName、文件路径 FilePath、文件大小 FileSize、文件MD5 MD5、首次发现时间 CreateTime、最近检测时间LatestScanTime、危害描述 HarmDescribe、修复建议SuggestScheme
	// 【异常登录】来源IP SrcIp、来源地 Location、登录用户名 UserName、登录时间 LoginTime
	// 【密码破解】来源IP SrcIp、来源地 City,Country 、协议 Protocol、登录用户名UserName 、端口 Port、尝试次数 Count、首次攻击时间 CreateTime、最近攻击时间 ModifyTime
	// 【恶意请求】恶意请求域名 Url、进程ProcessName 、MD5 ProcessMd5、PID Pid、请求次数 AccessCount、最近请求时间 MergeTime、危害描述 HarmDescribe、修复建议SuggestScheme
	// 【高危命令】命中规则名 RuleName、规则类别 RuleCategory、命令内容 BashCmd、数据来源 DetectBy、登录用户 User、PID Pid、发生时间 CreateTime 、危害描述 HarmDescribe、修复建议SuggestScheme
	Content *string `json:"Content,omitnil,omitempty" name:"Content"`

	// 入侵时间
	CreatedTime *string `json:"CreatedTime,omitnil,omitempty" name:"CreatedTime"`

	// 等级 事件统一等级 0：提示，1：低危,  2：中危,  3：高危,  4：严重
	Level *uint64 `json:"Level,omitnil,omitempty" name:"Level"`

	// 等级中文展示字符串
	LevelZh *string `json:"LevelZh,omitnil,omitempty" name:"LevelZh"`

	// 事件id
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`

	// 主机uuid
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`
}

type AttackSourceNode struct {
	// 事件ID，为空的时候表示没有对应事件
	EventId *uint64 `json:"EventId,omitnil,omitempty" name:"EventId"`

	// BRUTEFORCE:密码破解、MALWARE:木马、BASH:高危命令、RISK_DNS:恶意请求、LOGIN:异地登录、HOST:主机节点, TIME_ORDER：通用节点
	EventType *string `json:"EventType,omitnil,omitempty" name:"EventType"`

	// 节点ip 当节点为HOST时
	Ip *string `json:"Ip,omitnil,omitempty" name:"Ip"`

	// 等级  0：提示，1：低危,  2：中危,  3：高危,  4：严重
	Level *uint64 `json:"Level,omitnil,omitempty" name:"Level"`

	// 节点ID
	NodeId *string `json:"NodeId,omitnil,omitempty" name:"NodeId"`

	// 开始时间
	StartTime *string `json:"StartTime,omitnil,omitempty" name:"StartTime"`

	// 结束时间
	EndTime *string `json:"EndTime,omitnil,omitempty" name:"EndTime"`

	// 通用节点的描述
	NodeDesc *string `json:"NodeDesc,omitnil,omitempty" name:"NodeDesc"`

	// 时间线编号，同一个编号的节点属于同一个时间线
	TimeLineNum *uint64 `json:"TimeLineNum,omitnil,omitempty" name:"TimeLineNum"`

	// 节点详情
	NodeDetail *string `json:"NodeDetail,omitnil,omitempty" name:"NodeDetail"`
}

type BanWhiteList struct {
	// 白名单ID。
	Id *string `json:"Id,omitnil,omitempty" name:"Id"`

	// 白名单别名。
	Remark *string `json:"Remark,omitnil,omitempty" name:"Remark"`

	// 阻断来源IP。
	SrcIp *string `json:"SrcIp,omitnil,omitempty" name:"SrcIp"`

	// 修改白名单时间。
	ModifyTime *string `json:"ModifyTime,omitnil,omitempty" name:"ModifyTime"`

	// 创建白名单时间。
	CreateTime *string `json:"CreateTime,omitnil,omitempty" name:"CreateTime"`

	// 白名单所属机器。
	// 注意：此字段可能返回 null，表示取不到有效值。
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 白名单是否全局
	// 注意：此字段可能返回 null，表示取不到有效值。
	IsGlobal *bool `json:"IsGlobal,omitnil,omitempty" name:"IsGlobal"`

	// 白名单所属机器列表
	// 注意：此字段可能返回 null，表示取不到有效值。
	Quuids []*string `json:"Quuids,omitnil,omitempty" name:"Quuids"`
}

type BanWhiteListDetail struct {
	// 白名单ID
	Id *string `json:"Id,omitnil,omitempty" name:"Id"`

	// 白名单别名
	Remark *string `json:"Remark,omitnil,omitempty" name:"Remark"`

	// 阻断来源IP
	SrcIp *string `json:"SrcIp,omitnil,omitempty" name:"SrcIp"`

	// 修改白名单时间
	ModifyTime *string `json:"ModifyTime,omitnil,omitempty" name:"ModifyTime"`

	// 创建白名单时间
	CreateTime *string `json:"CreateTime,omitnil,omitempty" name:"CreateTime"`

	// 白名单是否全局
	IsGlobal *bool `json:"IsGlobal,omitnil,omitempty" name:"IsGlobal"`

	// 机器的UUID
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 主机安全程序的UUID
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 机器IP
	MachineIp *string `json:"MachineIp,omitnil,omitempty" name:"MachineIp"`

	// 机器名称
	MachineName *string `json:"MachineName,omitnil,omitempty" name:"MachineName"`
}

type BaselineBasicInfo struct {
	// 基线名称
	// 注意：此字段可能返回 null，表示取不到有效值。
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// 基线id
	// 注意：此字段可能返回 null，表示取不到有效值。
	BaselineId *uint64 `json:"BaselineId,omitnil,omitempty" name:"BaselineId"`

	// 父级id
	// 注意：此字段可能返回 null，表示取不到有效值。
	ParentId *uint64 `json:"ParentId,omitnil,omitempty" name:"ParentId"`
}

type BaselineCategory struct {
	// 分类Id
	CategoryId *int64 `json:"CategoryId,omitnil,omitempty" name:"CategoryId"`

	// 分类名称
	CategoryName *string `json:"CategoryName,omitnil,omitempty" name:"CategoryName"`

	// 父分类ID,如果为0则没有父分类
	ParentCategoryId *int64 `json:"ParentCategoryId,omitnil,omitempty" name:"ParentCategoryId"`

	// 子分类下检测项总数
	ItemCount *uint64 `json:"ItemCount,omitnil,omitempty" name:"ItemCount"`
}

type BaselineCustomRuleIdName struct {
	// 自定义规则ID　
	RuleId *int64 `json:"RuleId,omitnil,omitempty" name:"RuleId"`

	// 自定义规则名字
	RuleName *string `json:"RuleName,omitnil,omitempty" name:"RuleName"`
}

type BaselineDetail struct {
	// 基线描述
	// 注意：此字段可能返回 null，表示取不到有效值。
	Description *string `json:"Description,omitnil,omitempty" name:"Description"`

	// 危害等级
	// 注意：此字段可能返回 null，表示取不到有效值。
	Level *uint64 `json:"Level,omitnil,omitempty" name:"Level"`

	// package名
	// 注意：此字段可能返回 null，表示取不到有效值。
	PackageName *string `json:"PackageName,omitnil,omitempty" name:"PackageName"`

	// 父级id
	// 注意：此字段可能返回 null，表示取不到有效值。
	ParentId *uint64 `json:"ParentId,omitnil,omitempty" name:"ParentId"`

	// 基线名
	// 注意：此字段可能返回 null，表示取不到有效值。
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`
}

type BaselineDetectParam struct {
	// 检测的策略集合
	PolicyIds []*int64 `json:"PolicyIds,omitnil,omitempty" name:"PolicyIds"`

	// 检测的规则集合
	RuleIds []*int64 `json:"RuleIds,omitnil,omitempty" name:"RuleIds"`

	// 检测项集合
	ItemIds []*int64 `json:"ItemIds,omitnil,omitempty" name:"ItemIds"`

	// 检测的主机ID集合
	HostIds []*string `json:"HostIds,omitnil,omitempty" name:"HostIds"`
}

type BaselineDownload struct {
	// 任务Id
	TaskId *int64 `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// 任务名称
	TaskName *string `json:"TaskName,omitnil,omitempty" name:"TaskName"`

	// 状态0:未完成 1:完成
	Status *int64 `json:"Status,omitnil,omitempty" name:"Status"`

	// 开始时间
	StartTime *string `json:"StartTime,omitnil,omitempty" name:"StartTime"`

	// 完成时间
	EndTime *string `json:"EndTime,omitnil,omitempty" name:"EndTime"`

	// 下载地址
	DownloadUrl *string `json:"DownloadUrl,omitnil,omitempty" name:"DownloadUrl"`
}

type BaselineEffectHost struct {
	// 通过项
	// 注意：此字段可能返回 null，表示取不到有效值。
	PassCount *uint64 `json:"PassCount,omitnil,omitempty" name:"PassCount"`

	// 风险项
	// 注意：此字段可能返回 null，表示取不到有效值。
	FailCount *uint64 `json:"FailCount,omitnil,omitempty" name:"FailCount"`

	// 首次检测事件
	// 注意：此字段可能返回 null，表示取不到有效值。
	FirstScanTime *string `json:"FirstScanTime,omitnil,omitempty" name:"FirstScanTime"`

	// 最后检测时间
	// 注意：此字段可能返回 null，表示取不到有效值。
	LastScanTime *string `json:"LastScanTime,omitnil,omitempty" name:"LastScanTime"`

	// 风险项处理状态状态：0-未通过，1-通过
	// 注意：此字段可能返回 null，表示取不到有效值。
	Status *uint64 `json:"Status,omitnil,omitempty" name:"Status"`

	// 主机Quuid
	// 注意：此字段可能返回 null，表示取不到有效值。
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 主机IP
	// 注意：此字段可能返回 null，表示取不到有效值。
	HostIp *string `json:"HostIp,omitnil,omitempty" name:"HostIp"`

	// 主机别名
	// 注意：此字段可能返回 null，表示取不到有效值。
	AliasName *string `json:"AliasName,omitnil,omitempty" name:"AliasName"`

	// 主机Uuid
	// 注意：此字段可能返回 null，表示取不到有效值。
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 检测中状态
	// 注意：此字段可能返回 null，表示取不到有效值。
	MaxStatus *uint64 `json:"MaxStatus,omitnil,omitempty" name:"MaxStatus"`
}

type BaselineEventLevelInfo struct {
	// 危害等级：1-低危；2-中危；3-高危；4-严重
	EventLevel *uint64 `json:"EventLevel,omitnil,omitempty" name:"EventLevel"`

	// 漏洞数量
	EventCount *uint64 `json:"EventCount,omitnil,omitempty" name:"EventCount"`
}

type BaselineFix struct {
	// 修复项名称
	ItemName *string `json:"ItemName,omitnil,omitempty" name:"ItemName"`

	// 主机Ip
	HostIp *string `json:"HostIp,omitnil,omitempty" name:"HostIp"`

	// 首次检测时间
	CreateTime *string `json:"CreateTime,omitnil,omitempty" name:"CreateTime"`

	// 最后检测时间
	ModifyTime *string `json:"ModifyTime,omitnil,omitempty" name:"ModifyTime"`

	// 修复时间
	FixTime *string `json:"FixTime,omitnil,omitempty" name:"FixTime"`

	// 基线检测项结果ID
	Id *int64 `json:"Id,omitnil,omitempty" name:"Id"`

	// 主机额外信息
	// 注意：此字段可能返回 null，表示取不到有效值。
	MachineExtraInfo *MachineExtraInfo `json:"MachineExtraInfo,omitnil,omitempty" name:"MachineExtraInfo"`
}

type BaselineHost struct {
	// 主机Id
	HostId *string `json:"HostId,omitnil,omitempty" name:"HostId"`

	// 主机名称
	// 注意：此字段可能返回 null，表示取不到有效值。
	HostName *string `json:"HostName,omitnil,omitempty" name:"HostName"`

	// 主机标签
	// 注意：此字段可能返回 null，表示取不到有效值。
	HostTag *string `json:"HostTag,omitnil,omitempty" name:"HostTag"`

	// 内网Ip
	// 注意：此字段可能返回 null，表示取不到有效值。
	HostIp *string `json:"HostIp,omitnil,omitempty" name:"HostIp"`

	// 外网Ip
	// 注意：此字段可能返回 null，表示取不到有效值。
	WanIp *string `json:"WanIp,omitnil,omitempty" name:"WanIp"`

	// 主机额外信息
	// 注意：此字段可能返回 null，表示取不到有效值。
	MachineExtraInfo *MachineExtraInfo `json:"MachineExtraInfo,omitnil,omitempty" name:"MachineExtraInfo"`
}

type BaselineHostDetect struct {
	// 主机Id
	HostId *string `json:"HostId,omitnil,omitempty" name:"HostId"`

	// 内网Ip
	HostIp *string `json:"HostIp,omitnil,omitempty" name:"HostIp"`

	// 主机名称
	HostName *string `json:"HostName,omitnil,omitempty" name:"HostName"`

	// 外网Ip
	WanIp *string `json:"WanIp,omitnil,omitempty" name:"WanIp"`

	// 0:未通过 1:忽略 3:通过 5:检测中
	DetectStatus *int64 `json:"DetectStatus,omitnil,omitempty" name:"DetectStatus"`

	// 检测通过数
	PassedItemCount *int64 `json:"PassedItemCount,omitnil,omitempty" name:"PassedItemCount"`

	// 关联检测项数
	ItemCount *int64 `json:"ItemCount,omitnil,omitempty" name:"ItemCount"`

	// 检测未通过数
	NotPassedItemCount *int64 `json:"NotPassedItemCount,omitnil,omitempty" name:"NotPassedItemCount"`

	// 首次检测时间
	FirstTime *string `json:"FirstTime,omitnil,omitempty" name:"FirstTime"`

	// 最后检测时间
	LastTime *string `json:"LastTime,omitnil,omitempty" name:"LastTime"`

	// 主机安全UUID
	// 注意：此字段可能返回 null，表示取不到有效值。
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 主机额外信息
	// 注意：此字段可能返回 null，表示取不到有效值。
	MachineExtraInfo *MachineExtraInfo `json:"MachineExtraInfo,omitnil,omitempty" name:"MachineExtraInfo"`
}

type BaselineHostTopList struct {
	// 事件等级与次数列表
	// 注意：此字段可能返回 null，表示取不到有效值。
	EventLevelList []*BaselineEventLevelInfo `json:"EventLevelList,omitnil,omitempty" name:"EventLevelList"`

	// 主机名称
	// 注意：此字段可能返回 null，表示取不到有效值。
	HostName *string `json:"HostName,omitnil,omitempty" name:"HostName"`

	// 主机Quuid
	// 注意：此字段可能返回 null，表示取不到有效值。
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 计算权重的分数
	// 注意：此字段可能返回 null，表示取不到有效值。
	Score *uint64 `json:"Score,omitnil,omitempty" name:"Score"`
}

type BaselineInfo struct {
	// 基线名
	// 注意：此字段可能返回 null，表示取不到有效值。
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// 危害等级：1-低危；2-中危；3-高危；4-严重
	// 注意：此字段可能返回 null，表示取不到有效值。
	Level *uint64 `json:"Level,omitnil,omitempty" name:"Level"`

	// 检测项数量
	// 注意：此字段可能返回 null，表示取不到有效值。
	RuleCount *uint64 `json:"RuleCount,omitnil,omitempty" name:"RuleCount"`

	// 影响服务器数量
	// 注意：此字段可能返回 null，表示取不到有效值。
	HostCount *uint64 `json:"HostCount,omitnil,omitempty" name:"HostCount"`

	// 通过状态:0:未通过,1:已通过
	// 注意：此字段可能返回 null，表示取不到有效值。
	Status *uint64 `json:"Status,omitnil,omitempty" name:"Status"`

	// 基线id
	// 注意：此字段可能返回 null，表示取不到有效值。
	CategoryId *uint64 `json:"CategoryId,omitnil,omitempty" name:"CategoryId"`

	// 最后检测时间
	// 注意：此字段可能返回 null，表示取不到有效值。
	LastScanTime *string `json:"LastScanTime,omitnil,omitempty" name:"LastScanTime"`

	// 检测中状态: 5
	// 注意：此字段可能返回 null，表示取不到有效值。
	MaxStatus *uint64 `json:"MaxStatus,omitnil,omitempty" name:"MaxStatus"`

	// 基线风险项
	// 注意：此字段可能返回 null，表示取不到有效值。
	BaselineFailCount *uint64 `json:"BaselineFailCount,omitnil,omitempty" name:"BaselineFailCount"`
}

type BaselineItem struct {
	// 项Id
	ItemId *int64 `json:"ItemId,omitnil,omitempty" name:"ItemId"`

	// 项名称
	ItemName *string `json:"ItemName,omitnil,omitempty" name:"ItemName"`

	// 检测项分类
	CategoryId *int64 `json:"CategoryId,omitnil,omitempty" name:"CategoryId"`

	// 项描述
	ItemDesc *string `json:"ItemDesc,omitnil,omitempty" name:"ItemDesc"`

	// 修复方法
	FixMethod *string `json:"FixMethod,omitnil,omitempty" name:"FixMethod"`

	// 所属规则
	RuleName *string `json:"RuleName,omitnil,omitempty" name:"RuleName"`

	// 检测结果描述
	// 注意：此字段可能返回 null，表示取不到有效值。
	DetectResultDesc *string `json:"DetectResultDesc,omitnil,omitempty" name:"DetectResultDesc"`

	// 危险等级
	// 注意：此字段可能返回 null，表示取不到有效值。
	Level *int64 `json:"Level,omitnil,omitempty" name:"Level"`

	// 检测状态：0 未通过，1：忽略，3：通过，5：检测中
	// 注意：此字段可能返回 null，表示取不到有效值。
	DetectStatus *int64 `json:"DetectStatus,omitnil,omitempty" name:"DetectStatus"`

	// 主机ID
	// 注意：此字段可能返回 null，表示取不到有效值。
	HostId *string `json:"HostId,omitnil,omitempty" name:"HostId"`

	// 主机名
	// 注意：此字段可能返回 null，表示取不到有效值。
	HostName *string `json:"HostName,omitnil,omitempty" name:"HostName"`

	// 主机IP
	// 注意：此字段可能返回 null，表示取不到有效值。
	HostIp *string `json:"HostIp,omitnil,omitempty" name:"HostIp"`

	// 外网IP
	// 注意：此字段可能返回 null，表示取不到有效值。
	WanIp *string `json:"WanIp,omitnil,omitempty" name:"WanIp"`

	// 第一次出现时间
	// 注意：此字段可能返回 null，表示取不到有效值。
	FirstTime *string `json:"FirstTime,omitnil,omitempty" name:"FirstTime"`

	// 最近出现时间
	// 注意：此字段可能返回 null，表示取不到有效值。
	LastTime *string `json:"LastTime,omitnil,omitempty" name:"LastTime"`

	// 是否可以修复
	// 注意：此字段可能返回 null，表示取不到有效值。
	CanBeFixed *int64 `json:"CanBeFixed,omitnil,omitempty" name:"CanBeFixed"`

	// 主机安全uuid
	// 注意：此字段可能返回 null，表示取不到有效值。
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 主机额外信息
	// 注意：此字段可能返回 null，表示取不到有效值。
	MachineExtraInfo *MachineExtraInfo `json:"MachineExtraInfo,omitnil,omitempty" name:"MachineExtraInfo"`
}

type BaselineItemDetect struct {
	// 项Id
	// 注意：此字段可能返回 null，表示取不到有效值。
	ItemId *int64 `json:"ItemId,omitnil,omitempty" name:"ItemId"`

	// 项名称
	// 注意：此字段可能返回 null，表示取不到有效值。
	ItemName *string `json:"ItemName,omitnil,omitempty" name:"ItemName"`

	// 项描述
	// 注意：此字段可能返回 null，表示取不到有效值。
	ItemDesc *string `json:"ItemDesc,omitnil,omitempty" name:"ItemDesc"`

	// 修复方法
	// 注意：此字段可能返回 null，表示取不到有效值。
	FixMethod *string `json:"FixMethod,omitnil,omitempty" name:"FixMethod"`

	// 所属规则
	// 注意：此字段可能返回 null，表示取不到有效值。
	RuleName *string `json:"RuleName,omitnil,omitempty" name:"RuleName"`

	// 0:未通过 1:忽略 3:通过 5:检测中
	// 注意：此字段可能返回 null，表示取不到有效值。
	DetectStatus *int64 `json:"DetectStatus,omitnil,omitempty" name:"DetectStatus"`

	// 风险等级
	// 注意：此字段可能返回 null，表示取不到有效值。
	Level *int64 `json:"Level,omitnil,omitempty" name:"Level"`

	// 影响服务器数
	// 注意：此字段可能返回 null，表示取不到有效值。
	HostCount *int64 `json:"HostCount,omitnil,omitempty" name:"HostCount"`

	// 首次检测时间
	// 注意：此字段可能返回 null，表示取不到有效值。
	FirstTime *string `json:"FirstTime,omitnil,omitempty" name:"FirstTime"`

	// 最后检测时间
	// 注意：此字段可能返回 null，表示取不到有效值。
	LastTime *string `json:"LastTime,omitnil,omitempty" name:"LastTime"`

	// 检测结果,Json字符串
	// 注意：此字段可能返回 null，表示取不到有效值。
	DetectResult *string `json:"DetectResult,omitnil,omitempty" name:"DetectResult"`

	// 所属规则ID
	// 注意：此字段可能返回 null，表示取不到有效值。
	RuleId *int64 `json:"RuleId,omitnil,omitempty" name:"RuleId"`

	// 通过的服务器数
	// 注意：此字段可能返回 null，表示取不到有效值。
	PassedHostCount *int64 `json:"PassedHostCount,omitnil,omitempty" name:"PassedHostCount"`

	// 未通过的服务器数
	// 注意：此字段可能返回 null，表示取不到有效值。
	NotPassedHostCount *int64 `json:"NotPassedHostCount,omitnil,omitempty" name:"NotPassedHostCount"`
}

type BaselineItemInfo struct {
	// 基线检测项ID
	ItemId *int64 `json:"ItemId,omitnil,omitempty" name:"ItemId"`

	// 检测项名字
	ItemName *string `json:"ItemName,omitnil,omitempty" name:"ItemName"`

	// 检测项所属规则的ID
	// 注意：此字段可能返回 null，表示取不到有效值。
	RuleId *uint64 `json:"RuleId,omitnil,omitempty" name:"RuleId"`

	// 检测项描述
	ItemDesc *string `json:"ItemDesc,omitnil,omitempty" name:"ItemDesc"`

	// 检测项的修复方法
	FixMethod *string `json:"FixMethod,omitnil,omitempty" name:"FixMethod"`

	// 检测项所属规则名字
	RuleName *string `json:"RuleName,omitnil,omitempty" name:"RuleName"`

	// 危险等级
	Level *int64 `json:"Level,omitnil,omitempty" name:"Level"`

	// 系统规则ID
	// 注意：此字段可能返回 null，表示取不到有效值。
	SysRuleId *int64 `json:"SysRuleId,omitnil,omitempty" name:"SysRuleId"`

	// 被引自定义规则信息
	// 注意：此字段可能返回 null，表示取不到有效值。
	RelatedCustomRuleInfo []*BaselineCustomRuleIdName `json:"RelatedCustomRuleInfo,omitnil,omitempty" name:"RelatedCustomRuleInfo"`
}

type BaselineItemsCategory struct {
	// 基线检测项父分类id
	ParentCategoryId *int64 `json:"ParentCategoryId,omitnil,omitempty" name:"ParentCategoryId"`

	// 基线检测项父分类名称
	ParentCategoryName *string `json:"ParentCategoryName,omitnil,omitempty" name:"ParentCategoryName"`

	// 基线检测项子分类数目
	CategoryCount *int64 `json:"CategoryCount,omitnil,omitempty" name:"CategoryCount"`

	// 基线检测项子分类列表
	CategoryLists []*BaselineCategory `json:"CategoryLists,omitnil,omitempty" name:"CategoryLists"`
}

type BaselinePolicy struct {
	// 策略名称,长度不超过128英文字符
	PolicyName *string `json:"PolicyName,omitnil,omitempty" name:"PolicyName"`

	// 检测间隔[1:1天|3:3天|5:5天|7:7天]
	DetectInterval *int64 `json:"DetectInterval,omitnil,omitempty" name:"DetectInterval"`

	// 检测时间
	DetectTime *string `json:"DetectTime,omitnil,omitempty" name:"DetectTime"`

	// 是否开启[0:未开启|1:开启]
	IsEnabled *int64 `json:"IsEnabled,omitnil,omitempty" name:"IsEnabled"`

	// 资产类型[0:所有专业版旗舰版|1:id|2:ip]
	AssetType *int64 `json:"AssetType,omitnil,omitempty" name:"AssetType"`

	// 策略Id
	PolicyId *int64 `json:"PolicyId,omitnil,omitempty" name:"PolicyId"`

	// 关联基线项数目
	RuleCount *int64 `json:"RuleCount,omitnil,omitempty" name:"RuleCount"`

	// 关联基线项数目
	ItemCount *int64 `json:"ItemCount,omitnil,omitempty" name:"ItemCount"`

	// 关联基线主机数目
	HostCount *int64 `json:"HostCount,omitnil,omitempty" name:"HostCount"`

	// 规则Id
	RuleIds []*int64 `json:"RuleIds,omitnil,omitempty" name:"RuleIds"`

	// 主机Id
	HostIds []*string `json:"HostIds,omitnil,omitempty" name:"HostIds"`

	// 主机Ip
	HostIps []*string `json:"HostIps,omitnil,omitempty" name:"HostIps"`

	// 是否是系统默认
	IsDefault *int64 `json:"IsDefault,omitnil,omitempty" name:"IsDefault"`
}

type BaselinePolicyDetect struct {
	// 策略Id
	PolicyId *int64 `json:"PolicyId,omitnil,omitempty" name:"PolicyId"`

	// 检测任务Id
	TaskId *int64 `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// 关联主机数
	HostCount *int64 `json:"HostCount,omitnil,omitempty" name:"HostCount"`

	// 开始时间
	StartTime *string `json:"StartTime,omitnil,omitempty" name:"StartTime"`

	// 结束时间
	FinishTime *string `json:"FinishTime,omitnil,omitempty" name:"FinishTime"`

	// 策略名称
	PolicyName *string `json:"PolicyName,omitnil,omitempty" name:"PolicyName"`

	// 成功主机数
	SuccessCount *int64 `json:"SuccessCount,omitnil,omitempty" name:"SuccessCount"`

	// 失败主技数
	FailedCount *int64 `json:"FailedCount,omitnil,omitempty" name:"FailedCount"`

	// 失败主机数
	TimeoutCount *int64 `json:"TimeoutCount,omitnil,omitempty" name:"TimeoutCount"`

	// 1:检测中 2:检测完成
	// 注意：此字段可能返回 null，表示取不到有效值。
	PolicyDetectStatus *int64 `json:"PolicyDetectStatus,omitnil,omitempty" name:"PolicyDetectStatus"`
}

type BaselineRiskItem struct {
	// 检测项Id
	// 注意：此字段可能返回 null，表示取不到有效值。
	ItemId *int64 `json:"ItemId,omitnil,omitempty" name:"ItemId"`

	// 检测项名字
	ItemName *string `json:"ItemName,omitnil,omitempty" name:"ItemName"`

	// 风险等级
	Level *int64 `json:"Level,omitnil,omitempty" name:"Level"`

	// 影响服务器数
	HostCount *int64 `json:"HostCount,omitnil,omitempty" name:"HostCount"`
}

type BaselineRule struct {
	// 规则名称,长度不超过128英文字符
	RuleName *string `json:"RuleName,omitnil,omitempty" name:"RuleName"`

	// 规则Id
	RuleId *int64 `json:"RuleId,omitnil,omitempty" name:"RuleId"`

	// 规则类型 [0:系统|1:自定义]
	RuleType *int64 `json:"RuleType,omitnil,omitempty" name:"RuleType"`

	// 规则分类
	CategoryId *int64 `json:"CategoryId,omitnil,omitempty" name:"CategoryId"`

	// 规则描述
	RuleDesc *string `json:"RuleDesc,omitnil,omitempty" name:"RuleDesc"`

	// 主机数
	HostCount *int64 `json:"HostCount,omitnil,omitempty" name:"HostCount"`

	// 适配项ID列表
	Items []*Item `json:"Items,omitnil,omitempty" name:"Items"`

	// [0:所有专业版旗舰版|1:hostID|2:ip]
	// 注意：此字段可能返回 null，表示取不到有效值。
	AssetType *int64 `json:"AssetType,omitnil,omitempty" name:"AssetType"`

	// 主机Id集合
	// 注意：此字段可能返回 null，表示取不到有效值。
	HostIds []*string `json:"HostIds,omitnil,omitempty" name:"HostIds"`

	// 主机IP
	// 注意：此字段可能返回 null，表示取不到有效值。
	HostIps []*string `json:"HostIps,omitnil,omitempty" name:"HostIps"`
}

type BaselineRuleDetect struct {
	// 规则Id
	RuleId *int64 `json:"RuleId,omitnil,omitempty" name:"RuleId"`

	// 规则名称
	RuleName *string `json:"RuleName,omitnil,omitempty" name:"RuleName"`

	// 规则描述
	RuleDesc *string `json:"RuleDesc,omitnil,omitempty" name:"RuleDesc"`

	// 关联项数
	ItemCount *int64 `json:"ItemCount,omitnil,omitempty" name:"ItemCount"`

	// 关联主机数
	HostCount *int64 `json:"HostCount,omitnil,omitempty" name:"HostCount"`

	// 首次检测时间
	FirstTime *string `json:"FirstTime,omitnil,omitempty" name:"FirstTime"`

	// string
	LastTime *string `json:"LastTime,omitnil,omitempty" name:"LastTime"`

	// 0:未通过 1:忽略 3:通过 5:检测中
	DetectStatus *int64 `json:"DetectStatus,omitnil,omitempty" name:"DetectStatus"`

	// ItemID集合
	// 注意：此字段可能返回 null，表示取不到有效值。
	ItemIds []*int64 `json:"ItemIds,omitnil,omitempty" name:"ItemIds"`
}

type BaselineRuleInfo struct {
	// 检测项名称
	RuleName *string `json:"RuleName,omitnil,omitempty" name:"RuleName"`

	// 检测项描述
	Description *string `json:"Description,omitnil,omitempty" name:"Description"`

	// 修复建议
	FixMessage *string `json:"FixMessage,omitnil,omitempty" name:"FixMessage"`

	// 危害等级
	Level *uint64 `json:"Level,omitnil,omitempty" name:"Level"`

	// 状态
	Status *uint64 `json:"Status,omitnil,omitempty" name:"Status"`

	// 检测项id
	RuleId *uint64 `json:"RuleId,omitnil,omitempty" name:"RuleId"`

	// 最后检测时间
	LastScanAt *string `json:"LastScanAt,omitnil,omitempty" name:"LastScanAt"`

	// 具体原因说明
	RuleRemark *string `json:"RuleRemark,omitnil,omitempty" name:"RuleRemark"`

	// 唯一Uuid
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 唯一事件ID
	EventId *uint64 `json:"EventId,omitnil,omitempty" name:"EventId"`
}

type BaselineRuleTopInfo struct {
	// 基线检测项名
	// 注意：此字段可能返回 null，表示取不到有效值。
	RuleName *string `json:"RuleName,omitnil,omitempty" name:"RuleName"`

	// 检测项危害等级
	// 注意：此字段可能返回 null，表示取不到有效值。
	Level *uint64 `json:"Level,omitnil,omitempty" name:"Level"`

	// 事件总数
	// 注意：此字段可能返回 null，表示取不到有效值。
	EventCount *uint64 `json:"EventCount,omitnil,omitempty" name:"EventCount"`

	// 检测项id
	// 注意：此字段可能返回 null，表示取不到有效值。
	RuleId *uint64 `json:"RuleId,omitnil,omitempty" name:"RuleId"`
}

type BaselineWeakPassword struct {
	// 密码Id
	PasswordId *int64 `json:"PasswordId,omitnil,omitempty" name:"PasswordId"`

	// 密码
	WeakPassword *string `json:"WeakPassword,omitnil,omitempty" name:"WeakPassword"`

	// 创建时间
	CreateTime *string `json:"CreateTime,omitnil,omitempty" name:"CreateTime"`

	// 修改时间
	ModifyTime *string `json:"ModifyTime,omitnil,omitempty" name:"ModifyTime"`
}

type BashEvent struct {
	// 数据ID
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`

	// 主机安全ID
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 主机ID
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 主机内网IP
	Hostip *string `json:"Hostip,omitnil,omitempty" name:"Hostip"`

	// 执行用户名
	User *string `json:"User,omitnil,omitempty" name:"User"`

	// 平台类型
	Platform *uint64 `json:"Platform,omitnil,omitempty" name:"Platform"`

	// 执行命令
	BashCmd *string `json:"BashCmd,omitnil,omitempty" name:"BashCmd"`

	// 规则ID
	RuleId *uint64 `json:"RuleId,omitnil,omitempty" name:"RuleId"`

	// 规则名称
	RuleName *string `json:"RuleName,omitnil,omitempty" name:"RuleName"`

	// 规则等级：1-高 2-中 3-低
	RuleLevel *uint64 `json:"RuleLevel,omitnil,omitempty" name:"RuleLevel"`

	// 处理状态： 0 = 待处理 1= 已处理, 2 = 已加白， 3 = 已忽略
	Status *uint64 `json:"Status,omitnil,omitempty" name:"Status"`

	// 发生时间
	CreateTime *string `json:"CreateTime,omitnil,omitempty" name:"CreateTime"`

	// 主机名
	MachineName *string `json:"MachineName,omitnil,omitempty" name:"MachineName"`

	// 0: bash日志 1: 实时监控(雷霆版)
	// 注意：此字段可能返回 null，表示取不到有效值。
	DetectBy *uint64 `json:"DetectBy,omitnil,omitempty" name:"DetectBy"`

	// 进程id
	// 注意：此字段可能返回 null，表示取不到有效值。
	Pid *string `json:"Pid,omitnil,omitempty" name:"Pid"`

	// 进程名称
	// 注意：此字段可能返回 null，表示取不到有效值。
	Exe *string `json:"Exe,omitnil,omitempty" name:"Exe"`

	// 处理时间
	// 注意：此字段可能返回 null，表示取不到有效值。
	ModifyTime *string `json:"ModifyTime,omitnil,omitempty" name:"ModifyTime"`

	// 规则类别  0=系统规则，1=用户规则
	// 注意：此字段可能返回 null，表示取不到有效值。
	RuleCategory *uint64 `json:"RuleCategory,omitnil,omitempty" name:"RuleCategory"`

	// 自动生成的正则表达式
	// 注意：此字段可能返回 null，表示取不到有效值。
	RegexBashCmd *string `json:"RegexBashCmd,omitnil,omitempty" name:"RegexBashCmd"`

	// 主机HostName
	// 注意：此字段可能返回 null，表示取不到有效值。
	HostName *string `json:"HostName,omitnil,omitempty" name:"HostName"`
}

type BashEventNew struct {
	// 数据ID
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`

	// 主机安全ID
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 主机ID
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 主机内网IP
	HostIp *string `json:"HostIp,omitnil,omitempty" name:"HostIp"`

	// 执行用户名
	User *string `json:"User,omitnil,omitempty" name:"User"`

	// 平台类型
	Platform *uint64 `json:"Platform,omitnil,omitempty" name:"Platform"`

	// 执行命令
	BashCmd *string `json:"BashCmd,omitnil,omitempty" name:"BashCmd"`

	// 规则ID
	RuleId *uint64 `json:"RuleId,omitnil,omitempty" name:"RuleId"`

	// 规则名称
	RuleName *string `json:"RuleName,omitnil,omitempty" name:"RuleName"`

	// 规则等级：1-高 2-中 3-低
	RuleLevel *uint64 `json:"RuleLevel,omitnil,omitempty" name:"RuleLevel"`

	// 处理状态： 0 = 待处理 1= 已处理, 2 = 已加白， 3 = 已忽略
	Status *uint64 `json:"Status,omitnil,omitempty" name:"Status"`

	// 发生时间
	CreateTime *string `json:"CreateTime,omitnil,omitempty" name:"CreateTime"`

	// 主机名
	MachineName *string `json:"MachineName,omitnil,omitempty" name:"MachineName"`

	// 0: bash日志 1: 实时监控(雷霆版)
	// 注意：此字段可能返回 null，表示取不到有效值。
	DetectBy *uint64 `json:"DetectBy,omitnil,omitempty" name:"DetectBy"`

	// 进程id
	// 注意：此字段可能返回 null，表示取不到有效值。
	Pid *string `json:"Pid,omitnil,omitempty" name:"Pid"`

	// 进程名称
	// 注意：此字段可能返回 null，表示取不到有效值。
	Exe *string `json:"Exe,omitnil,omitempty" name:"Exe"`

	// 处理时间
	// 注意：此字段可能返回 null，表示取不到有效值。
	ModifyTime *string `json:"ModifyTime,omitnil,omitempty" name:"ModifyTime"`

	// 规则类别  0=系统规则，1=用户规则
	// 注意：此字段可能返回 null，表示取不到有效值。
	RuleCategory *uint64 `json:"RuleCategory,omitnil,omitempty" name:"RuleCategory"`

	// 自动生成的正则表达式
	// 注意：此字段可能返回 null，表示取不到有效值。
	RegexBashCmd *string `json:"RegexBashCmd,omitnil,omitempty" name:"RegexBashCmd"`

	// 0:普通 1:专业版 2:旗舰版
	// 注意：此字段可能返回 null，表示取不到有效值。
	MachineType *int64 `json:"MachineType,omitnil,omitempty" name:"MachineType"`

	// 机器额外信息
	// 注意：此字段可能返回 null，表示取不到有效值。
	MachineExtraInfo *MachineExtraInfo `json:"MachineExtraInfo,omitnil,omitempty" name:"MachineExtraInfo"`
}

type BashEventsInfo struct {
	// 数据ID
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`

	// 云镜ID
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 主机ID
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 主机内网IP
	HostIp *string `json:"HostIp,omitnil,omitempty" name:"HostIp"`

	// 平台类型
	Platform *uint64 `json:"Platform,omitnil,omitempty" name:"Platform"`

	// 执行命令
	BashCmd *string `json:"BashCmd,omitnil,omitempty" name:"BashCmd"`

	// 规则ID,等于0表示已规则已被删除或生效范围已修改
	RuleId *uint64 `json:"RuleId,omitnil,omitempty" name:"RuleId"`

	// 规则名称
	RuleName *string `json:"RuleName,omitnil,omitempty" name:"RuleName"`

	// 规则等级：1-高 2-中 3-低
	RuleLevel *uint64 `json:"RuleLevel,omitnil,omitempty" name:"RuleLevel"`

	// 处理状态： 0 = 待处理 1= 已处理, 2 = 已加白， 3= 已忽略
	Status *uint64 `json:"Status,omitnil,omitempty" name:"Status"`

	// 发生时间
	CreateTime *string `json:"CreateTime,omitnil,omitempty" name:"CreateTime"`

	// 主机名
	MachineName *string `json:"MachineName,omitnil,omitempty" name:"MachineName"`

	// 进程名称
	// 注意：此字段可能返回 null，表示取不到有效值。
	Exe *string `json:"Exe,omitnil,omitempty" name:"Exe"`

	// 处理时间
	// 注意：此字段可能返回 null，表示取不到有效值。
	ModifyTime *string `json:"ModifyTime,omitnil,omitempty" name:"ModifyTime"`

	// 规则类别  0=系统规则，1=用户规则
	// 注意：此字段可能返回 null，表示取不到有效值。
	RuleCategory *uint64 `json:"RuleCategory,omitnil,omitempty" name:"RuleCategory"`

	// 自动生成的正则表达式
	// 注意：此字段可能返回 null，表示取不到有效值。
	RegexBashCmd *string `json:"RegexBashCmd,omitnil,omitempty" name:"RegexBashCmd"`

	// 进程树 json  pid:进程id，exe:文件路径 ，account:进程所属用组和用户 ,cmdline:执行命令，ssh_service: SSH服务ip, ssh_soure:登录源
	// 注意：此字段可能返回 null，表示取不到有效值。
	PsTree *string `json:"PsTree,omitnil,omitempty" name:"PsTree"`

	// 建议方案
	// 注意：此字段可能返回 null，表示取不到有效值。
	SuggestScheme *string `json:"SuggestScheme,omitnil,omitempty" name:"SuggestScheme"`

	// 描述
	// 注意：此字段可能返回 null，表示取不到有效值。
	HarmDescribe *string `json:"HarmDescribe,omitnil,omitempty" name:"HarmDescribe"`

	// 标签
	// 注意：此字段可能返回 null，表示取不到有效值。
	Tags []*string `json:"Tags,omitnil,omitempty" name:"Tags"`

	// 参考链接
	// 注意：此字段可能返回 null，表示取不到有效值。
	References []*string `json:"References,omitnil,omitempty" name:"References"`

	// 主机外网ip
	// 注意：此字段可能返回 null，表示取不到有效值。
	MachineWanIp *string `json:"MachineWanIp,omitnil,omitempty" name:"MachineWanIp"`

	// 主机在线状态 OFFLINE  ONLINE
	// 注意：此字段可能返回 null，表示取不到有效值。
	MachineStatus *string `json:"MachineStatus,omitnil,omitempty" name:"MachineStatus"`

	// 登录用户
	// 注意：此字段可能返回 null，表示取不到有效值。
	User *string `json:"User,omitnil,omitempty" name:"User"`

	// 进程号
	// 注意：此字段可能返回 null，表示取不到有效值。
	Pid *string `json:"Pid,omitnil,omitempty" name:"Pid"`

	// 数据来源
	// 注意：此字段可能返回 null，表示取不到有效值。
	DetectBy *string `json:"DetectBy,omitnil,omitempty" name:"DetectBy"`
}

type BashEventsInfoNew struct {
	// 数据ID
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`

	// 主机安全ID
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 主机ID
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 主机内网IP
	HostIp *string `json:"HostIp,omitnil,omitempty" name:"HostIp"`

	// 平台类型
	Platform *uint64 `json:"Platform,omitnil,omitempty" name:"Platform"`

	// 执行命令
	BashCmd *string `json:"BashCmd,omitnil,omitempty" name:"BashCmd"`

	// 规则ID,等于0表示已规则已被删除或生效范围已修改
	RuleId *uint64 `json:"RuleId,omitnil,omitempty" name:"RuleId"`

	// 规则名称
	RuleName *string `json:"RuleName,omitnil,omitempty" name:"RuleName"`

	// 规则等级：1-高 2-中 3-低
	RuleLevel *uint64 `json:"RuleLevel,omitnil,omitempty" name:"RuleLevel"`

	// 处理状态： 0 = 待处理 1= 已处理, 2 = 已加白， 3= 已忽略
	Status *uint64 `json:"Status,omitnil,omitempty" name:"Status"`

	// 发生时间
	CreateTime *string `json:"CreateTime,omitnil,omitempty" name:"CreateTime"`

	// 主机名
	MachineName *string `json:"MachineName,omitnil,omitempty" name:"MachineName"`

	// 进程名称
	// 注意：此字段可能返回 null，表示取不到有效值。
	Exe *string `json:"Exe,omitnil,omitempty" name:"Exe"`

	// 处理时间
	// 注意：此字段可能返回 null，表示取不到有效值。
	ModifyTime *string `json:"ModifyTime,omitnil,omitempty" name:"ModifyTime"`

	// 规则类别  0=系统规则，1=用户规则
	// 注意：此字段可能返回 null，表示取不到有效值。
	RuleCategory *uint64 `json:"RuleCategory,omitnil,omitempty" name:"RuleCategory"`

	// 自动生成的正则表达式
	// 注意：此字段可能返回 null，表示取不到有效值。
	RegexBashCmd *string `json:"RegexBashCmd,omitnil,omitempty" name:"RegexBashCmd"`

	// 进程树 json  pid:进程id，exe:文件路径 ，account:进程所属用组和用户 ,cmdline:执行命令，ssh_service: SSH服务ip, ssh_soure:登录源
	// 注意：此字段可能返回 null，表示取不到有效值。
	PsTree *string `json:"PsTree,omitnil,omitempty" name:"PsTree"`

	// 建议方案
	// 注意：此字段可能返回 null，表示取不到有效值。
	SuggestScheme *string `json:"SuggestScheme,omitnil,omitempty" name:"SuggestScheme"`

	// 描述
	// 注意：此字段可能返回 null，表示取不到有效值。
	HarmDescribe *string `json:"HarmDescribe,omitnil,omitempty" name:"HarmDescribe"`

	// 标签
	// 注意：此字段可能返回 null，表示取不到有效值。
	Tags []*string `json:"Tags,omitnil,omitempty" name:"Tags"`

	// 参考链接
	// 注意：此字段可能返回 null，表示取不到有效值。
	References []*string `json:"References,omitnil,omitempty" name:"References"`

	// 主机外网ip
	// 注意：此字段可能返回 null，表示取不到有效值。
	MachineWanIp *string `json:"MachineWanIp,omitnil,omitempty" name:"MachineWanIp"`

	// 主机在线状态 OFFLINE  ONLINE
	// 注意：此字段可能返回 null，表示取不到有效值。
	MachineStatus *string `json:"MachineStatus,omitnil,omitempty" name:"MachineStatus"`

	// 登录用户
	// 注意：此字段可能返回 null，表示取不到有效值。
	User *string `json:"User,omitnil,omitempty" name:"User"`

	// 进程号
	// 注意：此字段可能返回 null，表示取不到有效值。
	Pid *string `json:"Pid,omitnil,omitempty" name:"Pid"`

	// 0:普通 1:专业版 2:旗舰版
	// 注意：此字段可能返回 null，表示取不到有效值。
	MachineType *int64 `json:"MachineType,omitnil,omitempty" name:"MachineType"`

	// 检测来源 0:bash日志 1:实时监控
	// 注意：此字段可能返回 null，表示取不到有效值。
	DetectBy *int64 `json:"DetectBy,omitnil,omitempty" name:"DetectBy"`
}

type BashPolicy struct {
	// 策略名称
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// 1:有效 0:无效
	Enable *int64 `json:"Enable,omitnil,omitempty" name:"Enable"`

	// 0:黑名单 1:白名单
	White *int64 `json:"White,omitnil,omitempty" name:"White"`

	// 0:告警 1:白名单 2:拦截
	BashAction *int64 `json:"BashAction,omitnil,omitempty" name:"BashAction"`

	// 正则表达式 base64 加密,该字段废弃,如果写入则自动替换为Rules.Process.CmdLine
	Rule *string `json:"Rule,omitnil,omitempty" name:"Rule"`

	// 危险等级(0:无，1: 高危 2:中危 3: 低危)
	Level *int64 `json:"Level,omitnil,omitempty" name:"Level"`

	// 生效范围（0:一组quuid 1:所有专业版(包含旗舰版) 2:所有旗舰版 3:所有主机）
	Scope *int64 `json:"Scope,omitnil,omitempty" name:"Scope"`

	// 策略ID
	Id *int64 `json:"Id,omitnil,omitempty" name:"Id"`

	// 策略描述
	// 注意：此字段可能返回 null，表示取不到有效值。
	Descript *string `json:"Descript,omitnil,omitempty" name:"Descript"`

	// 事件列表点击“加入白名单”时,需要传EventId 事件的id
	// 注意：此字段可能返回 null，表示取不到有效值。
	EventId *int64 `json:"EventId,omitnil,omitempty" name:"EventId"`

	// 是否处理旧事件为白名单 0=不处理 1=处理
	// 注意：此字段可能返回 null，表示取不到有效值。
	DealOldEvents *int64 `json:"DealOldEvents,omitnil,omitempty" name:"DealOldEvents"`

	// 生效主机的QUUID集合
	// 注意：此字段可能返回 null，表示取不到有效值。
	Quuids []*string `json:"Quuids,omitnil,omitempty" name:"Quuids"`

	// 策略类型，0:系统  1:用户
	Category *int64 `json:"Category,omitnil,omitempty" name:"Category"`

	// 创建时间
	CreateTime *string `json:"CreateTime,omitnil,omitempty" name:"CreateTime"`

	// 修改时间
	ModifyTime *string `json:"ModifyTime,omitnil,omitempty" name:"ModifyTime"`

	// 老版本兼容可能会用到
	Uuids []*string `json:"Uuids,omitnil,omitempty" name:"Uuids"`

	// 规则表达式
	// 注意：此字段可能返回 null，表示取不到有效值。
	Rules *PolicyRules `json:"Rules,omitnil,omitempty" name:"Rules"`
}

type BashRule struct {
	// 规则ID
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`

	// 客户端ID
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 规则名称
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// 危险等级(0 ：无 1: 高危 2:中危 3: 低危)
	Level *uint64 `json:"Level,omitnil,omitempty" name:"Level"`

	// 正则表达式
	Rule *string `json:"Rule,omitnil,omitempty" name:"Rule"`

	// 规则描述
	//
	// Deprecated: Decription is deprecated.
	Decription *string `json:"Decription,omitnil,omitempty" name:"Decription"`

	// 操作人
	Operator *string `json:"Operator,omitnil,omitempty" name:"Operator"`

	// 是否全局规则
	IsGlobal *uint64 `json:"IsGlobal,omitnil,omitempty" name:"IsGlobal"`

	// 状态 (0: 有效 1: 无效)
	Status *uint64 `json:"Status,omitnil,omitempty" name:"Status"`

	// 创建时间
	CreateTime *string `json:"CreateTime,omitnil,omitempty" name:"CreateTime"`

	// 修改时间
	ModifyTime *string `json:"ModifyTime,omitnil,omitempty" name:"ModifyTime"`

	// 主机IP
	Hostip *string `json:"Hostip,omitnil,omitempty" name:"Hostip"`

	// 生效服务器的uuid数组
	// 注意：此字段可能返回 null，表示取不到有效值。
	Uuids []*string `json:"Uuids,omitnil,omitempty" name:"Uuids"`

	// 0=黑名单 1=白名单
	// 注意：此字段可能返回 null，表示取不到有效值。
	White *uint64 `json:"White,omitnil,omitempty" name:"White"`

	// 是否处理之前的事件 0: 不处理 1:处理
	// 注意：此字段可能返回 null，表示取不到有效值。
	DealOldEvents *uint64 `json:"DealOldEvents,omitnil,omitempty" name:"DealOldEvents"`

	// 规则描述
	// 注意：此字段可能返回 null，表示取不到有效值。
	Description *string `json:"Description,omitnil,omitempty" name:"Description"`
}

type BroadcastInfo struct {
	// 文章名字
	// 注意：此字段可能返回 null，表示取不到有效值。
	Title *string `json:"Title,omitnil,omitempty" name:"Title"`

	// 跳转位置：0=不跳转，1=文件查杀，2=漏洞扫描，3=安全基线
	// 注意：此字段可能返回 null，表示取不到有效值。
	GotoType *uint64 `json:"GotoType,omitnil,omitempty" name:"GotoType"`

	// 副标题
	Subtitle *string `json:"Subtitle,omitnil,omitempty" name:"Subtitle"`

	// 发布时间
	CreateTime *string `json:"CreateTime,omitnil,omitempty" name:"CreateTime"`

	// 富文本内容信息
	Content *string `json:"Content,omitnil,omitempty" name:"Content"`

	// 文章唯一Id
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`

	// 类型：0=紧急通知，1=功能更新，2=行业荣誉，3=版本发布
	Type *uint64 `json:"Type,omitnil,omitempty" name:"Type"`
}

type Broadcasts struct {
	// 文章名字
	// 注意：此字段可能返回 null，表示取不到有效值。
	Title *string `json:"Title,omitnil,omitempty" name:"Title"`

	// 类型：0=紧急通知，1=功能更新，2=行业荣誉，3=版本发布
	// 注意：此字段可能返回 null，表示取不到有效值。
	Type *uint64 `json:"Type,omitnil,omitempty" name:"Type"`

	// 副标题
	Subtitle *string `json:"Subtitle,omitnil,omitempty" name:"Subtitle"`

	// 发布时间
	CreateTime *string `json:"CreateTime,omitnil,omitempty" name:"CreateTime"`

	// 文章唯一id
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`

	// 危险程度  0：无， 1：严重， 2: 高危， 3:中危， 4: 低危
	Level *uint64 `json:"Level,omitnil,omitempty" name:"Level"`
}

type BruteAttackInfo struct {
	// 唯一Id
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`

	// 主机安全客户端唯一标识UUID
	// 注意：此字段可能返回 null，表示取不到有效值。
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 主机ip
	// 注意：此字段可能返回 null，表示取不到有效值。
	MachineIp *string `json:"MachineIp,omitnil,omitempty" name:"MachineIp"`

	// 主机名
	// 注意：此字段可能返回 null，表示取不到有效值。
	MachineName *string `json:"MachineName,omitnil,omitempty" name:"MachineName"`

	// 用户名
	// 注意：此字段可能返回 null，表示取不到有效值。
	UserName *string `json:"UserName,omitnil,omitempty" name:"UserName"`

	// 来源ip
	// 注意：此字段可能返回 null，表示取不到有效值。
	SrcIp *string `json:"SrcIp,omitnil,omitempty" name:"SrcIp"`

	// SUCCESS：破解成功；FAILED：破解失败
	// 注意：此字段可能返回 null，表示取不到有效值。
	Status *string `json:"Status,omitnil,omitempty" name:"Status"`

	// 国家id
	// 注意：此字段可能返回 null，表示取不到有效值。
	Country *uint64 `json:"Country,omitnil,omitempty" name:"Country"`

	// 城市id
	// 注意：此字段可能返回 null，表示取不到有效值。
	City *uint64 `json:"City,omitnil,omitempty" name:"City"`

	// 省份id
	// 注意：此字段可能返回 null，表示取不到有效值。
	Province *uint64 `json:"Province,omitnil,omitempty" name:"Province"`

	// 创建时间
	// 注意：此字段可能返回 null，表示取不到有效值。
	CreateTime *string `json:"CreateTime,omitnil,omitempty" name:"CreateTime"`

	// 0 -不阻断(客户端版本不支持)
	// 1 -已阻断
	// 2 -阻断失败(程序异常)
	// 3 -不阻断(内网不阻断)
	// 4 -可用区不支持阻断
	// 10-阻断中
	// 81-不阻断(未开启阻断)
	// 82-不阻断(非专业版)
	// 83-不阻断(已加白名单)
	// 86-不阻断(系统白名单)
	// 87-不阻断(客户端离线)
	// 88-不阻断(来源Ip归属相同客户)
	// 89-不阻断(ipv6不支持阻断)
	// 注意：此字段可能返回 null，表示取不到有效值。
	BanStatus *uint64 `json:"BanStatus,omitnil,omitempty" name:"BanStatus"`

	// 事件类型：200-暴力破解事件，300-暴力破解成功事件（页面展示），400-暴力破解不存在的帐号事件
	// 注意：此字段可能返回 null，表示取不到有效值。
	EventType *uint64 `json:"EventType,omitnil,omitempty" name:"EventType"`

	// 发生次数
	// 注意：此字段可能返回 null，表示取不到有效值。
	Count *uint64 `json:"Count,omitnil,omitempty" name:"Count"`

	// 机器UUID
	// 注意：此字段可能返回 null，表示取不到有效值。
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 是否为专业版（true/false）
	// 注意：此字段可能返回 null，表示取不到有效值。
	IsProVersion *bool `json:"IsProVersion,omitnil,omitempty" name:"IsProVersion"`

	// 被攻击的服务的用户名
	// 注意：此字段可能返回 null，表示取不到有效值。
	Protocol *string `json:"Protocol,omitnil,omitempty" name:"Protocol"`

	// 端口
	// 注意：此字段可能返回 null，表示取不到有效值。
	Port *uint64 `json:"Port,omitnil,omitempty" name:"Port"`

	// 最近攻击时间
	// 注意：此字段可能返回 null，表示取不到有效值。
	ModifyTime *string `json:"ModifyTime,omitnil,omitempty" name:"ModifyTime"`

	// 实例ID
	// 注意：此字段可能返回 null，表示取不到有效值。
	InstanceId *string `json:"InstanceId,omitnil,omitempty" name:"InstanceId"`

	// 0：待处理，1：忽略，5：已处理，6：加入白名单
	// 注意：此字段可能返回 null，表示取不到有效值。
	DataStatus *uint64 `json:"DataStatus,omitnil,omitempty" name:"DataStatus"`

	// 附加信息
	// 注意：此字段可能返回 null，表示取不到有效值。
	MachineExtraInfo *MachineExtraInfo `json:"MachineExtraInfo,omitnil,omitempty" name:"MachineExtraInfo"`

	// 地理位置中文名
	// 注意：此字段可能返回 null，表示取不到有效值。
	Location *string `json:"Location,omitnil,omitempty" name:"Location"`

	// 威胁等级：0低危，1中危，2高危
	// 注意：此字段可能返回 null，表示取不到有效值。
	RiskLevel *uint64 `json:"RiskLevel,omitnil,omitempty" name:"RiskLevel"`

	// 事件来源：0--阻断规则，1--威胁情报
	// 注意：此字段可能返回 null，表示取不到有效值。
	DataFrom *int64 `json:"DataFrom,omitnil,omitempty" name:"DataFrom"`

	// 破解状态说明
	// 注意：此字段可能返回 null，表示取不到有效值。
	AttackStatusDesc *string `json:"AttackStatusDesc,omitnil,omitempty" name:"AttackStatusDesc"`

	// 阻断过期时间（仅阻断中事件有效）
	// 注意：此字段可能返回 null，表示取不到有效值。
	BanExpiredTime *string `json:"BanExpiredTime,omitnil,omitempty" name:"BanExpiredTime"`
}

type BruteAttackRule struct {
	// 爆破事件发生的时间范围，单位：秒
	TimeRange *uint64 `json:"TimeRange,omitnil,omitempty" name:"TimeRange"`

	// 爆破事件失败次数
	LoginFailTimes *uint64 `json:"LoginFailTimes,omitnil,omitempty" name:"LoginFailTimes"`
}

type BruteAttackRuleList struct {
	// 爆破事件发生的时间范围，单位：秒
	TimeRange *uint64 `json:"TimeRange,omitnil,omitempty" name:"TimeRange"`

	// 爆破事件失败次数
	LoginFailTimes *uint64 `json:"LoginFailTimes,omitnil,omitempty" name:"LoginFailTimes"`

	// 规则是否为空，为空则填充默认规则
	Enable *bool `json:"Enable,omitnil,omitempty" name:"Enable"`

	// 爆破事件发生的时间范围，单位：秒（默认规则）
	TimeRangeDefault *uint64 `json:"TimeRangeDefault,omitnil,omitempty" name:"TimeRangeDefault"`

	// 爆破事件失败次数（默认规则）
	LoginFailTimesDefault *uint64 `json:"LoginFailTimesDefault,omitnil,omitempty" name:"LoginFailTimesDefault"`
}

type CKafkaInstanceInfo struct {
	// 实例ID
	InstanceID *string `json:"InstanceID,omitnil,omitempty" name:"InstanceID"`

	// 实例名称
	InstanceName *string `json:"InstanceName,omitnil,omitempty" name:"InstanceName"`

	// 版本号
	KafkaVersion *string `json:"KafkaVersion,omitnil,omitempty" name:"KafkaVersion"`

	// 主题列表
	// 注意：此字段可能返回 null，表示取不到有效值。
	TopicList []*CKafkaTopicInfo `json:"TopicList,omitnil,omitempty" name:"TopicList"`

	// 路由列表
	RouteList []*CKafkaRouteInfo `json:"RouteList,omitnil,omitempty" name:"RouteList"`

	// 磁盘容量，单位GB
	DiskSize *int64 `json:"DiskSize,omitnil,omitempty" name:"DiskSize"`

	// vpcId，如果为空，说明是基础网络
	VpcId *string `json:"VpcId,omitnil,omitempty" name:"VpcId"`

	// 子网id
	SubnetId *string `json:"SubnetId,omitnil,omitempty" name:"SubnetId"`

	// 状态，1表示健康，2表示告警，3 表示实例状态异常
	Healthy *int64 `json:"Healthy,omitnil,omitempty" name:"Healthy"`

	// 可用区
	Zone *string `json:"Zone,omitnil,omitempty" name:"Zone"`

	// 地域
	Az *string `json:"Az,omitnil,omitempty" name:"Az"`

	// 实例带宽，单位Mbps
	Bandwidth *int64 `json:"Bandwidth,omitnil,omitempty" name:"Bandwidth"`
}

type CKafkaRouteInfo struct {
	// 路由ID
	RouteID *int64 `json:"RouteID,omitnil,omitempty" name:"RouteID"`

	// 域名
	Domain *string `json:"Domain,omitnil,omitempty" name:"Domain"`

	// 域名端口
	DomainPort *uint64 `json:"DomainPort,omitnil,omitempty" name:"DomainPort"`

	// 虚拟ip
	Vip *string `json:"Vip,omitnil,omitempty" name:"Vip"`

	// 虚拟ip类型1:外网TGW 2:基础网络 3:VPC网络 4:支撑网络(标准版) 5:SSL外网访问方式访问 6:黑石环境vpc 7:支撑网络(专业版)
	VipType *int64 `json:"VipType,omitnil,omitempty" name:"VipType"`

	// 接入类型
	// 0：PLAINTEXT (明文方式，没有带用户信息老版本及社区版本都支持)
	// 1：SASL_PLAINTEXT（明文方式，不过在数据开始时，会通过SASL方式登录鉴权，仅社区版本支持）
	// 2：SSL（SSL加密通信，没有带用户信息，老版本及社区版本都支持）
	// 3：SASL_SSL（SSL加密通信，在数据开始时，会通过SASL方式登录鉴权，仅社区版本支持）
	AccessType *int64 `json:"AccessType,omitnil,omitempty" name:"AccessType"`
}

type CKafkaTopicInfo struct {
	// 主题ID
	TopicID *string `json:"TopicID,omitnil,omitempty" name:"TopicID"`

	// 主题名称
	TopicName *string `json:"TopicName,omitnil,omitempty" name:"TopicName"`
}

type CanFixVulInfo struct {
	// 漏洞id
	// 注意：此字段可能返回 null，表示取不到有效值。
	VulId *uint64 `json:"VulId,omitnil,omitempty" name:"VulId"`

	// 漏洞名称
	// 注意：此字段可能返回 null，表示取不到有效值。
	VulName *string `json:"VulName,omitnil,omitempty" name:"VulName"`

	// 该漏洞可修复的主机信息
	// 注意：此字段可能返回 null，表示取不到有效值。
	HostList []*VulInfoHostInfo `json:"HostList,omitnil,omitempty" name:"HostList"`

	// 修复提示tag
	// 注意：此字段可能返回 null，表示取不到有效值。
	FixTag []*string `json:"FixTag,omitnil,omitempty" name:"FixTag"`

	// 漏洞分类1 web cms漏洞,2应用漏洞,4linux软件漏洞,5windows系统漏洞
	// 注意：此字段可能返回 null，表示取不到有效值。
	VulCategory *uint64 `json:"VulCategory,omitnil,omitempty" name:"VulCategory"`
}

type CanNotSeparateInfo struct {
	// 主机quuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 主机uuid
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 主机名
	Alias *string `json:"Alias,omitnil,omitempty" name:"Alias"`

	// 内网ip
	PrivateIp *string `json:"PrivateIp,omitnil,omitempty" name:"PrivateIp"`

	// 外网ip
	PublicIp *string `json:"PublicIp,omitnil,omitempty" name:"PublicIp"`

	// 隔离失败原因 1:agent离线
	Reason *uint64 `json:"Reason,omitnil,omitempty" name:"Reason"`
}

// Predefined struct for user
type CancelIgnoreVulRequestParams struct {
	// 漏洞事件id串，多个用英文逗号分隔
	EventIds *string `json:"EventIds,omitnil,omitempty" name:"EventIds"`
}

type CancelIgnoreVulRequest struct {
	*tchttp.BaseRequest
	
	// 漏洞事件id串，多个用英文逗号分隔
	EventIds *string `json:"EventIds,omitnil,omitempty" name:"EventIds"`
}

func (r *CancelIgnoreVulRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *CancelIgnoreVulRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "EventIds")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "CancelIgnoreVulRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type CancelIgnoreVulResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type CancelIgnoreVulResponse struct {
	*tchttp.BaseResponse
	Response *CancelIgnoreVulResponseParams `json:"Response"`
}

func (r *CancelIgnoreVulResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *CancelIgnoreVulResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ChangeRuleEventsIgnoreStatusRequestParams struct {
	// 忽略状态 0:取消忽略 ； 1:忽略
	IgnoreStatus *uint64 `json:"IgnoreStatus,omitnil,omitempty" name:"IgnoreStatus"`

	// 检测项id数组
	RuleIdList []*uint64 `json:"RuleIdList,omitnil,omitempty" name:"RuleIdList"`

	// 事件id数组
	EventIdList []*uint64 `json:"EventIdList,omitnil,omitempty" name:"EventIdList"`
}

type ChangeRuleEventsIgnoreStatusRequest struct {
	*tchttp.BaseRequest
	
	// 忽略状态 0:取消忽略 ； 1:忽略
	IgnoreStatus *uint64 `json:"IgnoreStatus,omitnil,omitempty" name:"IgnoreStatus"`

	// 检测项id数组
	RuleIdList []*uint64 `json:"RuleIdList,omitnil,omitempty" name:"RuleIdList"`

	// 事件id数组
	EventIdList []*uint64 `json:"EventIdList,omitnil,omitempty" name:"EventIdList"`
}

func (r *ChangeRuleEventsIgnoreStatusRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ChangeRuleEventsIgnoreStatusRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "IgnoreStatus")
	delete(f, "RuleIdList")
	delete(f, "EventIdList")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ChangeRuleEventsIgnoreStatusRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ChangeRuleEventsIgnoreStatusResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ChangeRuleEventsIgnoreStatusResponse struct {
	*tchttp.BaseResponse
	Response *ChangeRuleEventsIgnoreStatusResponseParams `json:"Response"`
}

func (r *ChangeRuleEventsIgnoreStatusResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ChangeRuleEventsIgnoreStatusResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ChangeStrategyEnableStatusRequestParams struct {
	// 基线策略id
	StrategyId *uint64 `json:"StrategyId,omitnil,omitempty" name:"StrategyId"`

	// 开关状态
	Status *uint64 `json:"Status,omitnil,omitempty" name:"Status"`
}

type ChangeStrategyEnableStatusRequest struct {
	*tchttp.BaseRequest
	
	// 基线策略id
	StrategyId *uint64 `json:"StrategyId,omitnil,omitempty" name:"StrategyId"`

	// 开关状态
	Status *uint64 `json:"Status,omitnil,omitempty" name:"Status"`
}

func (r *ChangeStrategyEnableStatusRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ChangeStrategyEnableStatusRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "StrategyId")
	delete(f, "Status")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ChangeStrategyEnableStatusRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ChangeStrategyEnableStatusResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ChangeStrategyEnableStatusResponse struct {
	*tchttp.BaseResponse
	Response *ChangeStrategyEnableStatusResponseParams `json:"Response"`
}

func (r *ChangeStrategyEnableStatusResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ChangeStrategyEnableStatusResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type CheckBashPolicyParamsRequestParams struct {
	// 校验内容字段,如果需要检测多个字段时,用逗号分割
	// <li>Name 策略名称</li>
	// <li>Process 进程</li>
	// <li>Name PProcess 父进程</li>
	// <li>Name AProcess 祖先进程</li>
	CheckField *string `json:"CheckField,omitnil,omitempty" name:"CheckField"`

	// 在事件列表中新增白名时需要提交事件ID
	EventId *uint64 `json:"EventId,omitnil,omitempty" name:"EventId"`

	// 填入的规则名称
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// 该字段不在维护,如果填入该参数,自动替换到Rules.Process
	Rule *string `json:"Rule,omitnil,omitempty" name:"Rule"`

	// 编辑时传的规则id
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`

	// 规则表达式
	Rules *PolicyRules `json:"Rules,omitnil,omitempty" name:"Rules"`
}

type CheckBashPolicyParamsRequest struct {
	*tchttp.BaseRequest
	
	// 校验内容字段,如果需要检测多个字段时,用逗号分割
	// <li>Name 策略名称</li>
	// <li>Process 进程</li>
	// <li>Name PProcess 父进程</li>
	// <li>Name AProcess 祖先进程</li>
	CheckField *string `json:"CheckField,omitnil,omitempty" name:"CheckField"`

	// 在事件列表中新增白名时需要提交事件ID
	EventId *uint64 `json:"EventId,omitnil,omitempty" name:"EventId"`

	// 填入的规则名称
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// 该字段不在维护,如果填入该参数,自动替换到Rules.Process
	Rule *string `json:"Rule,omitnil,omitempty" name:"Rule"`

	// 编辑时传的规则id
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`

	// 规则表达式
	Rules *PolicyRules `json:"Rules,omitnil,omitempty" name:"Rules"`
}

func (r *CheckBashPolicyParamsRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *CheckBashPolicyParamsRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "CheckField")
	delete(f, "EventId")
	delete(f, "Name")
	delete(f, "Rule")
	delete(f, "Id")
	delete(f, "Rules")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "CheckBashPolicyParamsRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type CheckBashPolicyParamsResponseParams struct {
	// 0=校验通过  1=规则名称校验不通过 2=正则表达式校验不通过
	ErrCode *uint64 `json:"ErrCode,omitnil,omitempty" name:"ErrCode"`

	// 校验信息
	ErrMsg *string `json:"ErrMsg,omitnil,omitempty" name:"ErrMsg"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type CheckBashPolicyParamsResponse struct {
	*tchttp.BaseResponse
	Response *CheckBashPolicyParamsResponseParams `json:"Response"`
}

func (r *CheckBashPolicyParamsResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *CheckBashPolicyParamsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type CheckBashRuleParamsRequestParams struct {
	// 校验内容 Name或Rule ，两个都要校验时逗号分割
	CheckField *string `json:"CheckField,omitnil,omitempty" name:"CheckField"`

	// 在事件列表中新增白名时需要提交事件ID
	EventId *uint64 `json:"EventId,omitnil,omitempty" name:"EventId"`

	// 填入的规则名称
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// 用户填入的正则表达式："正则表达式" 需与 "提交EventId对应的命令内容" 相匹配
	Rule *string `json:"Rule,omitnil,omitempty" name:"Rule"`

	// 编辑时传的规则id
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`
}

type CheckBashRuleParamsRequest struct {
	*tchttp.BaseRequest
	
	// 校验内容 Name或Rule ，两个都要校验时逗号分割
	CheckField *string `json:"CheckField,omitnil,omitempty" name:"CheckField"`

	// 在事件列表中新增白名时需要提交事件ID
	EventId *uint64 `json:"EventId,omitnil,omitempty" name:"EventId"`

	// 填入的规则名称
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// 用户填入的正则表达式："正则表达式" 需与 "提交EventId对应的命令内容" 相匹配
	Rule *string `json:"Rule,omitnil,omitempty" name:"Rule"`

	// 编辑时传的规则id
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`
}

func (r *CheckBashRuleParamsRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *CheckBashRuleParamsRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "CheckField")
	delete(f, "EventId")
	delete(f, "Name")
	delete(f, "Rule")
	delete(f, "Id")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "CheckBashRuleParamsRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type CheckBashRuleParamsResponseParams struct {
	// 0=校验通过  1=规则名称校验不通过 2=正则表达式校验不通过
	ErrCode *uint64 `json:"ErrCode,omitnil,omitempty" name:"ErrCode"`

	// 校验信息
	ErrMsg *string `json:"ErrMsg,omitnil,omitempty" name:"ErrMsg"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type CheckBashRuleParamsResponse struct {
	*tchttp.BaseResponse
	Response *CheckBashRuleParamsResponseParams `json:"Response"`
}

func (r *CheckBashRuleParamsResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *CheckBashRuleParamsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type CheckFileTamperRuleRequestParams struct {
	// 填入的规则名称
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// 编辑时传的规则id
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`
}

type CheckFileTamperRuleRequest struct {
	*tchttp.BaseRequest
	
	// 填入的规则名称
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// 编辑时传的规则id
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`
}

func (r *CheckFileTamperRuleRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *CheckFileTamperRuleRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Name")
	delete(f, "Id")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "CheckFileTamperRuleRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type CheckFileTamperRuleResponseParams struct {
	// 0=校验通过  1=规则名称校验不通过
	ErrCode *uint64 `json:"ErrCode,omitnil,omitempty" name:"ErrCode"`

	// 校验信息
	ErrMsg *string `json:"ErrMsg,omitnil,omitempty" name:"ErrMsg"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type CheckFileTamperRuleResponse struct {
	*tchttp.BaseResponse
	Response *CheckFileTamperRuleResponseParams `json:"Response"`
}

func (r *CheckFileTamperRuleResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *CheckFileTamperRuleResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type CheckFirstScanBaselineRequestParams struct {

}

type CheckFirstScanBaselineRequest struct {
	*tchttp.BaseRequest
	
}

func (r *CheckFirstScanBaselineRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *CheckFirstScanBaselineRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "CheckFirstScanBaselineRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type CheckFirstScanBaselineResponseParams struct {
	// 是否是第一次检测 0：不是；1：是
	FirstScan *uint64 `json:"FirstScan,omitnil,omitempty" name:"FirstScan"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type CheckFirstScanBaselineResponse struct {
	*tchttp.BaseResponse
	Response *CheckFirstScanBaselineResponseParams `json:"Response"`
}

func (r *CheckFirstScanBaselineResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *CheckFirstScanBaselineResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type CheckLogKafkaConnectionStateRequestParams struct {
	// 接入方式,1公网域名接入，2支撑环境接入
	AccessType *uint64 `json:"AccessType,omitnil,omitempty" name:"AccessType"`

	// 接入地址，域名或ip，带端口
	AccessAddr *string `json:"AccessAddr,omitnil,omitempty" name:"AccessAddr"`

	// 用户名
	Username *string `json:"Username,omitnil,omitempty" name:"Username"`

	// 0不用密码，1有密码
	HasPwd *uint64 `json:"HasPwd,omitnil,omitempty" name:"HasPwd"`

	// 密码，使用aes加密
	Pwd *string `json:"Pwd,omitnil,omitempty" name:"Pwd"`

	// kafka实例id
	KafkaId *string `json:"KafkaId,omitnil,omitempty" name:"KafkaId"`

	// kafka版本
	InsVersion *string `json:"InsVersion,omitnil,omitempty" name:"InsVersion"`
}

type CheckLogKafkaConnectionStateRequest struct {
	*tchttp.BaseRequest
	
	// 接入方式,1公网域名接入，2支撑环境接入
	AccessType *uint64 `json:"AccessType,omitnil,omitempty" name:"AccessType"`

	// 接入地址，域名或ip，带端口
	AccessAddr *string `json:"AccessAddr,omitnil,omitempty" name:"AccessAddr"`

	// 用户名
	Username *string `json:"Username,omitnil,omitempty" name:"Username"`

	// 0不用密码，1有密码
	HasPwd *uint64 `json:"HasPwd,omitnil,omitempty" name:"HasPwd"`

	// 密码，使用aes加密
	Pwd *string `json:"Pwd,omitnil,omitempty" name:"Pwd"`

	// kafka实例id
	KafkaId *string `json:"KafkaId,omitnil,omitempty" name:"KafkaId"`

	// kafka版本
	InsVersion *string `json:"InsVersion,omitnil,omitempty" name:"InsVersion"`
}

func (r *CheckLogKafkaConnectionStateRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *CheckLogKafkaConnectionStateRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "AccessType")
	delete(f, "AccessAddr")
	delete(f, "Username")
	delete(f, "HasPwd")
	delete(f, "Pwd")
	delete(f, "KafkaId")
	delete(f, "InsVersion")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "CheckLogKafkaConnectionStateRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type CheckLogKafkaConnectionStateResponseParams struct {
	// true连通，false不通
	IsConnect *bool `json:"IsConnect,omitnil,omitempty" name:"IsConnect"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type CheckLogKafkaConnectionStateResponse struct {
	*tchttp.BaseResponse
	Response *CheckLogKafkaConnectionStateResponseParams `json:"Response"`
}

func (r *CheckLogKafkaConnectionStateResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *CheckLogKafkaConnectionStateResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ClearLocalStorageRequestParams struct {

}

type ClearLocalStorageRequest struct {
	*tchttp.BaseRequest
	
}

func (r *ClearLocalStorageRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ClearLocalStorageRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ClearLocalStorageRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ClearLocalStorageResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ClearLocalStorageResponse struct {
	*tchttp.BaseResponse
	Response *ClearLocalStorageResponseParams `json:"Response"`
}

func (r *ClearLocalStorageResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ClearLocalStorageResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type CloudProtectService struct {
	// 资源ID
	ResourceId *string `json:"ResourceId,omitnil,omitempty" name:"ResourceId"`

	// 类型： 这里为新购
	Type *string `json:"Type,omitnil,omitempty" name:"Type"`

	// 配置：购买的配置信息
	Config *string `json:"Config,omitnil,omitempty" name:"Config"`

	// 服务名称
	ServiceName *string `json:"ServiceName,omitnil,omitempty" name:"ServiceName"`

	// 购买时间
	BeginTime *string `json:"BeginTime,omitnil,omitempty" name:"BeginTime"`
}

type CommandLine struct {
	// 路径,需要base64加密
	// 注意：此字段可能返回 null，表示取不到有效值。
	Exe *string `json:"Exe,omitnil,omitempty" name:"Exe"`

	// 命令行,需要base64加密
	// 注意：此字段可能返回 null，表示取不到有效值。
	Cmdline *string `json:"Cmdline,omitnil,omitempty" name:"Cmdline"`
}

type ComponentStatistics struct {
	// 组件ID。
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`

	// 主机数量。
	MachineNum *uint64 `json:"MachineNum,omitnil,omitempty" name:"MachineNum"`

	// 组件名称。
	ComponentName *string `json:"ComponentName,omitnil,omitempty" name:"ComponentName"`

	// 组件类型。
	// <li>WEB：Web组件</li>
	// <li>SYSTEM：系统组件</li>
	ComponentType *string `json:"ComponentType,omitnil,omitempty" name:"ComponentType"`

	// 组件描述。
	Description *string `json:"Description,omitnil,omitempty" name:"Description"`
}

// Predefined struct for user
type CreateBanWhiteListRequestParams struct {
	// 阻断规则
	Rules *BanWhiteList `json:"Rules,omitnil,omitempty" name:"Rules"`

	// 事件ID，事件列表加白名单时传递，白名单添加成功后，会将事件变成已加白状态
	EventId *uint64 `json:"EventId,omitnil,omitempty" name:"EventId"`
}

type CreateBanWhiteListRequest struct {
	*tchttp.BaseRequest
	
	// 阻断规则
	Rules *BanWhiteList `json:"Rules,omitnil,omitempty" name:"Rules"`

	// 事件ID，事件列表加白名单时传递，白名单添加成功后，会将事件变成已加白状态
	EventId *uint64 `json:"EventId,omitnil,omitempty" name:"EventId"`
}

func (r *CreateBanWhiteListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *CreateBanWhiteListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Rules")
	delete(f, "EventId")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "CreateBanWhiteListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type CreateBanWhiteListResponseParams struct {
	// 是否全局规则
	IsGlobal *bool `json:"IsGlobal,omitnil,omitempty" name:"IsGlobal"`

	// 添加规则是否重复
	IsDuplicate *bool `json:"IsDuplicate,omitnil,omitempty" name:"IsDuplicate"`

	// 重复机器的信息
	DuplicateHosts []*DuplicateHosts `json:"DuplicateHosts,omitnil,omitempty" name:"DuplicateHosts"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type CreateBanWhiteListResponse struct {
	*tchttp.BaseResponse
	Response *CreateBanWhiteListResponseParams `json:"Response"`
}

func (r *CreateBanWhiteListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *CreateBanWhiteListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type CreateBaselineStrategyRequestParams struct {
	// 策略名称
	StrategyName *string `json:"StrategyName,omitnil,omitempty" name:"StrategyName"`

	// 检测周期, 表示每隔多少天进行检测.示例: 2, 表示每2天进行检测一次.
	ScanCycle *uint64 `json:"ScanCycle,omitnil,omitempty" name:"ScanCycle"`

	// 定期检测时间，该时间下发扫描. 示例:“22:00”, 表示在22:00下发检测
	ScanAt *string `json:"ScanAt,omitnil,omitempty" name:"ScanAt"`

	// 该策略下选择的基线id数组. 示例: [1,3,5,7]
	CategoryIds []*uint64 `json:"CategoryIds,omitnil,omitempty" name:"CategoryIds"`

	// 扫描范围是否全部服务器, 1:是  0:否, 为1则为全部专业版主机
	IsGlobal *uint64 `json:"IsGlobal,omitnil,omitempty" name:"IsGlobal"`

	// 云主机类型：
	// CVM：虚拟主机
	// BM：裸金属
	// ECM：边缘计算主机
	// LH：轻量应用服务器
	// Other：混合云机器
	MachineType *string `json:"MachineType,omitnil,omitempty" name:"MachineType"`

	// 主机地域. 示例: "ap-guangzhou"
	RegionCode *string `json:"RegionCode,omitnil,omitempty" name:"RegionCode"`

	// 主机id数组. 示例: ["quuid1","quuid2"]
	Quuids []*string `json:"Quuids,omitnil,omitempty" name:"Quuids"`
}

type CreateBaselineStrategyRequest struct {
	*tchttp.BaseRequest
	
	// 策略名称
	StrategyName *string `json:"StrategyName,omitnil,omitempty" name:"StrategyName"`

	// 检测周期, 表示每隔多少天进行检测.示例: 2, 表示每2天进行检测一次.
	ScanCycle *uint64 `json:"ScanCycle,omitnil,omitempty" name:"ScanCycle"`

	// 定期检测时间，该时间下发扫描. 示例:“22:00”, 表示在22:00下发检测
	ScanAt *string `json:"ScanAt,omitnil,omitempty" name:"ScanAt"`

	// 该策略下选择的基线id数组. 示例: [1,3,5,7]
	CategoryIds []*uint64 `json:"CategoryIds,omitnil,omitempty" name:"CategoryIds"`

	// 扫描范围是否全部服务器, 1:是  0:否, 为1则为全部专业版主机
	IsGlobal *uint64 `json:"IsGlobal,omitnil,omitempty" name:"IsGlobal"`

	// 云主机类型：
	// CVM：虚拟主机
	// BM：裸金属
	// ECM：边缘计算主机
	// LH：轻量应用服务器
	// Other：混合云机器
	MachineType *string `json:"MachineType,omitnil,omitempty" name:"MachineType"`

	// 主机地域. 示例: "ap-guangzhou"
	RegionCode *string `json:"RegionCode,omitnil,omitempty" name:"RegionCode"`

	// 主机id数组. 示例: ["quuid1","quuid2"]
	Quuids []*string `json:"Quuids,omitnil,omitempty" name:"Quuids"`
}

func (r *CreateBaselineStrategyRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *CreateBaselineStrategyRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "StrategyName")
	delete(f, "ScanCycle")
	delete(f, "ScanAt")
	delete(f, "CategoryIds")
	delete(f, "IsGlobal")
	delete(f, "MachineType")
	delete(f, "RegionCode")
	delete(f, "Quuids")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "CreateBaselineStrategyRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type CreateBaselineStrategyResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type CreateBaselineStrategyResponse struct {
	*tchttp.BaseResponse
	Response *CreateBaselineStrategyResponseParams `json:"Response"`
}

func (r *CreateBaselineStrategyResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *CreateBaselineStrategyResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type CreateBuyBindTaskRequestParams struct {
	// 订单号
	DealName *string `json:"DealName,omitnil,omitempty" name:"DealName"`

	// 可选参数: 1专业版-包年包月 , 2 旗舰版-包年包月
	LicenseType *uint64 `json:"LicenseType,omitnil,omitempty" name:"LicenseType"`

	// 机器列表
	QuuidList []*string `json:"QuuidList,omitnil,omitempty" name:"QuuidList"`

	// 是否全选机器
	IsAll *bool `json:"IsAll,omitnil,omitempty" name:"IsAll"`
}

type CreateBuyBindTaskRequest struct {
	*tchttp.BaseRequest
	
	// 订单号
	DealName *string `json:"DealName,omitnil,omitempty" name:"DealName"`

	// 可选参数: 1专业版-包年包月 , 2 旗舰版-包年包月
	LicenseType *uint64 `json:"LicenseType,omitnil,omitempty" name:"LicenseType"`

	// 机器列表
	QuuidList []*string `json:"QuuidList,omitnil,omitempty" name:"QuuidList"`

	// 是否全选机器
	IsAll *bool `json:"IsAll,omitnil,omitempty" name:"IsAll"`
}

func (r *CreateBuyBindTaskRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *CreateBuyBindTaskRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "DealName")
	delete(f, "LicenseType")
	delete(f, "QuuidList")
	delete(f, "IsAll")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "CreateBuyBindTaskRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type CreateBuyBindTaskResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type CreateBuyBindTaskResponse struct {
	*tchttp.BaseResponse
	Response *CreateBuyBindTaskResponseParams `json:"Response"`
}

func (r *CreateBuyBindTaskResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *CreateBuyBindTaskResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type CreateCloudProtectServiceOrderRecordRequestParams struct {
	// 对应云护航服务的资源ID
	ResourceIds []*string `json:"ResourceIds,omitnil,omitempty" name:"ResourceIds"`
}

type CreateCloudProtectServiceOrderRecordRequest struct {
	*tchttp.BaseRequest
	
	// 对应云护航服务的资源ID
	ResourceIds []*string `json:"ResourceIds,omitnil,omitempty" name:"ResourceIds"`
}

func (r *CreateCloudProtectServiceOrderRecordRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *CreateCloudProtectServiceOrderRecordRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "ResourceIds")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "CreateCloudProtectServiceOrderRecordRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type CreateCloudProtectServiceOrderRecordResponseParams struct {
	// 成功收货的资源ID
	Success []*string `json:"Success,omitnil,omitempty" name:"Success"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type CreateCloudProtectServiceOrderRecordResponse struct {
	*tchttp.BaseResponse
	Response *CreateCloudProtectServiceOrderRecordResponseParams `json:"Response"`
}

func (r *CreateCloudProtectServiceOrderRecordResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *CreateCloudProtectServiceOrderRecordResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type CreateEmergencyVulScanRequestParams struct {
	// 漏洞id
	VulId *uint64 `json:"VulId,omitnil,omitempty" name:"VulId"`

	// 自选服务器时生效，主机uuid的string数组
	Uuids []*string `json:"Uuids,omitnil,omitempty" name:"Uuids"`

	// 扫描超时时长 ，单位秒
	TimeoutPeriod *uint64 `json:"TimeoutPeriod,omitnil,omitempty" name:"TimeoutPeriod"`
}

type CreateEmergencyVulScanRequest struct {
	*tchttp.BaseRequest
	
	// 漏洞id
	VulId *uint64 `json:"VulId,omitnil,omitempty" name:"VulId"`

	// 自选服务器时生效，主机uuid的string数组
	Uuids []*string `json:"Uuids,omitnil,omitempty" name:"Uuids"`

	// 扫描超时时长 ，单位秒
	TimeoutPeriod *uint64 `json:"TimeoutPeriod,omitnil,omitempty" name:"TimeoutPeriod"`
}

func (r *CreateEmergencyVulScanRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *CreateEmergencyVulScanRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "VulId")
	delete(f, "Uuids")
	delete(f, "TimeoutPeriod")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "CreateEmergencyVulScanRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type CreateEmergencyVulScanResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type CreateEmergencyVulScanResponse struct {
	*tchttp.BaseResponse
	Response *CreateEmergencyVulScanResponseParams `json:"Response"`
}

func (r *CreateEmergencyVulScanResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *CreateEmergencyVulScanResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type CreateIncidentBacktrackingRequestParams struct {
	// 主机安全quuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`
}

type CreateIncidentBacktrackingRequest struct {
	*tchttp.BaseRequest
	
	// 主机安全quuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`
}

func (r *CreateIncidentBacktrackingRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *CreateIncidentBacktrackingRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Quuid")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "CreateIncidentBacktrackingRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type CreateIncidentBacktrackingResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type CreateIncidentBacktrackingResponse struct {
	*tchttp.BaseResponse
	Response *CreateIncidentBacktrackingResponseParams `json:"Response"`
}

func (r *CreateIncidentBacktrackingResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *CreateIncidentBacktrackingResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type CreateLicenseOrderRequestParams struct {
	// 标签数组, 空则表示不需要绑定标签
	Tags []*Tags `json:"Tags,omitnil,omitempty" name:"Tags"`

	// 授权类型, 0 专业版-按量计费, 1专业版-包年包月 , 2 旗舰版-包年包月
	// 默认为0
	LicenseType *uint64 `json:"LicenseType,omitnil,omitempty" name:"LicenseType"`

	// 授权数量 , 需要购买的数量.
	// 默认为1
	LicenseNum *uint64 `json:"LicenseNum,omitnil,omitempty" name:"LicenseNum"`

	// 购买订单地域,这里仅支持 1 广州,9 新加坡. 推荐选择广州. 新加坡地域为白名单用户购买.
	// 默认为1
	RegionId *uint64 `json:"RegionId,omitnil,omitempty" name:"RegionId"`

	// 项目ID .
	// 默认为0
	ProjectId *uint64 `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// 购买时间长度,默认1 , 可选值为1,2,3,4,5,6,7,8,9,10,11,12,24,36
	// 该参数仅包年包月生效
	TimeSpan *uint64 `json:"TimeSpan,omitnil,omitempty" name:"TimeSpan"`

	// 是否自动续费, 默认不自动续费.
	// 该参数仅包年包月生效
	AutoRenewFlag *bool `json:"AutoRenewFlag,omitnil,omitempty" name:"AutoRenewFlag"`

	// 该字段作废
	AutoProtectOpenConfig *string `json:"AutoProtectOpenConfig,omitnil,omitempty" name:"AutoProtectOpenConfig"`

	// 变配参数
	ModifyConfig *OrderModifyObject `json:"ModifyConfig,omitnil,omitempty" name:"ModifyConfig"`
}

type CreateLicenseOrderRequest struct {
	*tchttp.BaseRequest
	
	// 标签数组, 空则表示不需要绑定标签
	Tags []*Tags `json:"Tags,omitnil,omitempty" name:"Tags"`

	// 授权类型, 0 专业版-按量计费, 1专业版-包年包月 , 2 旗舰版-包年包月
	// 默认为0
	LicenseType *uint64 `json:"LicenseType,omitnil,omitempty" name:"LicenseType"`

	// 授权数量 , 需要购买的数量.
	// 默认为1
	LicenseNum *uint64 `json:"LicenseNum,omitnil,omitempty" name:"LicenseNum"`

	// 购买订单地域,这里仅支持 1 广州,9 新加坡. 推荐选择广州. 新加坡地域为白名单用户购买.
	// 默认为1
	RegionId *uint64 `json:"RegionId,omitnil,omitempty" name:"RegionId"`

	// 项目ID .
	// 默认为0
	ProjectId *uint64 `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// 购买时间长度,默认1 , 可选值为1,2,3,4,5,6,7,8,9,10,11,12,24,36
	// 该参数仅包年包月生效
	TimeSpan *uint64 `json:"TimeSpan,omitnil,omitempty" name:"TimeSpan"`

	// 是否自动续费, 默认不自动续费.
	// 该参数仅包年包月生效
	AutoRenewFlag *bool `json:"AutoRenewFlag,omitnil,omitempty" name:"AutoRenewFlag"`

	// 该字段作废
	AutoProtectOpenConfig *string `json:"AutoProtectOpenConfig,omitnil,omitempty" name:"AutoProtectOpenConfig"`

	// 变配参数
	ModifyConfig *OrderModifyObject `json:"ModifyConfig,omitnil,omitempty" name:"ModifyConfig"`
}

func (r *CreateLicenseOrderRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *CreateLicenseOrderRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Tags")
	delete(f, "LicenseType")
	delete(f, "LicenseNum")
	delete(f, "RegionId")
	delete(f, "ProjectId")
	delete(f, "TimeSpan")
	delete(f, "AutoRenewFlag")
	delete(f, "AutoProtectOpenConfig")
	delete(f, "ModifyConfig")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "CreateLicenseOrderRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type CreateLicenseOrderResponseParams struct {
	// 订单号列表
	DealNames []*string `json:"DealNames,omitnil,omitempty" name:"DealNames"`

	// 资源ID列表,预付费订单该字段空值
	ResourceIds []*string `json:"ResourceIds,omitnil,omitempty" name:"ResourceIds"`

	// 大订单号 , 后付费该字段空值
	BigDealId *string `json:"BigDealId,omitnil,omitempty" name:"BigDealId"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type CreateLicenseOrderResponse struct {
	*tchttp.BaseResponse
	Response *CreateLicenseOrderResponseParams `json:"Response"`
}

func (r *CreateLicenseOrderResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *CreateLicenseOrderResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type CreateLogExportRequestParams struct {
	// 日志导出数量, 最大值5000万
	Count *uint64 `json:"Count,omitnil,omitempty" name:"Count"`

	// 日志导出起始时间，毫秒时间戳
	StartTime *int64 `json:"StartTime,omitnil,omitempty" name:"StartTime"`

	// 日志导出结束时间，毫秒时间戳
	EndTime *int64 `json:"EndTime,omitnil,omitempty" name:"EndTime"`

	// 日志导出检索语句，不支持[SQL语句]
	QueryString *string `json:"QueryString,omitnil,omitempty" name:"QueryString"`

	// 日志导出时间排序。desc，asc，默认为desc
	Sort *string `json:"Sort,omitnil,omitempty" name:"Sort"`

	// 日志导出数据格式。json，csv，默认为json
	Format *string `json:"Format,omitnil,omitempty" name:"Format"`
}

type CreateLogExportRequest struct {
	*tchttp.BaseRequest
	
	// 日志导出数量, 最大值5000万
	Count *uint64 `json:"Count,omitnil,omitempty" name:"Count"`

	// 日志导出起始时间，毫秒时间戳
	StartTime *int64 `json:"StartTime,omitnil,omitempty" name:"StartTime"`

	// 日志导出结束时间，毫秒时间戳
	EndTime *int64 `json:"EndTime,omitnil,omitempty" name:"EndTime"`

	// 日志导出检索语句，不支持[SQL语句]
	QueryString *string `json:"QueryString,omitnil,omitempty" name:"QueryString"`

	// 日志导出时间排序。desc，asc，默认为desc
	Sort *string `json:"Sort,omitnil,omitempty" name:"Sort"`

	// 日志导出数据格式。json，csv，默认为json
	Format *string `json:"Format,omitnil,omitempty" name:"Format"`
}

func (r *CreateLogExportRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *CreateLogExportRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Count")
	delete(f, "StartTime")
	delete(f, "EndTime")
	delete(f, "QueryString")
	delete(f, "Sort")
	delete(f, "Format")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "CreateLogExportRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type CreateLogExportResponseParams struct {
	// 日志导出ID
	ExportId *string `json:"ExportId,omitnil,omitempty" name:"ExportId"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type CreateLogExportResponse struct {
	*tchttp.BaseResponse
	Response *CreateLogExportResponseParams `json:"Response"`
}

func (r *CreateLogExportResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *CreateLogExportResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type CreateMaliciousRequestWhiteListRequestParams struct {
	// 白名单域名
	Domain *string `json:"Domain,omitnil,omitempty" name:"Domain"`

	// 备注
	Mark *string `json:"Mark,omitnil,omitempty" name:"Mark"`
}

type CreateMaliciousRequestWhiteListRequest struct {
	*tchttp.BaseRequest
	
	// 白名单域名
	Domain *string `json:"Domain,omitnil,omitempty" name:"Domain"`

	// 备注
	Mark *string `json:"Mark,omitnil,omitempty" name:"Mark"`
}

func (r *CreateMaliciousRequestWhiteListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *CreateMaliciousRequestWhiteListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Domain")
	delete(f, "Mark")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "CreateMaliciousRequestWhiteListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type CreateMaliciousRequestWhiteListResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type CreateMaliciousRequestWhiteListResponse struct {
	*tchttp.BaseResponse
	Response *CreateMaliciousRequestWhiteListResponseParams `json:"Response"`
}

func (r *CreateMaliciousRequestWhiteListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *CreateMaliciousRequestWhiteListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type CreateMalwareWhiteListRequestParams struct {
	// 白名单模式； 0 MD5白名单，1自定义
	Mode *uint64 `json:"Mode,omitnil,omitempty" name:"Mode"`

	// quuid 列表
	QuuidList []*string `json:"QuuidList,omitnil,omitempty" name:"QuuidList"`

	// 是否全部主机； 0否，1是。
	IsGlobal *uint64 `json:"IsGlobal,omitnil,omitempty" name:"IsGlobal"`

	// 匹配模式 ；0 精确匹配，1模糊匹配（废弃）
	MatchType *uint64 `json:"MatchType,omitnil,omitempty" name:"MatchType"`

	// 文件名称(正则)；长度不超过200个
	FileName []*string `json:"FileName,omitnil,omitempty" name:"FileName"`

	// 文件目录(正则)；长度不超过200个,内容base64转义
	FileDirectory []*string `json:"FileDirectory,omitnil,omitempty" name:"FileDirectory"`

	// 文件后缀；长度不超过200个,内容base64转义（废弃）
	FileExtension []*string `json:"FileExtension,omitnil,omitempty" name:"FileExtension"`

	// MD5列表
	Md5List []*string `json:"Md5List,omitnil,omitempty" name:"Md5List"`

	// 木马事件ID
	EventId *uint64 `json:"EventId,omitnil,omitempty" name:"EventId"`

	// 对历史待处理执行加白操作；0是不处理，1是处理
	IsHandleHistoryEvents *uint64 `json:"IsHandleHistoryEvents,omitnil,omitempty" name:"IsHandleHistoryEvents"`
}

type CreateMalwareWhiteListRequest struct {
	*tchttp.BaseRequest
	
	// 白名单模式； 0 MD5白名单，1自定义
	Mode *uint64 `json:"Mode,omitnil,omitempty" name:"Mode"`

	// quuid 列表
	QuuidList []*string `json:"QuuidList,omitnil,omitempty" name:"QuuidList"`

	// 是否全部主机； 0否，1是。
	IsGlobal *uint64 `json:"IsGlobal,omitnil,omitempty" name:"IsGlobal"`

	// 匹配模式 ；0 精确匹配，1模糊匹配（废弃）
	MatchType *uint64 `json:"MatchType,omitnil,omitempty" name:"MatchType"`

	// 文件名称(正则)；长度不超过200个
	FileName []*string `json:"FileName,omitnil,omitempty" name:"FileName"`

	// 文件目录(正则)；长度不超过200个,内容base64转义
	FileDirectory []*string `json:"FileDirectory,omitnil,omitempty" name:"FileDirectory"`

	// 文件后缀；长度不超过200个,内容base64转义（废弃）
	FileExtension []*string `json:"FileExtension,omitnil,omitempty" name:"FileExtension"`

	// MD5列表
	Md5List []*string `json:"Md5List,omitnil,omitempty" name:"Md5List"`

	// 木马事件ID
	EventId *uint64 `json:"EventId,omitnil,omitempty" name:"EventId"`

	// 对历史待处理执行加白操作；0是不处理，1是处理
	IsHandleHistoryEvents *uint64 `json:"IsHandleHistoryEvents,omitnil,omitempty" name:"IsHandleHistoryEvents"`
}

func (r *CreateMalwareWhiteListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *CreateMalwareWhiteListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Mode")
	delete(f, "QuuidList")
	delete(f, "IsGlobal")
	delete(f, "MatchType")
	delete(f, "FileName")
	delete(f, "FileDirectory")
	delete(f, "FileExtension")
	delete(f, "Md5List")
	delete(f, "EventId")
	delete(f, "IsHandleHistoryEvents")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "CreateMalwareWhiteListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type CreateMalwareWhiteListResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type CreateMalwareWhiteListResponse struct {
	*tchttp.BaseResponse
	Response *CreateMalwareWhiteListResponseParams `json:"Response"`
}

func (r *CreateMalwareWhiteListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *CreateMalwareWhiteListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type CreateNetAttackWhiteListRequestParams struct {
	// 是否全部主机； 0否，1是。
	Scope *uint64 `json:"Scope,omitnil,omitempty" name:"Scope"`

	// 来源IP 单IP:1.1.1.1  IP范围:1.1.1.1-1.1.2.1  IP范围：1.1.1.0/24 
	SrcIp []*string `json:"SrcIp,omitnil,omitempty" name:"SrcIp"`

	// quuid 列表
	QuuidList []*string `json:"QuuidList,omitnil,omitempty" name:"QuuidList"`

	// 事件id
	EventId *uint64 `json:"EventId,omitnil,omitempty" name:"EventId"`

	// 是否加白所有符合该规则的告警 ，1:处理,0:不处理
	DealOldEvents *uint64 `json:"DealOldEvents,omitnil,omitempty" name:"DealOldEvents"`

	// 描述
	Description *string `json:"Description,omitnil,omitempty" name:"Description"`
}

type CreateNetAttackWhiteListRequest struct {
	*tchttp.BaseRequest
	
	// 是否全部主机； 0否，1是。
	Scope *uint64 `json:"Scope,omitnil,omitempty" name:"Scope"`

	// 来源IP 单IP:1.1.1.1  IP范围:1.1.1.1-1.1.2.1  IP范围：1.1.1.0/24 
	SrcIp []*string `json:"SrcIp,omitnil,omitempty" name:"SrcIp"`

	// quuid 列表
	QuuidList []*string `json:"QuuidList,omitnil,omitempty" name:"QuuidList"`

	// 事件id
	EventId *uint64 `json:"EventId,omitnil,omitempty" name:"EventId"`

	// 是否加白所有符合该规则的告警 ，1:处理,0:不处理
	DealOldEvents *uint64 `json:"DealOldEvents,omitnil,omitempty" name:"DealOldEvents"`

	// 描述
	Description *string `json:"Description,omitnil,omitempty" name:"Description"`
}

func (r *CreateNetAttackWhiteListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *CreateNetAttackWhiteListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Scope")
	delete(f, "SrcIp")
	delete(f, "QuuidList")
	delete(f, "EventId")
	delete(f, "DealOldEvents")
	delete(f, "Description")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "CreateNetAttackWhiteListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type CreateNetAttackWhiteListResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type CreateNetAttackWhiteListResponse struct {
	*tchttp.BaseResponse
	Response *CreateNetAttackWhiteListResponseParams `json:"Response"`
}

func (r *CreateNetAttackWhiteListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *CreateNetAttackWhiteListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type CreateProtectServerRequestParams struct {
	// 防护目录地址
	ProtectDir *string `json:"ProtectDir,omitnil,omitempty" name:"ProtectDir"`

	// 防护机器 信息
	ProtectHostConfig []*ProtectHostConfig `json:"ProtectHostConfig,omitnil,omitempty" name:"ProtectHostConfig"`
}

type CreateProtectServerRequest struct {
	*tchttp.BaseRequest
	
	// 防护目录地址
	ProtectDir *string `json:"ProtectDir,omitnil,omitempty" name:"ProtectDir"`

	// 防护机器 信息
	ProtectHostConfig []*ProtectHostConfig `json:"ProtectHostConfig,omitnil,omitempty" name:"ProtectHostConfig"`
}

func (r *CreateProtectServerRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *CreateProtectServerRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "ProtectDir")
	delete(f, "ProtectHostConfig")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "CreateProtectServerRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type CreateProtectServerResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type CreateProtectServerResponse struct {
	*tchttp.BaseResponse
	Response *CreateProtectServerResponseParams `json:"Response"`
}

func (r *CreateProtectServerResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *CreateProtectServerResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type CreateRansomDefenseStrategyRequestParams struct {
	// 策略名称
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// 定时快照执行时间（0-23）：01:00;23:00
	Hour *string `json:"Hour,omitnil,omitempty" name:"Hour"`

	// 策略ID，填ID时修改策略，否则新增策略
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`

	// 策略备注
	Description *string `json:"Description,omitnil,omitempty" name:"Description"`

	// 是否开启：0关，1开
	Status *uint64 `json:"Status,omitnil,omitempty" name:"Status"`

	// 是否全部机器生效：0否，1是
	IsAll *uint64 `json:"IsAll,omitnil,omitempty" name:"IsAll"`

	// 包含目录，;分隔
	IncludeDir *string `json:"IncludeDir,omitnil,omitempty" name:"IncludeDir"`

	// 排除目录，;分隔
	ExcludeDir *string `json:"ExcludeDir,omitnil,omitempty" name:"ExcludeDir"`

	// 备份模式： 0按周，1按天
	BackupType *uint64 `json:"BackupType,omitnil,omitempty" name:"BackupType"`

	// 定时任务执行星期天数（1-7）：1;2;7
	Weekday *string `json:"Weekday,omitnil,omitempty" name:"Weekday"`

	// 保留天数：0永久
	SaveDay *uint64 `json:"SaveDay,omitnil,omitempty" name:"SaveDay"`

	// 绑定主机列表
	Machines []*RansomDefenseStrategyMachineInfo `json:"Machines,omitnil,omitempty" name:"Machines"`
}

type CreateRansomDefenseStrategyRequest struct {
	*tchttp.BaseRequest
	
	// 策略名称
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// 定时快照执行时间（0-23）：01:00;23:00
	Hour *string `json:"Hour,omitnil,omitempty" name:"Hour"`

	// 策略ID，填ID时修改策略，否则新增策略
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`

	// 策略备注
	Description *string `json:"Description,omitnil,omitempty" name:"Description"`

	// 是否开启：0关，1开
	Status *uint64 `json:"Status,omitnil,omitempty" name:"Status"`

	// 是否全部机器生效：0否，1是
	IsAll *uint64 `json:"IsAll,omitnil,omitempty" name:"IsAll"`

	// 包含目录，;分隔
	IncludeDir *string `json:"IncludeDir,omitnil,omitempty" name:"IncludeDir"`

	// 排除目录，;分隔
	ExcludeDir *string `json:"ExcludeDir,omitnil,omitempty" name:"ExcludeDir"`

	// 备份模式： 0按周，1按天
	BackupType *uint64 `json:"BackupType,omitnil,omitempty" name:"BackupType"`

	// 定时任务执行星期天数（1-7）：1;2;7
	Weekday *string `json:"Weekday,omitnil,omitempty" name:"Weekday"`

	// 保留天数：0永久
	SaveDay *uint64 `json:"SaveDay,omitnil,omitempty" name:"SaveDay"`

	// 绑定主机列表
	Machines []*RansomDefenseStrategyMachineInfo `json:"Machines,omitnil,omitempty" name:"Machines"`
}

func (r *CreateRansomDefenseStrategyRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *CreateRansomDefenseStrategyRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Name")
	delete(f, "Hour")
	delete(f, "Id")
	delete(f, "Description")
	delete(f, "Status")
	delete(f, "IsAll")
	delete(f, "IncludeDir")
	delete(f, "ExcludeDir")
	delete(f, "BackupType")
	delete(f, "Weekday")
	delete(f, "SaveDay")
	delete(f, "Machines")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "CreateRansomDefenseStrategyRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type CreateRansomDefenseStrategyResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type CreateRansomDefenseStrategyResponse struct {
	*tchttp.BaseResponse
	Response *CreateRansomDefenseStrategyResponseParams `json:"Response"`
}

func (r *CreateRansomDefenseStrategyResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *CreateRansomDefenseStrategyResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type CreateScanMalwareSettingRequestParams struct {
	// 扫描模式 0 全盘扫描, 1 快速扫描
	ScanPattern *uint64 `json:"ScanPattern,omitnil,omitempty" name:"ScanPattern"`

	// 服务器分类：1:专业版服务器；2:自选服务器
	HostType *int64 `json:"HostType,omitnil,omitempty" name:"HostType"`

	// 自选服务器时生效，主机quuid的string数组
	QuuidList []*string `json:"QuuidList,omitnil,omitempty" name:"QuuidList"`

	// 超时时间单位 秒 默认3600 秒
	TimeoutPeriod *uint64 `json:"TimeoutPeriod,omitnil,omitempty" name:"TimeoutPeriod"`

	// 1标准模式（只报严重、高危）、2增强模式（报严重、高危、中危）、3严格模式（报严重、高、中、低、提示）
	EngineType *uint64 `json:"EngineType,omitnil,omitempty" name:"EngineType"`

	// 是否开启恶意进程查杀[0:未开启,1:开启]
	EnableMemShellScan *int64 `json:"EnableMemShellScan,omitnil,omitempty" name:"EnableMemShellScan"`
}

type CreateScanMalwareSettingRequest struct {
	*tchttp.BaseRequest
	
	// 扫描模式 0 全盘扫描, 1 快速扫描
	ScanPattern *uint64 `json:"ScanPattern,omitnil,omitempty" name:"ScanPattern"`

	// 服务器分类：1:专业版服务器；2:自选服务器
	HostType *int64 `json:"HostType,omitnil,omitempty" name:"HostType"`

	// 自选服务器时生效，主机quuid的string数组
	QuuidList []*string `json:"QuuidList,omitnil,omitempty" name:"QuuidList"`

	// 超时时间单位 秒 默认3600 秒
	TimeoutPeriod *uint64 `json:"TimeoutPeriod,omitnil,omitempty" name:"TimeoutPeriod"`

	// 1标准模式（只报严重、高危）、2增强模式（报严重、高危、中危）、3严格模式（报严重、高、中、低、提示）
	EngineType *uint64 `json:"EngineType,omitnil,omitempty" name:"EngineType"`

	// 是否开启恶意进程查杀[0:未开启,1:开启]
	EnableMemShellScan *int64 `json:"EnableMemShellScan,omitnil,omitempty" name:"EnableMemShellScan"`
}

func (r *CreateScanMalwareSettingRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *CreateScanMalwareSettingRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "ScanPattern")
	delete(f, "HostType")
	delete(f, "QuuidList")
	delete(f, "TimeoutPeriod")
	delete(f, "EngineType")
	delete(f, "EnableMemShellScan")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "CreateScanMalwareSettingRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type CreateScanMalwareSettingResponseParams struct {
	// 任务id
	// 注意：此字段可能返回 null，表示取不到有效值。
	TaskId *uint64 `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type CreateScanMalwareSettingResponse struct {
	*tchttp.BaseResponse
	Response *CreateScanMalwareSettingResponseParams `json:"Response"`
}

func (r *CreateScanMalwareSettingResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *CreateScanMalwareSettingResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type CreateSearchLogRequestParams struct {
	// 搜索内容
	SearchContent *string `json:"SearchContent,omitnil,omitempty" name:"SearchContent"`
}

type CreateSearchLogRequest struct {
	*tchttp.BaseRequest
	
	// 搜索内容
	SearchContent *string `json:"SearchContent,omitnil,omitempty" name:"SearchContent"`
}

func (r *CreateSearchLogRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *CreateSearchLogRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "SearchContent")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "CreateSearchLogRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type CreateSearchLogResponseParams struct {
	// 0：成功，非0：失败
	Status *uint64 `json:"Status,omitnil,omitempty" name:"Status"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type CreateSearchLogResponse struct {
	*tchttp.BaseResponse
	Response *CreateSearchLogResponseParams `json:"Response"`
}

func (r *CreateSearchLogResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *CreateSearchLogResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type CreateSearchTemplateRequestParams struct {
	// 搜索模板
	SearchTemplate *SearchTemplate `json:"SearchTemplate,omitnil,omitempty" name:"SearchTemplate"`
}

type CreateSearchTemplateRequest struct {
	*tchttp.BaseRequest
	
	// 搜索模板
	SearchTemplate *SearchTemplate `json:"SearchTemplate,omitnil,omitempty" name:"SearchTemplate"`
}

func (r *CreateSearchTemplateRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *CreateSearchTemplateRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "SearchTemplate")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "CreateSearchTemplateRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type CreateSearchTemplateResponseParams struct {
	// 0：成功，非0：失败
	Status *uint64 `json:"Status,omitnil,omitempty" name:"Status"`

	// 失败原因
	Message *string `json:"Message,omitnil,omitempty" name:"Message"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type CreateSearchTemplateResponse struct {
	*tchttp.BaseResponse
	Response *CreateSearchTemplateResponseParams `json:"Response"`
}

func (r *CreateSearchTemplateResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *CreateSearchTemplateResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type CreateVulFixRequestParams struct {
	// 漏洞对应要修复的主机列表
	CreateVulFixTaskQuuids []*CreateVulFixTaskQuuids `json:"CreateVulFixTaskQuuids,omitnil,omitempty" name:"CreateVulFixTaskQuuids"`

	// 快照保存天数，  0 天表示不创建快照。24小时没有快照的主机必须要创建快照才能修复
	SaveDays *uint64 `json:"SaveDays,omitnil,omitempty" name:"SaveDays"`

	// 快照名称
	SnapshotName *string `json:"SnapshotName,omitnil,omitempty" name:"SnapshotName"`
}

type CreateVulFixRequest struct {
	*tchttp.BaseRequest
	
	// 漏洞对应要修复的主机列表
	CreateVulFixTaskQuuids []*CreateVulFixTaskQuuids `json:"CreateVulFixTaskQuuids,omitnil,omitempty" name:"CreateVulFixTaskQuuids"`

	// 快照保存天数，  0 天表示不创建快照。24小时没有快照的主机必须要创建快照才能修复
	SaveDays *uint64 `json:"SaveDays,omitnil,omitempty" name:"SaveDays"`

	// 快照名称
	SnapshotName *string `json:"SnapshotName,omitnil,omitempty" name:"SnapshotName"`
}

func (r *CreateVulFixRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *CreateVulFixRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "CreateVulFixTaskQuuids")
	delete(f, "SaveDays")
	delete(f, "SnapshotName")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "CreateVulFixRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type CreateVulFixResponseParams struct {
	// 任务id
	FixId *uint64 `json:"FixId,omitnil,omitempty" name:"FixId"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type CreateVulFixResponse struct {
	*tchttp.BaseResponse
	Response *CreateVulFixResponseParams `json:"Response"`
}

func (r *CreateVulFixResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *CreateVulFixResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type CreateVulFixTaskQuuids struct {
	// 漏洞id
	VulId *uint64 `json:"VulId,omitnil,omitempty" name:"VulId"`

	// 需要修复漏洞的主机，所有主机必须有VulId的这个漏洞且是待修复状态。
	Quuids []*string `json:"Quuids,omitnil,omitempty" name:"Quuids"`

	// 修复方式 0组件更新或者安装补丁,1禁用服务
	FixMethod *uint64 `json:"FixMethod,omitnil,omitempty" name:"FixMethod"`
}

// Predefined struct for user
type CreateWhiteListOrderRequestParams struct {
	// 授权类型
	LicenseType *uint64 `json:"LicenseType,omitnil,omitempty" name:"LicenseType"`

	// 授权数量,最小为1 最大99999
	LicenseNum *uint64 `json:"LicenseNum,omitnil,omitempty" name:"LicenseNum"`

	// 到期时间,最小为1
	Deadline *uint64 `json:"Deadline,omitnil,omitempty" name:"Deadline"`

	// 规则名称,大资产中心:asset_center
	RuleName *string `json:"RuleName,omitnil,omitempty" name:"RuleName"`

	// 订单类型, 1 试用 2 赠送 3 体验 4 SSL-证书赠送 5 cvm赠送
	SourceType *uint64 `json:"SourceType,omitnil,omitempty" name:"SourceType"`

	// 地域, 1 广州 9新加坡, 默认为 1. 非必要情况不要选9
	RegionId *uint64 `json:"RegionId,omitnil,omitempty" name:"RegionId"`

	// 额外参数,json字符串,包含ResourceId 资源ID,LicenseType 授权类型
	ExtraParam *string `json:"ExtraParam,omitnil,omitempty" name:"ExtraParam"`
}

type CreateWhiteListOrderRequest struct {
	*tchttp.BaseRequest
	
	// 授权类型
	LicenseType *uint64 `json:"LicenseType,omitnil,omitempty" name:"LicenseType"`

	// 授权数量,最小为1 最大99999
	LicenseNum *uint64 `json:"LicenseNum,omitnil,omitempty" name:"LicenseNum"`

	// 到期时间,最小为1
	Deadline *uint64 `json:"Deadline,omitnil,omitempty" name:"Deadline"`

	// 规则名称,大资产中心:asset_center
	RuleName *string `json:"RuleName,omitnil,omitempty" name:"RuleName"`

	// 订单类型, 1 试用 2 赠送 3 体验 4 SSL-证书赠送 5 cvm赠送
	SourceType *uint64 `json:"SourceType,omitnil,omitempty" name:"SourceType"`

	// 地域, 1 广州 9新加坡, 默认为 1. 非必要情况不要选9
	RegionId *uint64 `json:"RegionId,omitnil,omitempty" name:"RegionId"`

	// 额外参数,json字符串,包含ResourceId 资源ID,LicenseType 授权类型
	ExtraParam *string `json:"ExtraParam,omitnil,omitempty" name:"ExtraParam"`
}

func (r *CreateWhiteListOrderRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *CreateWhiteListOrderRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "LicenseType")
	delete(f, "LicenseNum")
	delete(f, "Deadline")
	delete(f, "RuleName")
	delete(f, "SourceType")
	delete(f, "RegionId")
	delete(f, "ExtraParam")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "CreateWhiteListOrderRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type CreateWhiteListOrderResponseParams struct {
	// 资源对象
	Resource *OrderResource `json:"Resource,omitnil,omitempty" name:"Resource"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type CreateWhiteListOrderResponse struct {
	*tchttp.BaseResponse
	Response *CreateWhiteListOrderResponseParams `json:"Response"`
}

func (r *CreateWhiteListOrderResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *CreateWhiteListOrderResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DefaultStrategyInfo struct {
	// 策略名
	StrategyName *string `json:"StrategyName,omitnil,omitempty" name:"StrategyName"`

	// 策略id
	StrategyId *uint64 `json:"StrategyId,omitnil,omitempty" name:"StrategyId"`
}

type DefendAttackLog struct {
	// 日志ID
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`

	// 客户端ID
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 来源IP
	SrcIp *string `json:"SrcIp,omitnil,omitempty" name:"SrcIp"`

	// 来源端口
	SrcPort *uint64 `json:"SrcPort,omitnil,omitempty" name:"SrcPort"`

	// 攻击方式
	HttpMethod *string `json:"HttpMethod,omitnil,omitempty" name:"HttpMethod"`

	// 攻击描述
	HttpCgi *string `json:"HttpCgi,omitnil,omitempty" name:"HttpCgi"`

	// 攻击参数
	HttpParam *string `json:"HttpParam,omitnil,omitempty" name:"HttpParam"`

	// 威胁类型
	VulType *string `json:"VulType,omitnil,omitempty" name:"VulType"`

	// 攻击时间
	CreatedAt *string `json:"CreatedAt,omitnil,omitempty" name:"CreatedAt"`

	// 目标服务器IP
	MachineIp *string `json:"MachineIp,omitnil,omitempty" name:"MachineIp"`

	// 目标服务器名称
	MachineName *string `json:"MachineName,omitnil,omitempty" name:"MachineName"`

	// 目标IP
	DstIp *string `json:"DstIp,omitnil,omitempty" name:"DstIp"`

	// 目标端口
	DstPort *uint64 `json:"DstPort,omitnil,omitempty" name:"DstPort"`

	// 攻击内容
	HttpContent *string `json:"HttpContent,omitnil,omitempty" name:"HttpContent"`

	// 主机额外信息
	// 注意：此字段可能返回 null，表示取不到有效值。
	MachineExtraInfo *MachineExtraInfo `json:"MachineExtraInfo,omitnil,omitempty" name:"MachineExtraInfo"`
}

// Predefined struct for user
type DeleteAllJavaMemShellsRequestParams struct {
	// 服务器quuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`
}

type DeleteAllJavaMemShellsRequest struct {
	*tchttp.BaseRequest
	
	// 服务器quuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`
}

func (r *DeleteAllJavaMemShellsRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DeleteAllJavaMemShellsRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Quuid")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DeleteAllJavaMemShellsRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DeleteAllJavaMemShellsResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DeleteAllJavaMemShellsResponse struct {
	*tchttp.BaseResponse
	Response *DeleteAllJavaMemShellsResponseParams `json:"Response"`
}

func (r *DeleteAllJavaMemShellsResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DeleteAllJavaMemShellsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DeleteBanWhiteListRequestParams struct {
	// 要删除的白名单ID列表 (最大100条)
	Ids []*uint64 `json:"Ids,omitnil,omitempty" name:"Ids"`
}

type DeleteBanWhiteListRequest struct {
	*tchttp.BaseRequest
	
	// 要删除的白名单ID列表 (最大100条)
	Ids []*uint64 `json:"Ids,omitnil,omitempty" name:"Ids"`
}

func (r *DeleteBanWhiteListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DeleteBanWhiteListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Ids")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DeleteBanWhiteListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DeleteBanWhiteListResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DeleteBanWhiteListResponse struct {
	*tchttp.BaseResponse
	Response *DeleteBanWhiteListResponseParams `json:"Response"`
}

func (r *DeleteBanWhiteListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DeleteBanWhiteListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DeleteBaselinePolicyRequestParams struct {
	// 策略Id
	PolicyIds []*int64 `json:"PolicyIds,omitnil,omitempty" name:"PolicyIds"`
}

type DeleteBaselinePolicyRequest struct {
	*tchttp.BaseRequest
	
	// 策略Id
	PolicyIds []*int64 `json:"PolicyIds,omitnil,omitempty" name:"PolicyIds"`
}

func (r *DeleteBaselinePolicyRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DeleteBaselinePolicyRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "PolicyIds")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DeleteBaselinePolicyRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DeleteBaselinePolicyResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DeleteBaselinePolicyResponse struct {
	*tchttp.BaseResponse
	Response *DeleteBaselinePolicyResponseParams `json:"Response"`
}

func (r *DeleteBaselinePolicyResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DeleteBaselinePolicyResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DeleteBaselineRuleIgnoreRequestParams struct {
	// 规则Id
	RuleIds []*int64 `json:"RuleIds,omitnil,omitempty" name:"RuleIds"`
}

type DeleteBaselineRuleIgnoreRequest struct {
	*tchttp.BaseRequest
	
	// 规则Id
	RuleIds []*int64 `json:"RuleIds,omitnil,omitempty" name:"RuleIds"`
}

func (r *DeleteBaselineRuleIgnoreRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DeleteBaselineRuleIgnoreRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "RuleIds")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DeleteBaselineRuleIgnoreRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DeleteBaselineRuleIgnoreResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DeleteBaselineRuleIgnoreResponse struct {
	*tchttp.BaseResponse
	Response *DeleteBaselineRuleIgnoreResponseParams `json:"Response"`
}

func (r *DeleteBaselineRuleIgnoreResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DeleteBaselineRuleIgnoreResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DeleteBaselineRuleRequestParams struct {
	// 规则Id
	RuleId *int64 `json:"RuleId,omitnil,omitempty" name:"RuleId"`
}

type DeleteBaselineRuleRequest struct {
	*tchttp.BaseRequest
	
	// 规则Id
	RuleId *int64 `json:"RuleId,omitnil,omitempty" name:"RuleId"`
}

func (r *DeleteBaselineRuleRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DeleteBaselineRuleRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "RuleId")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DeleteBaselineRuleRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DeleteBaselineRuleResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DeleteBaselineRuleResponse struct {
	*tchttp.BaseResponse
	Response *DeleteBaselineRuleResponseParams `json:"Response"`
}

func (r *DeleteBaselineRuleResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DeleteBaselineRuleResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DeleteBaselineStrategyRequestParams struct {
	// 基线策略id
	StrategyId *uint64 `json:"StrategyId,omitnil,omitempty" name:"StrategyId"`
}

type DeleteBaselineStrategyRequest struct {
	*tchttp.BaseRequest
	
	// 基线策略id
	StrategyId *uint64 `json:"StrategyId,omitnil,omitempty" name:"StrategyId"`
}

func (r *DeleteBaselineStrategyRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DeleteBaselineStrategyRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "StrategyId")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DeleteBaselineStrategyRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DeleteBaselineStrategyResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DeleteBaselineStrategyResponse struct {
	*tchttp.BaseResponse
	Response *DeleteBaselineStrategyResponseParams `json:"Response"`
}

func (r *DeleteBaselineStrategyResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DeleteBaselineStrategyResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DeleteBaselineWeakPasswordRequestParams struct {
	// 弱口令Id
	PasswordIds []*int64 `json:"PasswordIds,omitnil,omitempty" name:"PasswordIds"`
}

type DeleteBaselineWeakPasswordRequest struct {
	*tchttp.BaseRequest
	
	// 弱口令Id
	PasswordIds []*int64 `json:"PasswordIds,omitnil,omitempty" name:"PasswordIds"`
}

func (r *DeleteBaselineWeakPasswordRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DeleteBaselineWeakPasswordRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "PasswordIds")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DeleteBaselineWeakPasswordRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DeleteBaselineWeakPasswordResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DeleteBaselineWeakPasswordResponse struct {
	*tchttp.BaseResponse
	Response *DeleteBaselineWeakPasswordResponseParams `json:"Response"`
}

func (r *DeleteBaselineWeakPasswordResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DeleteBaselineWeakPasswordResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DeleteBashEventsRequestParams struct {
	// ID数组，最大100条。
	Ids []*uint64 `json:"Ids,omitnil,omitempty" name:"Ids"`
}

type DeleteBashEventsRequest struct {
	*tchttp.BaseRequest
	
	// ID数组，最大100条。
	Ids []*uint64 `json:"Ids,omitnil,omitempty" name:"Ids"`
}

func (r *DeleteBashEventsRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DeleteBashEventsRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Ids")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DeleteBashEventsRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DeleteBashEventsResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DeleteBashEventsResponse struct {
	*tchttp.BaseResponse
	Response *DeleteBashEventsResponseParams `json:"Response"`
}

func (r *DeleteBashEventsResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DeleteBashEventsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DeleteBashPoliciesRequestParams struct {
	// ID数组，最大100条。
	Ids []*uint64 `json:"Ids,omitnil,omitempty" name:"Ids"`
}

type DeleteBashPoliciesRequest struct {
	*tchttp.BaseRequest
	
	// ID数组，最大100条。
	Ids []*uint64 `json:"Ids,omitnil,omitempty" name:"Ids"`
}

func (r *DeleteBashPoliciesRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DeleteBashPoliciesRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Ids")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DeleteBashPoliciesRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DeleteBashPoliciesResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DeleteBashPoliciesResponse struct {
	*tchttp.BaseResponse
	Response *DeleteBashPoliciesResponseParams `json:"Response"`
}

func (r *DeleteBashPoliciesResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DeleteBashPoliciesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DeleteBashRulesRequestParams struct {
	// ID数组，最大100条。
	Ids []*uint64 `json:"Ids,omitnil,omitempty" name:"Ids"`
}

type DeleteBashRulesRequest struct {
	*tchttp.BaseRequest
	
	// ID数组，最大100条。
	Ids []*uint64 `json:"Ids,omitnil,omitempty" name:"Ids"`
}

func (r *DeleteBashRulesRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DeleteBashRulesRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Ids")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DeleteBashRulesRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DeleteBashRulesResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DeleteBashRulesResponse struct {
	*tchttp.BaseResponse
	Response *DeleteBashRulesResponseParams `json:"Response"`
}

func (r *DeleteBashRulesResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DeleteBashRulesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DeleteBruteAttacksRequestParams struct {
	// 暴力破解事件Id数组。(最大 100条)
	Ids []*uint64 `json:"Ids,omitnil,omitempty" name:"Ids"`
}

type DeleteBruteAttacksRequest struct {
	*tchttp.BaseRequest
	
	// 暴力破解事件Id数组。(最大 100条)
	Ids []*uint64 `json:"Ids,omitnil,omitempty" name:"Ids"`
}

func (r *DeleteBruteAttacksRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DeleteBruteAttacksRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Ids")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DeleteBruteAttacksRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DeleteBruteAttacksResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DeleteBruteAttacksResponse struct {
	*tchttp.BaseResponse
	Response *DeleteBruteAttacksResponseParams `json:"Response"`
}

func (r *DeleteBruteAttacksResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DeleteBruteAttacksResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DeleteLicenseRecordAllRequestParams struct {

}

type DeleteLicenseRecordAllRequest struct {
	*tchttp.BaseRequest
	
}

func (r *DeleteLicenseRecordAllRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DeleteLicenseRecordAllRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DeleteLicenseRecordAllRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DeleteLicenseRecordAllResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DeleteLicenseRecordAllResponse struct {
	*tchttp.BaseResponse
	Response *DeleteLicenseRecordAllResponseParams `json:"Response"`
}

func (r *DeleteLicenseRecordAllResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DeleteLicenseRecordAllResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DeleteLicenseRecordRequestParams struct {
	// 授权ID ,可以用授权订单列表获取.
	LicenseId *uint64 `json:"LicenseId,omitnil,omitempty" name:"LicenseId"`

	// 授权类型
	LicenseType *uint64 `json:"LicenseType,omitnil,omitempty" name:"LicenseType"`

	// 资源ID
	ResourceId *string `json:"ResourceId,omitnil,omitempty" name:"ResourceId"`
}

type DeleteLicenseRecordRequest struct {
	*tchttp.BaseRequest
	
	// 授权ID ,可以用授权订单列表获取.
	LicenseId *uint64 `json:"LicenseId,omitnil,omitempty" name:"LicenseId"`

	// 授权类型
	LicenseType *uint64 `json:"LicenseType,omitnil,omitempty" name:"LicenseType"`

	// 资源ID
	ResourceId *string `json:"ResourceId,omitnil,omitempty" name:"ResourceId"`
}

func (r *DeleteLicenseRecordRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DeleteLicenseRecordRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "LicenseId")
	delete(f, "LicenseType")
	delete(f, "ResourceId")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DeleteLicenseRecordRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DeleteLicenseRecordResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DeleteLicenseRecordResponse struct {
	*tchttp.BaseResponse
	Response *DeleteLicenseRecordResponseParams `json:"Response"`
}

func (r *DeleteLicenseRecordResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DeleteLicenseRecordResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DeleteLogExportRequestParams struct {
	// 日志导出ID
	ExportId *string `json:"ExportId,omitnil,omitempty" name:"ExportId"`
}

type DeleteLogExportRequest struct {
	*tchttp.BaseRequest
	
	// 日志导出ID
	ExportId *string `json:"ExportId,omitnil,omitempty" name:"ExportId"`
}

func (r *DeleteLogExportRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DeleteLogExportRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "ExportId")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DeleteLogExportRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DeleteLogExportResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DeleteLogExportResponse struct {
	*tchttp.BaseResponse
	Response *DeleteLogExportResponseParams `json:"Response"`
}

func (r *DeleteLogExportResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DeleteLogExportResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DeleteLoginWhiteListRequestParams struct {
	// 白名单ID (最大 100 条)
	Ids []*uint64 `json:"Ids,omitnil,omitempty" name:"Ids"`
}

type DeleteLoginWhiteListRequest struct {
	*tchttp.BaseRequest
	
	// 白名单ID (最大 100 条)
	Ids []*uint64 `json:"Ids,omitnil,omitempty" name:"Ids"`
}

func (r *DeleteLoginWhiteListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DeleteLoginWhiteListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Ids")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DeleteLoginWhiteListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DeleteLoginWhiteListResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DeleteLoginWhiteListResponse struct {
	*tchttp.BaseResponse
	Response *DeleteLoginWhiteListResponseParams `json:"Response"`
}

func (r *DeleteLoginWhiteListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DeleteLoginWhiteListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DeleteMachineClearHistoryRequestParams struct {
	// 需要删除的记录id值,最大长度100个
	Ids []*uint64 `json:"Ids,omitnil,omitempty" name:"Ids"`
}

type DeleteMachineClearHistoryRequest struct {
	*tchttp.BaseRequest
	
	// 需要删除的记录id值,最大长度100个
	Ids []*uint64 `json:"Ids,omitnil,omitempty" name:"Ids"`
}

func (r *DeleteMachineClearHistoryRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DeleteMachineClearHistoryRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Ids")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DeleteMachineClearHistoryRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DeleteMachineClearHistoryResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DeleteMachineClearHistoryResponse struct {
	*tchttp.BaseResponse
	Response *DeleteMachineClearHistoryResponseParams `json:"Response"`
}

func (r *DeleteMachineClearHistoryResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DeleteMachineClearHistoryResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DeleteMachineRequestParams struct {
	// 主机安全客户端Uuid。
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`
}

type DeleteMachineRequest struct {
	*tchttp.BaseRequest
	
	// 主机安全客户端Uuid。
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`
}

func (r *DeleteMachineRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DeleteMachineRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Uuid")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DeleteMachineRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DeleteMachineResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DeleteMachineResponse struct {
	*tchttp.BaseResponse
	Response *DeleteMachineResponseParams `json:"Response"`
}

func (r *DeleteMachineResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DeleteMachineResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DeleteMachineTagRequestParams struct {
	// 关联的标签ID
	Rid *uint64 `json:"Rid,omitnil,omitempty" name:"Rid"`
}

type DeleteMachineTagRequest struct {
	*tchttp.BaseRequest
	
	// 关联的标签ID
	Rid *uint64 `json:"Rid,omitnil,omitempty" name:"Rid"`
}

func (r *DeleteMachineTagRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DeleteMachineTagRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Rid")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DeleteMachineTagRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DeleteMachineTagResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DeleteMachineTagResponse struct {
	*tchttp.BaseResponse
	Response *DeleteMachineTagResponseParams `json:"Response"`
}

func (r *DeleteMachineTagResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DeleteMachineTagResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DeleteMaliciousRequestWhiteListRequestParams struct {
	// 白名单id (最大100条)
	Ids []*uint64 `json:"Ids,omitnil,omitempty" name:"Ids"`
}

type DeleteMaliciousRequestWhiteListRequest struct {
	*tchttp.BaseRequest
	
	// 白名单id (最大100条)
	Ids []*uint64 `json:"Ids,omitnil,omitempty" name:"Ids"`
}

func (r *DeleteMaliciousRequestWhiteListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DeleteMaliciousRequestWhiteListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Ids")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DeleteMaliciousRequestWhiteListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DeleteMaliciousRequestWhiteListResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DeleteMaliciousRequestWhiteListResponse struct {
	*tchttp.BaseResponse
	Response *DeleteMaliciousRequestWhiteListResponseParams `json:"Response"`
}

func (r *DeleteMaliciousRequestWhiteListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DeleteMaliciousRequestWhiteListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DeleteMaliciousRequestsRequestParams struct {
	// 恶意请求记录ID数组，(最大100条)
	Ids []*uint64 `json:"Ids,omitnil,omitempty" name:"Ids"`
}

type DeleteMaliciousRequestsRequest struct {
	*tchttp.BaseRequest
	
	// 恶意请求记录ID数组，(最大100条)
	Ids []*uint64 `json:"Ids,omitnil,omitempty" name:"Ids"`
}

func (r *DeleteMaliciousRequestsRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DeleteMaliciousRequestsRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Ids")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DeleteMaliciousRequestsRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DeleteMaliciousRequestsResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DeleteMaliciousRequestsResponse struct {
	*tchttp.BaseResponse
	Response *DeleteMaliciousRequestsResponseParams `json:"Response"`
}

func (r *DeleteMaliciousRequestsResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DeleteMaliciousRequestsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DeleteMalwareScanTaskRequestParams struct {

}

type DeleteMalwareScanTaskRequest struct {
	*tchttp.BaseRequest
	
}

func (r *DeleteMalwareScanTaskRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DeleteMalwareScanTaskRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DeleteMalwareScanTaskRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DeleteMalwareScanTaskResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DeleteMalwareScanTaskResponse struct {
	*tchttp.BaseResponse
	Response *DeleteMalwareScanTaskResponseParams `json:"Response"`
}

func (r *DeleteMalwareScanTaskResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DeleteMalwareScanTaskResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DeleteMalwareWhiteListRequestParams struct {
	// ID数组，最大100条。
	Ids []*uint64 `json:"Ids,omitnil,omitempty" name:"Ids"`
}

type DeleteMalwareWhiteListRequest struct {
	*tchttp.BaseRequest
	
	// ID数组，最大100条。
	Ids []*uint64 `json:"Ids,omitnil,omitempty" name:"Ids"`
}

func (r *DeleteMalwareWhiteListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DeleteMalwareWhiteListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Ids")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DeleteMalwareWhiteListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DeleteMalwareWhiteListResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DeleteMalwareWhiteListResponse struct {
	*tchttp.BaseResponse
	Response *DeleteMalwareWhiteListResponseParams `json:"Response"`
}

func (r *DeleteMalwareWhiteListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DeleteMalwareWhiteListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DeleteMalwaresRequestParams struct {
	// 木马记录ID数组 (最大100条)
	Ids []*uint64 `json:"Ids,omitnil,omitempty" name:"Ids"`

	// 是否删除全部
	All *bool `json:"All,omitnil,omitempty" name:"All"`
}

type DeleteMalwaresRequest struct {
	*tchttp.BaseRequest
	
	// 木马记录ID数组 (最大100条)
	Ids []*uint64 `json:"Ids,omitnil,omitempty" name:"Ids"`

	// 是否删除全部
	All *bool `json:"All,omitnil,omitempty" name:"All"`
}

func (r *DeleteMalwaresRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DeleteMalwaresRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Ids")
	delete(f, "All")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DeleteMalwaresRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DeleteMalwaresResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DeleteMalwaresResponse struct {
	*tchttp.BaseResponse
	Response *DeleteMalwaresResponseParams `json:"Response"`
}

func (r *DeleteMalwaresResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DeleteMalwaresResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DeleteNetAttackWhiteListRequestParams struct {
	// ID数组，最大100条。
	Ids []*uint64 `json:"Ids,omitnil,omitempty" name:"Ids"`
}

type DeleteNetAttackWhiteListRequest struct {
	*tchttp.BaseRequest
	
	// ID数组，最大100条。
	Ids []*uint64 `json:"Ids,omitnil,omitempty" name:"Ids"`
}

func (r *DeleteNetAttackWhiteListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DeleteNetAttackWhiteListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Ids")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DeleteNetAttackWhiteListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DeleteNetAttackWhiteListResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DeleteNetAttackWhiteListResponse struct {
	*tchttp.BaseResponse
	Response *DeleteNetAttackWhiteListResponseParams `json:"Response"`
}

func (r *DeleteNetAttackWhiteListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DeleteNetAttackWhiteListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DeleteNonlocalLoginPlacesRequestParams struct {
	// 删除异地登录事件的方式，可选值："Ids"、"Ip"、"All"，默认为Ids
	DelType *string `json:"DelType,omitnil,omitempty" name:"DelType"`

	// 异地登录事件ID数组。DelType为Ids或DelType未填时此项必填
	Ids []*uint64 `json:"Ids,omitnil,omitempty" name:"Ids"`

	// 异地登录事件的Ip。DelType为Ip时必填
	Ip []*string `json:"Ip,omitnil,omitempty" name:"Ip"`

	// 主机Uuid
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`
}

type DeleteNonlocalLoginPlacesRequest struct {
	*tchttp.BaseRequest
	
	// 删除异地登录事件的方式，可选值："Ids"、"Ip"、"All"，默认为Ids
	DelType *string `json:"DelType,omitnil,omitempty" name:"DelType"`

	// 异地登录事件ID数组。DelType为Ids或DelType未填时此项必填
	Ids []*uint64 `json:"Ids,omitnil,omitempty" name:"Ids"`

	// 异地登录事件的Ip。DelType为Ip时必填
	Ip []*string `json:"Ip,omitnil,omitempty" name:"Ip"`

	// 主机Uuid
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`
}

func (r *DeleteNonlocalLoginPlacesRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DeleteNonlocalLoginPlacesRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "DelType")
	delete(f, "Ids")
	delete(f, "Ip")
	delete(f, "Uuid")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DeleteNonlocalLoginPlacesRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DeleteNonlocalLoginPlacesResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DeleteNonlocalLoginPlacesResponse struct {
	*tchttp.BaseResponse
	Response *DeleteNonlocalLoginPlacesResponseParams `json:"Response"`
}

func (r *DeleteNonlocalLoginPlacesResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DeleteNonlocalLoginPlacesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DeletePrivilegeEventsRequestParams struct {
	// ID数组. (最大100条)
	Ids []*uint64 `json:"Ids,omitnil,omitempty" name:"Ids"`

	// 是否删除全部
	All *bool `json:"All,omitnil,omitempty" name:"All"`
}

type DeletePrivilegeEventsRequest struct {
	*tchttp.BaseRequest
	
	// ID数组. (最大100条)
	Ids []*uint64 `json:"Ids,omitnil,omitempty" name:"Ids"`

	// 是否删除全部
	All *bool `json:"All,omitnil,omitempty" name:"All"`
}

func (r *DeletePrivilegeEventsRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DeletePrivilegeEventsRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Ids")
	delete(f, "All")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DeletePrivilegeEventsRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DeletePrivilegeEventsResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DeletePrivilegeEventsResponse struct {
	*tchttp.BaseResponse
	Response *DeletePrivilegeEventsResponseParams `json:"Response"`
}

func (r *DeletePrivilegeEventsResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DeletePrivilegeEventsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DeletePrivilegeRulesRequestParams struct {
	// ID数组，最大100条。
	Ids []*uint64 `json:"Ids,omitnil,omitempty" name:"Ids"`
}

type DeletePrivilegeRulesRequest struct {
	*tchttp.BaseRequest
	
	// ID数组，最大100条。
	Ids []*uint64 `json:"Ids,omitnil,omitempty" name:"Ids"`
}

func (r *DeletePrivilegeRulesRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DeletePrivilegeRulesRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Ids")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DeletePrivilegeRulesRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DeletePrivilegeRulesResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DeletePrivilegeRulesResponse struct {
	*tchttp.BaseResponse
	Response *DeletePrivilegeRulesResponseParams `json:"Response"`
}

func (r *DeletePrivilegeRulesResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DeletePrivilegeRulesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DeleteProtectDirRequestParams struct {
	// 删除的目录ID 最大100条
	Ids []*string `json:"Ids,omitnil,omitempty" name:"Ids"`
}

type DeleteProtectDirRequest struct {
	*tchttp.BaseRequest
	
	// 删除的目录ID 最大100条
	Ids []*string `json:"Ids,omitnil,omitempty" name:"Ids"`
}

func (r *DeleteProtectDirRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DeleteProtectDirRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Ids")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DeleteProtectDirRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DeleteProtectDirResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DeleteProtectDirResponse struct {
	*tchttp.BaseResponse
	Response *DeleteProtectDirResponseParams `json:"Response"`
}

func (r *DeleteProtectDirResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DeleteProtectDirResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DeleteReverseShellEventsRequestParams struct {
	// ID数组. (最大100条)
	Ids []*uint64 `json:"Ids,omitnil,omitempty" name:"Ids"`
}

type DeleteReverseShellEventsRequest struct {
	*tchttp.BaseRequest
	
	// ID数组. (最大100条)
	Ids []*uint64 `json:"Ids,omitnil,omitempty" name:"Ids"`
}

func (r *DeleteReverseShellEventsRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DeleteReverseShellEventsRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Ids")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DeleteReverseShellEventsRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DeleteReverseShellEventsResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DeleteReverseShellEventsResponse struct {
	*tchttp.BaseResponse
	Response *DeleteReverseShellEventsResponseParams `json:"Response"`
}

func (r *DeleteReverseShellEventsResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DeleteReverseShellEventsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DeleteReverseShellRulesRequestParams struct {
	// ID数组. (最大100条)
	Ids []*uint64 `json:"Ids,omitnil,omitempty" name:"Ids"`
}

type DeleteReverseShellRulesRequest struct {
	*tchttp.BaseRequest
	
	// ID数组. (最大100条)
	Ids []*uint64 `json:"Ids,omitnil,omitempty" name:"Ids"`
}

func (r *DeleteReverseShellRulesRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DeleteReverseShellRulesRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Ids")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DeleteReverseShellRulesRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DeleteReverseShellRulesResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DeleteReverseShellRulesResponse struct {
	*tchttp.BaseResponse
	Response *DeleteReverseShellRulesResponseParams `json:"Response"`
}

func (r *DeleteReverseShellRulesResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DeleteReverseShellRulesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DeleteRiskDnsEventRequestParams struct {
	// 恶意请求记录ID数组，(最大100条), 为空时全部删除
	Ids []*int64 `json:"Ids,omitnil,omitempty" name:"Ids"`
}

type DeleteRiskDnsEventRequest struct {
	*tchttp.BaseRequest
	
	// 恶意请求记录ID数组，(最大100条), 为空时全部删除
	Ids []*int64 `json:"Ids,omitnil,omitempty" name:"Ids"`
}

func (r *DeleteRiskDnsEventRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DeleteRiskDnsEventRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Ids")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DeleteRiskDnsEventRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DeleteRiskDnsEventResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DeleteRiskDnsEventResponse struct {
	*tchttp.BaseResponse
	Response *DeleteRiskDnsEventResponseParams `json:"Response"`
}

func (r *DeleteRiskDnsEventResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DeleteRiskDnsEventResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DeleteRiskDnsPolicyRequestParams struct {
	// 策略ID
	PolicyIds []*int64 `json:"PolicyIds,omitnil,omitempty" name:"PolicyIds"`
}

type DeleteRiskDnsPolicyRequest struct {
	*tchttp.BaseRequest
	
	// 策略ID
	PolicyIds []*int64 `json:"PolicyIds,omitnil,omitempty" name:"PolicyIds"`
}

func (r *DeleteRiskDnsPolicyRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DeleteRiskDnsPolicyRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "PolicyIds")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DeleteRiskDnsPolicyRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DeleteRiskDnsPolicyResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DeleteRiskDnsPolicyResponse struct {
	*tchttp.BaseResponse
	Response *DeleteRiskDnsPolicyResponseParams `json:"Response"`
}

func (r *DeleteRiskDnsPolicyResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DeleteRiskDnsPolicyResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DeleteScanTaskRequestParams struct {
	// 任务Id
	TaskId *uint64 `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// 模块类型 当前提供 Malware 木马 , Vul 漏洞 , Baseline 基线
	ModuleType *string `json:"ModuleType,omitnil,omitempty" name:"ModuleType"`

	// 自选服务器时生效，主机quuid的string数组
	QuuidList []*string `json:"QuuidList,omitnil,omitempty" name:"QuuidList"`
}

type DeleteScanTaskRequest struct {
	*tchttp.BaseRequest
	
	// 任务Id
	TaskId *uint64 `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// 模块类型 当前提供 Malware 木马 , Vul 漏洞 , Baseline 基线
	ModuleType *string `json:"ModuleType,omitnil,omitempty" name:"ModuleType"`

	// 自选服务器时生效，主机quuid的string数组
	QuuidList []*string `json:"QuuidList,omitnil,omitempty" name:"QuuidList"`
}

func (r *DeleteScanTaskRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DeleteScanTaskRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "TaskId")
	delete(f, "ModuleType")
	delete(f, "QuuidList")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DeleteScanTaskRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DeleteScanTaskResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DeleteScanTaskResponse struct {
	*tchttp.BaseResponse
	Response *DeleteScanTaskResponseParams `json:"Response"`
}

func (r *DeleteScanTaskResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DeleteScanTaskResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DeleteSearchTemplateRequestParams struct {
	// 模板ID
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`
}

type DeleteSearchTemplateRequest struct {
	*tchttp.BaseRequest
	
	// 模板ID
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`
}

func (r *DeleteSearchTemplateRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DeleteSearchTemplateRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Id")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DeleteSearchTemplateRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DeleteSearchTemplateResponseParams struct {
	// 0：成功，非0：失败
	Status *uint64 `json:"Status,omitnil,omitempty" name:"Status"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DeleteSearchTemplateResponse struct {
	*tchttp.BaseResponse
	Response *DeleteSearchTemplateResponseParams `json:"Response"`
}

func (r *DeleteSearchTemplateResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DeleteSearchTemplateResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DeleteTagsRequestParams struct {
	// 标签ID (最大100 条)
	Ids []*uint64 `json:"Ids,omitnil,omitempty" name:"Ids"`
}

type DeleteTagsRequest struct {
	*tchttp.BaseRequest
	
	// 标签ID (最大100 条)
	Ids []*uint64 `json:"Ids,omitnil,omitempty" name:"Ids"`
}

func (r *DeleteTagsRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DeleteTagsRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Ids")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DeleteTagsRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DeleteTagsResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DeleteTagsResponse struct {
	*tchttp.BaseResponse
	Response *DeleteTagsResponseParams `json:"Response"`
}

func (r *DeleteTagsResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DeleteTagsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DeleteWebHookPolicyRequestParams struct {
	// id列表
	Ids []*int64 `json:"Ids,omitnil,omitempty" name:"Ids"`
}

type DeleteWebHookPolicyRequest struct {
	*tchttp.BaseRequest
	
	// id列表
	Ids []*int64 `json:"Ids,omitnil,omitempty" name:"Ids"`
}

func (r *DeleteWebHookPolicyRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DeleteWebHookPolicyRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Ids")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DeleteWebHookPolicyRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DeleteWebHookPolicyResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DeleteWebHookPolicyResponse struct {
	*tchttp.BaseResponse
	Response *DeleteWebHookPolicyResponseParams `json:"Response"`
}

func (r *DeleteWebHookPolicyResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DeleteWebHookPolicyResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DeleteWebHookReceiverRequestParams struct {
	// id数组
	Ids []*int64 `json:"Ids,omitnil,omitempty" name:"Ids"`
}

type DeleteWebHookReceiverRequest struct {
	*tchttp.BaseRequest
	
	// id数组
	Ids []*int64 `json:"Ids,omitnil,omitempty" name:"Ids"`
}

func (r *DeleteWebHookReceiverRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DeleteWebHookReceiverRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Ids")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DeleteWebHookReceiverRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DeleteWebHookReceiverResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DeleteWebHookReceiverResponse struct {
	*tchttp.BaseResponse
	Response *DeleteWebHookReceiverResponseParams `json:"Response"`
}

func (r *DeleteWebHookReceiverResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DeleteWebHookReceiverResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DeleteWebHookRuleRequestParams struct {
	// 规则Id列表
	Ids []*int64 `json:"Ids,omitnil,omitempty" name:"Ids"`
}

type DeleteWebHookRuleRequest struct {
	*tchttp.BaseRequest
	
	// 规则Id列表
	Ids []*int64 `json:"Ids,omitnil,omitempty" name:"Ids"`
}

func (r *DeleteWebHookRuleRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DeleteWebHookRuleRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Ids")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DeleteWebHookRuleRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DeleteWebHookRuleResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DeleteWebHookRuleResponse struct {
	*tchttp.BaseResponse
	Response *DeleteWebHookRuleResponseParams `json:"Response"`
}

func (r *DeleteWebHookRuleResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DeleteWebHookRuleResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DeleteWebPageEventLogRequestParams struct {

}

type DeleteWebPageEventLogRequest struct {
	*tchttp.BaseRequest
	
}

func (r *DeleteWebPageEventLogRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DeleteWebPageEventLogRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DeleteWebPageEventLogRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DeleteWebPageEventLogResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DeleteWebPageEventLogResponse struct {
	*tchttp.BaseResponse
	Response *DeleteWebPageEventLogResponseParams `json:"Response"`
}

func (r *DeleteWebPageEventLogResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DeleteWebPageEventLogResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DeliverTypeDetails struct {
	// 安全模块类型 1: 入侵检测 2: 漏洞管理 3: 基线管理 4: 高级防御 5:客户端相关 6: 资产指纹 7 主机列表 8 客户端上报
	SecurityType *uint64 `json:"SecurityType,omitnil,omitempty" name:"SecurityType"`

	// 安全模块下的日志类型
	LogType []*int64 `json:"LogType,omitnil,omitempty" name:"LogType"`

	// 主题ID
	TopicId *string `json:"TopicId,omitnil,omitempty" name:"TopicId"`

	// 主题名
	TopicName *string `json:"TopicName,omitnil,omitempty" name:"TopicName"`

	// 投递开关 0关闭 1开启
	Switch *uint64 `json:"Switch,omitnil,omitempty" name:"Switch"`

	// 投递状态，0未开启 1正常 2异常
	Status *uint64 `json:"Status,omitnil,omitempty" name:"Status"`

	// 错误信息
	ErrInfo *string `json:"ErrInfo,omitnil,omitempty" name:"ErrInfo"`

	// 最近一次状态上报时间戳
	StatusTime *int64 `json:"StatusTime,omitnil,omitempty" name:"StatusTime"`

	// 日志集名
	LogName *string `json:"LogName,omitnil,omitempty" name:"LogName"`

	// 日志集ID
	LogSetId *string `json:"LogSetId,omitnil,omitempty" name:"LogSetId"`

	// 日志集所在地域
	Region *string `json:"Region,omitnil,omitempty" name:"Region"`
}

// Predefined struct for user
type DescribeABTestConfigRequestParams struct {
	// 灰度项目名称
	ProjectName *string `json:"ProjectName,omitnil,omitempty" name:"ProjectName"`
}

type DescribeABTestConfigRequest struct {
	*tchttp.BaseRequest
	
	// 灰度项目名称
	ProjectName *string `json:"ProjectName,omitnil,omitempty" name:"ProjectName"`
}

func (r *DescribeABTestConfigRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeABTestConfigRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "ProjectName")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeABTestConfigRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeABTestConfigResponseParams struct {
	// 灰度项目配置
	Config []*ABTestConfig `json:"Config,omitnil,omitempty" name:"Config"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeABTestConfigResponse struct {
	*tchttp.BaseResponse
	Response *DescribeABTestConfigResponseParams `json:"Response"`
}

func (r *DescribeABTestConfigResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeABTestConfigResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAESKeyRequestParams struct {

}

type DescribeAESKeyRequest struct {
	*tchttp.BaseRequest
	
}

func (r *DescribeAESKeyRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAESKeyRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeAESKeyRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAESKeyResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeAESKeyResponse struct {
	*tchttp.BaseResponse
	Response *DescribeAESKeyResponseParams `json:"Response"`
}

func (r *DescribeAESKeyResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAESKeyResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAccountStatisticsRequestParams struct {
	// 返回数量，默认为10，最大值为100。
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 过滤条件。
	// <li>Username - String - 是否必填：否 - 帐号用户名</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`
}

type DescribeAccountStatisticsRequest struct {
	*tchttp.BaseRequest
	
	// 返回数量，默认为10，最大值为100。
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 过滤条件。
	// <li>Username - String - 是否必填：否 - 帐号用户名</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`
}

func (r *DescribeAccountStatisticsRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAccountStatisticsRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Limit")
	delete(f, "Offset")
	delete(f, "Filters")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeAccountStatisticsRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAccountStatisticsResponseParams struct {
	// 帐号统计列表记录总数。
	TotalCount *uint64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// 帐号统计列表。
	AccountStatistics []*AccountStatistics `json:"AccountStatistics,omitnil,omitempty" name:"AccountStatistics"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeAccountStatisticsResponse struct {
	*tchttp.BaseResponse
	Response *DescribeAccountStatisticsResponseParams `json:"Response"`
}

func (r *DescribeAccountStatisticsResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAccountStatisticsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAgentInstallCommandRequestParams struct {
	// 是否腾讯云
	IsCloud *bool `json:"IsCloud,omitnil,omitempty" name:"IsCloud"`

	// 网络类型：basic-基础网络，private-VPC, public-公网，direct-专线
	NetType *string `json:"NetType,omitnil,omitempty" name:"NetType"`

	// 地域标示, NetType=direct时必填
	RegionCode *string `json:"RegionCode,omitnil,omitempty" name:"RegionCode"`

	// VpcId, NetType=direct时必填
	VpcId *string `json:"VpcId,omitnil,omitempty" name:"VpcId"`

	// 标签ID列表，IsCloud=false时才会生效
	TagIds []*uint64 `json:"TagIds,omitnil,omitempty" name:"TagIds"`

	// 命令有效期，非腾讯云时必填
	ExpireDate *string `json:"ExpireDate,omitnil,omitempty" name:"ExpireDate"`

	// 代理方式接入的vip
	Vip *string `json:"Vip,omitnil,omitempty" name:"Vip"`
}

type DescribeAgentInstallCommandRequest struct {
	*tchttp.BaseRequest
	
	// 是否腾讯云
	IsCloud *bool `json:"IsCloud,omitnil,omitempty" name:"IsCloud"`

	// 网络类型：basic-基础网络，private-VPC, public-公网，direct-专线
	NetType *string `json:"NetType,omitnil,omitempty" name:"NetType"`

	// 地域标示, NetType=direct时必填
	RegionCode *string `json:"RegionCode,omitnil,omitempty" name:"RegionCode"`

	// VpcId, NetType=direct时必填
	VpcId *string `json:"VpcId,omitnil,omitempty" name:"VpcId"`

	// 标签ID列表，IsCloud=false时才会生效
	TagIds []*uint64 `json:"TagIds,omitnil,omitempty" name:"TagIds"`

	// 命令有效期，非腾讯云时必填
	ExpireDate *string `json:"ExpireDate,omitnil,omitempty" name:"ExpireDate"`

	// 代理方式接入的vip
	Vip *string `json:"Vip,omitnil,omitempty" name:"Vip"`
}

func (r *DescribeAgentInstallCommandRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAgentInstallCommandRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "IsCloud")
	delete(f, "NetType")
	delete(f, "RegionCode")
	delete(f, "VpcId")
	delete(f, "TagIds")
	delete(f, "ExpireDate")
	delete(f, "Vip")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeAgentInstallCommandRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAgentInstallCommandResponseParams struct {
	// linux系统安装命令
	LinuxCommand *string `json:"LinuxCommand,omitnil,omitempty" name:"LinuxCommand"`

	// windows系统安装命令（windows2008及以上）
	WindowsCommand *string `json:"WindowsCommand,omitnil,omitempty" name:"WindowsCommand"`

	// windows系统安装命令第一步（windows2003）
	WindowsStepOne *string `json:"WindowsStepOne,omitnil,omitempty" name:"WindowsStepOne"`

	// windows系统安装命令第二步（windows2003）
	WindowsStepTwo *string `json:"WindowsStepTwo,omitnil,omitempty" name:"WindowsStepTwo"`

	// windows版agent下载链接
	WindowsDownloadUrl *string `json:"WindowsDownloadUrl,omitnil,omitempty" name:"WindowsDownloadUrl"`

	// Arm安装命令
	// 注意：此字段可能返回 null，表示取不到有效值。
	ARMCommand *string `json:"ARMCommand,omitnil,omitempty" name:"ARMCommand"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeAgentInstallCommandResponse struct {
	*tchttp.BaseResponse
	Response *DescribeAgentInstallCommandResponseParams `json:"Response"`
}

func (r *DescribeAgentInstallCommandResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAgentInstallCommandResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAgentInstallationTokenRequestParams struct {
	// token 过期时间
	ExpireDate *string `json:"ExpireDate,omitnil,omitempty" name:"ExpireDate"`
}

type DescribeAgentInstallationTokenRequest struct {
	*tchttp.BaseRequest
	
	// token 过期时间
	ExpireDate *string `json:"ExpireDate,omitnil,omitempty" name:"ExpireDate"`
}

func (r *DescribeAgentInstallationTokenRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAgentInstallationTokenRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "ExpireDate")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeAgentInstallationTokenRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAgentInstallationTokenResponseParams struct {
	// 安装命令token
	Token *string `json:"Token,omitnil,omitempty" name:"Token"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeAgentInstallationTokenResponse struct {
	*tchttp.BaseResponse
	Response *DescribeAgentInstallationTokenResponseParams `json:"Response"`
}

func (r *DescribeAgentInstallationTokenResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAgentInstallationTokenResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAlarmIncidentNodesRequestParams struct {
	// 机器uuid
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 告警vid
	AlarmVid *string `json:"AlarmVid,omitnil,omitempty" name:"AlarmVid"`

	// 告警时间
	AlarmTime *int64 `json:"AlarmTime,omitnil,omitempty" name:"AlarmTime"`

	// 告警来源表ID
	TableId *int64 `json:"TableId,omitnil,omitempty" name:"TableId"`
}

type DescribeAlarmIncidentNodesRequest struct {
	*tchttp.BaseRequest
	
	// 机器uuid
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 告警vid
	AlarmVid *string `json:"AlarmVid,omitnil,omitempty" name:"AlarmVid"`

	// 告警时间
	AlarmTime *int64 `json:"AlarmTime,omitnil,omitempty" name:"AlarmTime"`

	// 告警来源表ID
	TableId *int64 `json:"TableId,omitnil,omitempty" name:"TableId"`
}

func (r *DescribeAlarmIncidentNodesRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAlarmIncidentNodesRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Uuid")
	delete(f, "AlarmVid")
	delete(f, "AlarmTime")
	delete(f, "TableId")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeAlarmIncidentNodesRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAlarmIncidentNodesResponseParams struct {
	// 告警点所在事件的所有节点信息,可能包含多事件
	// 注意：此字段可能返回 null，表示取不到有效值。
	IncidentNodes []*IncidentVertexInfo `json:"IncidentNodes,omitnil,omitempty" name:"IncidentNodes"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeAlarmIncidentNodesResponse struct {
	*tchttp.BaseResponse
	Response *DescribeAlarmIncidentNodesResponseParams `json:"Response"`
}

func (r *DescribeAlarmIncidentNodesResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAlarmIncidentNodesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAlarmVertexIdRequestParams struct {
	// 机器uuid
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 开始时间戳
	StartTime *int64 `json:"StartTime,omitnil,omitempty" name:"StartTime"`

	// 结束时间戳
	EndTime *int64 `json:"EndTime,omitnil,omitempty" name:"EndTime"`
}

type DescribeAlarmVertexIdRequest struct {
	*tchttp.BaseRequest
	
	// 机器uuid
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 开始时间戳
	StartTime *int64 `json:"StartTime,omitnil,omitempty" name:"StartTime"`

	// 结束时间戳
	EndTime *int64 `json:"EndTime,omitnil,omitempty" name:"EndTime"`
}

func (r *DescribeAlarmVertexIdRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAlarmVertexIdRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Uuid")
	delete(f, "StartTime")
	delete(f, "EndTime")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeAlarmVertexIdRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAlarmVertexIdResponseParams struct {
	// 告警点id列表
	// 注意：此字段可能返回 null，表示取不到有效值。
	AlarmVertexIds []*string `json:"AlarmVertexIds,omitnil,omitempty" name:"AlarmVertexIds"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeAlarmVertexIdResponse struct {
	*tchttp.BaseResponse
	Response *DescribeAlarmVertexIdResponseParams `json:"Response"`
}

func (r *DescribeAlarmVertexIdResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAlarmVertexIdResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAssetAppCountRequestParams struct {
	// 搜索条件：搜索返回所有软件名包含Name的进程列表
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`
}

type DescribeAssetAppCountRequest struct {
	*tchttp.BaseRequest
	
	// 搜索条件：搜索返回所有软件名包含Name的进程列表
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`
}

func (r *DescribeAssetAppCountRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAssetAppCountRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Name")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeAssetAppCountRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAssetAppCountResponseParams struct {
	// 各软件应用数量
	// 注意：此字段可能返回 null，表示取不到有效值。
	Apps []*AssetKeyVal `json:"Apps,omitnil,omitempty" name:"Apps"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeAssetAppCountResponse struct {
	*tchttp.BaseResponse
	Response *DescribeAssetAppCountResponseParams `json:"Response"`
}

func (r *DescribeAssetAppCountResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAssetAppCountResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAssetAppListRequestParams struct {
	// 查询指定Quuid主机的信息
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 过滤条件。
	// <li>AppName- string - 是否必填：否 - 应用名搜索</li>
	// <li>IP - String - 是否必填：否 - 主机ip</li>
	// <li>MachineName - String - 是否必填：否 - 主机名称</li>
	// <li>InstanceID - string - 是否必填：否 - 实例ID</li>
	// <li>Type - int - 是否必填：否 - 类型	: 仅linux
	// 0: 全部
	// 1: 运维
	// 2 : 数据库
	// 3 : 安全
	// 4 : 可疑应用
	// 5 : 系统架构
	// 6 : 系统应用
	// 7 : WEB服务
	// 99:其他</li>
	// <li>OsType - uint64 - 是否必填：否 - windows/linux</li>
	// <li>Os -String 是否必填: 否 - 操作系统( DescribeMachineOsList 接口 值 )</li>
	Filters []*AssetFilters `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 需要返回的数量，默认为10，最大值为100
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 排序方式，asc升序 或 desc降序
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 排序方式：[FirstTime|ProcessCount]
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

type DescribeAssetAppListRequest struct {
	*tchttp.BaseRequest
	
	// 查询指定Quuid主机的信息
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 过滤条件。
	// <li>AppName- string - 是否必填：否 - 应用名搜索</li>
	// <li>IP - String - 是否必填：否 - 主机ip</li>
	// <li>MachineName - String - 是否必填：否 - 主机名称</li>
	// <li>InstanceID - string - 是否必填：否 - 实例ID</li>
	// <li>Type - int - 是否必填：否 - 类型	: 仅linux
	// 0: 全部
	// 1: 运维
	// 2 : 数据库
	// 3 : 安全
	// 4 : 可疑应用
	// 5 : 系统架构
	// 6 : 系统应用
	// 7 : WEB服务
	// 99:其他</li>
	// <li>OsType - uint64 - 是否必填：否 - windows/linux</li>
	// <li>Os -String 是否必填: 否 - 操作系统( DescribeMachineOsList 接口 值 )</li>
	Filters []*AssetFilters `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 需要返回的数量，默认为10，最大值为100
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 排序方式，asc升序 或 desc降序
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 排序方式：[FirstTime|ProcessCount]
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

func (r *DescribeAssetAppListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAssetAppListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Quuid")
	delete(f, "Filters")
	delete(f, "Limit")
	delete(f, "Offset")
	delete(f, "Order")
	delete(f, "By")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeAssetAppListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAssetAppListResponseParams struct {
	// 应用列表
	// 注意：此字段可能返回 null，表示取不到有效值。
	Apps []*AssetAppBaseInfo `json:"Apps,omitnil,omitempty" name:"Apps"`

	// 总数量
	Total *uint64 `json:"Total,omitnil,omitempty" name:"Total"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeAssetAppListResponse struct {
	*tchttp.BaseResponse
	Response *DescribeAssetAppListResponseParams `json:"Response"`
}

func (r *DescribeAssetAppListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAssetAppListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAssetAppProcessListRequestParams struct {
	// 主机Quuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 主机Uuid
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// App名
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 需要返回的数量，默认为10，最大值为100
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`
}

type DescribeAssetAppProcessListRequest struct {
	*tchttp.BaseRequest
	
	// 主机Quuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 主机Uuid
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// App名
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 需要返回的数量，默认为10，最大值为100
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`
}

func (r *DescribeAssetAppProcessListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAssetAppProcessListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Quuid")
	delete(f, "Uuid")
	delete(f, "Name")
	delete(f, "Offset")
	delete(f, "Limit")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeAssetAppProcessListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAssetAppProcessListResponseParams struct {
	// 进程列表
	// 注意：此字段可能返回 null，表示取不到有效值。
	Process []*AssetAppProcessInfo `json:"Process,omitnil,omitempty" name:"Process"`

	// 分区总数
	Total *uint64 `json:"Total,omitnil,omitempty" name:"Total"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeAssetAppProcessListResponse struct {
	*tchttp.BaseResponse
	Response *DescribeAssetAppProcessListResponseParams `json:"Response"`
}

func (r *DescribeAssetAppProcessListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAssetAppProcessListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAssetCoreModuleInfoRequestParams struct {
	// 服务器Quuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 服务器Uuid
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 内核模块ID
	Id *string `json:"Id,omitnil,omitempty" name:"Id"`
}

type DescribeAssetCoreModuleInfoRequest struct {
	*tchttp.BaseRequest
	
	// 服务器Quuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 服务器Uuid
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 内核模块ID
	Id *string `json:"Id,omitnil,omitempty" name:"Id"`
}

func (r *DescribeAssetCoreModuleInfoRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAssetCoreModuleInfoRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Quuid")
	delete(f, "Uuid")
	delete(f, "Id")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeAssetCoreModuleInfoRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAssetCoreModuleInfoResponseParams struct {
	// 内核模块详情
	Module *AssetCoreModuleDetail `json:"Module,omitnil,omitempty" name:"Module"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeAssetCoreModuleInfoResponse struct {
	*tchttp.BaseResponse
	Response *DescribeAssetCoreModuleInfoResponseParams `json:"Response"`
}

func (r *DescribeAssetCoreModuleInfoResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAssetCoreModuleInfoResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAssetCoreModuleListRequestParams struct {
	// 服务器Uuid
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 服务器Quuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 过滤条件。
	// <li>IP - String - 是否必填：否 - 主机ip</li>
	// <li>MachineName - String - 是否必填：否 - 主机名称</li>
	// <li>InstanceID - string - 是否必填：否 - 实例ID</li>
	// <li>Name- string - 是否必填：否 - 包名</li>
	// <li>User- string - 是否必填：否 - 用户</li>
	Filters []*AssetFilters `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 需要返回的数量，默认为10，最大值为100
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 排序方式，asc升序 或 desc降序
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 排序依据[Size|FirstTime|ProcessCount|ModuleCount]
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

type DescribeAssetCoreModuleListRequest struct {
	*tchttp.BaseRequest
	
	// 服务器Uuid
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 服务器Quuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 过滤条件。
	// <li>IP - String - 是否必填：否 - 主机ip</li>
	// <li>MachineName - String - 是否必填：否 - 主机名称</li>
	// <li>InstanceID - string - 是否必填：否 - 实例ID</li>
	// <li>Name- string - 是否必填：否 - 包名</li>
	// <li>User- string - 是否必填：否 - 用户</li>
	Filters []*AssetFilters `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 需要返回的数量，默认为10，最大值为100
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 排序方式，asc升序 或 desc降序
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 排序依据[Size|FirstTime|ProcessCount|ModuleCount]
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

func (r *DescribeAssetCoreModuleListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAssetCoreModuleListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Uuid")
	delete(f, "Quuid")
	delete(f, "Filters")
	delete(f, "Offset")
	delete(f, "Limit")
	delete(f, "Order")
	delete(f, "By")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeAssetCoreModuleListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAssetCoreModuleListResponseParams struct {
	// 列表
	// 注意：此字段可能返回 null，表示取不到有效值。
	Modules []*AssetCoreModuleBaseInfo `json:"Modules,omitnil,omitempty" name:"Modules"`

	// 总数量
	Total *uint64 `json:"Total,omitnil,omitempty" name:"Total"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeAssetCoreModuleListResponse struct {
	*tchttp.BaseResponse
	Response *DescribeAssetCoreModuleListResponseParams `json:"Response"`
}

func (r *DescribeAssetCoreModuleListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAssetCoreModuleListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAssetDatabaseCountRequestParams struct {
	// 搜索条件：返回名称包含Name的数据库列表
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`
}

type DescribeAssetDatabaseCountRequest struct {
	*tchttp.BaseRequest
	
	// 搜索条件：返回名称包含Name的数据库列表
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`
}

func (r *DescribeAssetDatabaseCountRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAssetDatabaseCountRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Name")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeAssetDatabaseCountRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAssetDatabaseCountResponseParams struct {
	// 各数据库数量
	Databases []*AssetKeyVal `json:"Databases,omitnil,omitempty" name:"Databases"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeAssetDatabaseCountResponse struct {
	*tchttp.BaseResponse
	Response *DescribeAssetDatabaseCountResponseParams `json:"Response"`
}

func (r *DescribeAssetDatabaseCountResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAssetDatabaseCountResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAssetDatabaseInfoRequestParams struct {
	// 服务器Quuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 服务器Uuid
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 数据库ID
	Id *string `json:"Id,omitnil,omitempty" name:"Id"`
}

type DescribeAssetDatabaseInfoRequest struct {
	*tchttp.BaseRequest
	
	// 服务器Quuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 服务器Uuid
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 数据库ID
	Id *string `json:"Id,omitnil,omitempty" name:"Id"`
}

func (r *DescribeAssetDatabaseInfoRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAssetDatabaseInfoRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Quuid")
	delete(f, "Uuid")
	delete(f, "Id")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeAssetDatabaseInfoRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAssetDatabaseInfoResponseParams struct {
	// 数据库详情
	Database *AssetDatabaseDetail `json:"Database,omitnil,omitempty" name:"Database"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeAssetDatabaseInfoResponse struct {
	*tchttp.BaseResponse
	Response *DescribeAssetDatabaseInfoResponseParams `json:"Response"`
}

func (r *DescribeAssetDatabaseInfoResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAssetDatabaseInfoResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAssetDatabaseListRequestParams struct {
	// 查询指定Quuid主机的信息
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 过滤条件。
	// <li>MachineName- String - 是否必填：否 - 主机别名筛选</li>
	// <li>IP- String - 是否必填：否 - 主机ip筛选</li>
	// <li>InstanceID- String - 是否必填：否 - 主机实例ID筛选</li>
	// <li>User- string - 是否必填：否 - 运行用户</li>
	// <li>Port - Int - 是否必填：否 - 端口</li>
	// <li>Name - Int - 是否必填：否 - 数据库名称
	// 0:全部
	// 1:MySQL
	// 2:Redis
	// 3:Oracle
	// 4:MongoDB
	// 5:MemCache
	// 6:PostgreSQL
	// 7:HBase
	// 8:DB2
	// 9:Sybase
	// 10:TiDB</li>
	// <li>Proto - String - 是否必填：否 - 协议：1:TCP, 2:UDP, 3:未知</li>
	// <li>OsType - String - 是否必填：否 - 操作系统: linux/windows</li>
	// <li>Os -String 是否必填: 否 - 操作系统( DescribeMachineOsList 接口 值 )</li>
	Filters []*AssetFilters `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 需要返回的数量，默认为10，最大值为100
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 排序方式，asc升序 或 desc降序
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 排序方式：[FirstTime]
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

type DescribeAssetDatabaseListRequest struct {
	*tchttp.BaseRequest
	
	// 查询指定Quuid主机的信息
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 过滤条件。
	// <li>MachineName- String - 是否必填：否 - 主机别名筛选</li>
	// <li>IP- String - 是否必填：否 - 主机ip筛选</li>
	// <li>InstanceID- String - 是否必填：否 - 主机实例ID筛选</li>
	// <li>User- string - 是否必填：否 - 运行用户</li>
	// <li>Port - Int - 是否必填：否 - 端口</li>
	// <li>Name - Int - 是否必填：否 - 数据库名称
	// 0:全部
	// 1:MySQL
	// 2:Redis
	// 3:Oracle
	// 4:MongoDB
	// 5:MemCache
	// 6:PostgreSQL
	// 7:HBase
	// 8:DB2
	// 9:Sybase
	// 10:TiDB</li>
	// <li>Proto - String - 是否必填：否 - 协议：1:TCP, 2:UDP, 3:未知</li>
	// <li>OsType - String - 是否必填：否 - 操作系统: linux/windows</li>
	// <li>Os -String 是否必填: 否 - 操作系统( DescribeMachineOsList 接口 值 )</li>
	Filters []*AssetFilters `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 需要返回的数量，默认为10，最大值为100
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 排序方式，asc升序 或 desc降序
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 排序方式：[FirstTime]
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

func (r *DescribeAssetDatabaseListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAssetDatabaseListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Quuid")
	delete(f, "Filters")
	delete(f, "Offset")
	delete(f, "Limit")
	delete(f, "Order")
	delete(f, "By")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeAssetDatabaseListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAssetDatabaseListResponseParams struct {
	// 列表
	// 注意：此字段可能返回 null，表示取不到有效值。
	Databases []*AssetDatabaseBaseInfo `json:"Databases,omitnil,omitempty" name:"Databases"`

	// 总数量
	Total *uint64 `json:"Total,omitnil,omitempty" name:"Total"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeAssetDatabaseListResponse struct {
	*tchttp.BaseResponse
	Response *DescribeAssetDatabaseListResponseParams `json:"Response"`
}

func (r *DescribeAssetDatabaseListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAssetDatabaseListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAssetDiskListRequestParams struct {
	// 主机Quuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 主机Uuid
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 需要返回的数量，默认为10，最大值为100
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`
}

type DescribeAssetDiskListRequest struct {
	*tchttp.BaseRequest
	
	// 主机Quuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 主机Uuid
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 需要返回的数量，默认为10，最大值为100
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`
}

func (r *DescribeAssetDiskListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAssetDiskListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Quuid")
	delete(f, "Uuid")
	delete(f, "Offset")
	delete(f, "Limit")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeAssetDiskListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAssetDiskListResponseParams struct {
	// 磁盘分区列表
	// 注意：此字段可能返回 null，表示取不到有效值。
	Disks []*AssetDiskPartitionInfo `json:"Disks,omitnil,omitempty" name:"Disks"`

	// 分区总数
	Total *uint64 `json:"Total,omitnil,omitempty" name:"Total"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeAssetDiskListResponse struct {
	*tchttp.BaseResponse
	Response *DescribeAssetDiskListResponseParams `json:"Response"`
}

func (r *DescribeAssetDiskListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAssetDiskListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAssetEnvListRequestParams struct {
	// 服务器Uuid
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 服务器Quuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 该字段已废弃，由Filters代替
	Type *uint64 `json:"Type,omitnil,omitempty" name:"Type"`

	// 过滤条件。
	// <li>IpOrAlias - String - 是否必填：否 - 主机ip或别名筛选</li>
	// <li>Name- string - 是否必填：否 - 环境变量名</li>
	// <li>Type- int - 是否必填：否 - 类型：0用户变量，1系统变量</li>
	Filters []*AssetFilters `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 需要返回的数量，默认为10，最大值为100
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 排序方式，asc升序 或 desc降序
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 排序方式：[FirstTime]
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

type DescribeAssetEnvListRequest struct {
	*tchttp.BaseRequest
	
	// 服务器Uuid
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 服务器Quuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 该字段已废弃，由Filters代替
	Type *uint64 `json:"Type,omitnil,omitempty" name:"Type"`

	// 过滤条件。
	// <li>IpOrAlias - String - 是否必填：否 - 主机ip或别名筛选</li>
	// <li>Name- string - 是否必填：否 - 环境变量名</li>
	// <li>Type- int - 是否必填：否 - 类型：0用户变量，1系统变量</li>
	Filters []*AssetFilters `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 需要返回的数量，默认为10，最大值为100
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 排序方式，asc升序 或 desc降序
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 排序方式：[FirstTime]
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

func (r *DescribeAssetEnvListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAssetEnvListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Uuid")
	delete(f, "Quuid")
	delete(f, "Type")
	delete(f, "Filters")
	delete(f, "Offset")
	delete(f, "Limit")
	delete(f, "Order")
	delete(f, "By")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeAssetEnvListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAssetEnvListResponseParams struct {
	// 列表
	// 注意：此字段可能返回 null，表示取不到有效值。
	Envs []*AssetEnvBaseInfo `json:"Envs,omitnil,omitempty" name:"Envs"`

	// 总数量
	Total *uint64 `json:"Total,omitnil,omitempty" name:"Total"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeAssetEnvListResponse struct {
	*tchttp.BaseResponse
	Response *DescribeAssetEnvListResponseParams `json:"Response"`
}

func (r *DescribeAssetEnvListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAssetEnvListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAssetHostTotalCountRequestParams struct {
	// 主机Uuid
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 主机Quuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`
}

type DescribeAssetHostTotalCountRequest struct {
	*tchttp.BaseRequest
	
	// 主机Uuid
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 主机Quuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`
}

func (r *DescribeAssetHostTotalCountRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAssetHostTotalCountRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Uuid")
	delete(f, "Quuid")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeAssetHostTotalCountRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAssetHostTotalCountResponseParams struct {
	// 各项资源数量
	// system : 资源监控
	// account: 账号
	// port: 端口
	// process: 进程
	// app: 应用软件
	// database:数据库
	// webapp: Web应用
	// webframe: Web框架
	// webservice: Web服务
	// weblocation: Web站点
	// systempackage: 系统安装包
	// jar: jar包
	// initservice:启动服务
	// env: 环境变量
	// coremodule: 内核模块
	Types []*AssetKeyVal `json:"Types,omitnil,omitempty" name:"Types"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeAssetHostTotalCountResponse struct {
	*tchttp.BaseResponse
	Response *DescribeAssetHostTotalCountResponseParams `json:"Response"`
}

func (r *DescribeAssetHostTotalCountResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAssetHostTotalCountResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAssetInfoRequestParams struct {

}

type DescribeAssetInfoRequest struct {
	*tchttp.BaseRequest
	
}

func (r *DescribeAssetInfoRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAssetInfoRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeAssetInfoRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAssetInfoResponseParams struct {
	// 主机数
	MachineCount *uint64 `json:"MachineCount,omitnil,omitempty" name:"MachineCount"`

	// 账号数
	AccountCount *uint64 `json:"AccountCount,omitnil,omitempty" name:"AccountCount"`

	// 端口数
	PortCount *uint64 `json:"PortCount,omitnil,omitempty" name:"PortCount"`

	// 进程数
	ProcessCount *uint64 `json:"ProcessCount,omitnil,omitempty" name:"ProcessCount"`

	// 软件数
	SoftwareCount *uint64 `json:"SoftwareCount,omitnil,omitempty" name:"SoftwareCount"`

	// 数据库数
	DatabaseCount *uint64 `json:"DatabaseCount,omitnil,omitempty" name:"DatabaseCount"`

	// Web应用数
	WebAppCount *uint64 `json:"WebAppCount,omitnil,omitempty" name:"WebAppCount"`

	// Web框架数
	WebFrameCount *uint64 `json:"WebFrameCount,omitnil,omitempty" name:"WebFrameCount"`

	// Web服务数
	WebServiceCount *uint64 `json:"WebServiceCount,omitnil,omitempty" name:"WebServiceCount"`

	// Web站点数
	WebLocationCount *uint64 `json:"WebLocationCount,omitnil,omitempty" name:"WebLocationCount"`

	// 账号今日新增
	AccountNewCount *int64 `json:"AccountNewCount,omitnil,omitempty" name:"AccountNewCount"`

	// 端口今日新增
	PortNewCount *int64 `json:"PortNewCount,omitnil,omitempty" name:"PortNewCount"`

	// 进程今日新增
	ProcessNewCount *int64 `json:"ProcessNewCount,omitnil,omitempty" name:"ProcessNewCount"`

	// 软件今日新增
	SoftwareNewCount *int64 `json:"SoftwareNewCount,omitnil,omitempty" name:"SoftwareNewCount"`

	// 数据库今日新增
	DatabaseNewCount *int64 `json:"DatabaseNewCount,omitnil,omitempty" name:"DatabaseNewCount"`

	// Web应用今日新增
	WebAppNewCount *int64 `json:"WebAppNewCount,omitnil,omitempty" name:"WebAppNewCount"`

	// Web框架今日新增
	WebFrameNewCount *int64 `json:"WebFrameNewCount,omitnil,omitempty" name:"WebFrameNewCount"`

	// Web服务今日新增
	WebServiceNewCount *int64 `json:"WebServiceNewCount,omitnil,omitempty" name:"WebServiceNewCount"`

	// Web站点今日新增
	WebLocationNewCount *int64 `json:"WebLocationNewCount,omitnil,omitempty" name:"WebLocationNewCount"`

	// 主机今日新增
	MachineNewCount *int64 `json:"MachineNewCount,omitnil,omitempty" name:"MachineNewCount"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeAssetInfoResponse struct {
	*tchttp.BaseResponse
	Response *DescribeAssetInfoResponseParams `json:"Response"`
}

func (r *DescribeAssetInfoResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAssetInfoResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAssetInitServiceListRequestParams struct {
	// 服务器Uuid
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 服务器Quuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 过滤条件。
	// <li>IP - String - 是否必填：否 - 主机ip</li>
	// <li>MachineName - String - 是否必填：否 - 主机名称</li>
	// <li>InstanceID - string - 是否必填：否 - 实例ID</li>
	// <li>Name- string - 是否必填：否 - 包名</li>
	// <li>User- string - 是否必填：否 - 用户</li>
	// <li>IsAutoRun - string - 是否必填：否 - 是否开机自启动：0否，1是</li>
	// <li>Status- string - 是否必填：否 - 默认启用状态：0未启用， 1启用 仅linux</li>
	// <li>Type- string - 是否必填：否 - 类型：类型 仅windows：
	// 1:编码器
	// 2:IE插件
	// 3:网络提供者
	// 4:镜像劫持
	// 5:LSA提供者
	// 6:KnownDLLs
	// 7:启动执行
	// 8:WMI
	// 9:计划任务
	// 10:Winsock提供者
	// 11:打印监控器
	// 12:资源管理器
	// 13:驱动服务
	// 14:登录</li>
	Filters []*AssetFilters `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 需要返回的数量，默认为10，最大值为100
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 排序方式，asc升序 或 desc降序
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 排序方式：[FirstTime]
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

type DescribeAssetInitServiceListRequest struct {
	*tchttp.BaseRequest
	
	// 服务器Uuid
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 服务器Quuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 过滤条件。
	// <li>IP - String - 是否必填：否 - 主机ip</li>
	// <li>MachineName - String - 是否必填：否 - 主机名称</li>
	// <li>InstanceID - string - 是否必填：否 - 实例ID</li>
	// <li>Name- string - 是否必填：否 - 包名</li>
	// <li>User- string - 是否必填：否 - 用户</li>
	// <li>IsAutoRun - string - 是否必填：否 - 是否开机自启动：0否，1是</li>
	// <li>Status- string - 是否必填：否 - 默认启用状态：0未启用， 1启用 仅linux</li>
	// <li>Type- string - 是否必填：否 - 类型：类型 仅windows：
	// 1:编码器
	// 2:IE插件
	// 3:网络提供者
	// 4:镜像劫持
	// 5:LSA提供者
	// 6:KnownDLLs
	// 7:启动执行
	// 8:WMI
	// 9:计划任务
	// 10:Winsock提供者
	// 11:打印监控器
	// 12:资源管理器
	// 13:驱动服务
	// 14:登录</li>
	Filters []*AssetFilters `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 需要返回的数量，默认为10，最大值为100
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 排序方式，asc升序 或 desc降序
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 排序方式：[FirstTime]
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

func (r *DescribeAssetInitServiceListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAssetInitServiceListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Uuid")
	delete(f, "Quuid")
	delete(f, "Filters")
	delete(f, "Offset")
	delete(f, "Limit")
	delete(f, "Order")
	delete(f, "By")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeAssetInitServiceListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAssetInitServiceListResponseParams struct {
	// 列表
	// 注意：此字段可能返回 null，表示取不到有效值。
	Services []*AssetInitServiceBaseInfo `json:"Services,omitnil,omitempty" name:"Services"`

	// 总数量
	Total *uint64 `json:"Total,omitnil,omitempty" name:"Total"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeAssetInitServiceListResponse struct {
	*tchttp.BaseResponse
	Response *DescribeAssetInitServiceListResponseParams `json:"Response"`
}

func (r *DescribeAssetInitServiceListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAssetInitServiceListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAssetJarInfoRequestParams struct {
	// 服务器Quuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 服务器Uuid
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// Jar包ID
	Id *string `json:"Id,omitnil,omitempty" name:"Id"`
}

type DescribeAssetJarInfoRequest struct {
	*tchttp.BaseRequest
	
	// 服务器Quuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 服务器Uuid
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// Jar包ID
	Id *string `json:"Id,omitnil,omitempty" name:"Id"`
}

func (r *DescribeAssetJarInfoRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAssetJarInfoRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Quuid")
	delete(f, "Uuid")
	delete(f, "Id")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeAssetJarInfoRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAssetJarInfoResponseParams struct {
	// Jar包详情
	Jar *AssetJarDetail `json:"Jar,omitnil,omitempty" name:"Jar"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeAssetJarInfoResponse struct {
	*tchttp.BaseResponse
	Response *DescribeAssetJarInfoResponseParams `json:"Response"`
}

func (r *DescribeAssetJarInfoResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAssetJarInfoResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAssetJarListRequestParams struct {
	// 服务器Uuid
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 服务器Quuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 过滤条件。
	// <li>IP - String - 是否必填：否 - 主机ip</li>
	// <li>MachineName - String - 是否必填：否 - 主机名称</li>
	// <li>InstanceID - string - 是否必填：否 - 实例ID</li>
	// <li>Name- string - 是否必填：否 - 包名</li>
	// <li>Type- uint - 是否必填：否 - 类型	
	// 1: 应用程序
	// 2 : 系统类库
	// 3 : Web服务自带库
	// 4 : 其他依赖包</li>
	// <li>Status- string - 是否必填：否 - 是否可执行：0否，1是</li>
	Filters []*AssetFilters `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 需要返回的数量，默认为10，最大值为100
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 排序方式，asc升序 或 desc降序
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 排序方式：[FirstTime]
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

type DescribeAssetJarListRequest struct {
	*tchttp.BaseRequest
	
	// 服务器Uuid
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 服务器Quuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 过滤条件。
	// <li>IP - String - 是否必填：否 - 主机ip</li>
	// <li>MachineName - String - 是否必填：否 - 主机名称</li>
	// <li>InstanceID - string - 是否必填：否 - 实例ID</li>
	// <li>Name- string - 是否必填：否 - 包名</li>
	// <li>Type- uint - 是否必填：否 - 类型	
	// 1: 应用程序
	// 2 : 系统类库
	// 3 : Web服务自带库
	// 4 : 其他依赖包</li>
	// <li>Status- string - 是否必填：否 - 是否可执行：0否，1是</li>
	Filters []*AssetFilters `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 需要返回的数量，默认为10，最大值为100
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 排序方式，asc升序 或 desc降序
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 排序方式：[FirstTime]
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

func (r *DescribeAssetJarListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAssetJarListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Uuid")
	delete(f, "Quuid")
	delete(f, "Filters")
	delete(f, "Offset")
	delete(f, "Limit")
	delete(f, "Order")
	delete(f, "By")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeAssetJarListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAssetJarListResponseParams struct {
	// 应用列表
	// 注意：此字段可能返回 null，表示取不到有效值。
	Jars []*AssetJarBaseInfo `json:"Jars,omitnil,omitempty" name:"Jars"`

	// 总数量
	Total *uint64 `json:"Total,omitnil,omitempty" name:"Total"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeAssetJarListResponse struct {
	*tchttp.BaseResponse
	Response *DescribeAssetJarListResponseParams `json:"Response"`
}

func (r *DescribeAssetJarListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAssetJarListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAssetLoadInfoRequestParams struct {

}

type DescribeAssetLoadInfoRequest struct {
	*tchttp.BaseRequest
	
}

func (r *DescribeAssetLoadInfoRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAssetLoadInfoRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeAssetLoadInfoRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAssetLoadInfoResponseParams struct {
	// 系统负载
	// 注意：此字段可能返回 null，表示取不到有效值。
	CpuLoad *AssetLoadSummary `json:"CpuLoad,omitnil,omitempty" name:"CpuLoad"`

	// 内存使用率
	// 注意：此字段可能返回 null，表示取不到有效值。
	MemLoad *AssetLoadSummary `json:"MemLoad,omitnil,omitempty" name:"MemLoad"`

	// 硬盘使用率
	// 注意：此字段可能返回 null，表示取不到有效值。
	DiskLoad *AssetLoadSummary `json:"DiskLoad,omitnil,omitempty" name:"DiskLoad"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeAssetLoadInfoResponse struct {
	*tchttp.BaseResponse
	Response *DescribeAssetLoadInfoResponseParams `json:"Response"`
}

func (r *DescribeAssetLoadInfoResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAssetLoadInfoResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAssetMachineDetailRequestParams struct {
	// 服务器Quuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 服务器Uuid
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`
}

type DescribeAssetMachineDetailRequest struct {
	*tchttp.BaseRequest
	
	// 服务器Quuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 服务器Uuid
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`
}

func (r *DescribeAssetMachineDetailRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAssetMachineDetailRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Quuid")
	delete(f, "Uuid")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeAssetMachineDetailRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAssetMachineDetailResponseParams struct {
	// 主机详情
	MachineDetail *AssetMachineDetail `json:"MachineDetail,omitnil,omitempty" name:"MachineDetail"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeAssetMachineDetailResponse struct {
	*tchttp.BaseResponse
	Response *DescribeAssetMachineDetailResponseParams `json:"Response"`
}

func (r *DescribeAssetMachineDetailResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAssetMachineDetailResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAssetMachineListRequestParams struct {
	// 过滤条件。
	// <li>MachineName  主机名称</li>
	// <li>InstanceID  实例ID  </li>
	// <li>IP   内网IP或公网IP</li>
	// <li>OsType - String - 是否必填：否 - windows或linux</li>
	// <li>CpuLoad - Int - 是否必填：否 - 
	// 	0: 未知  1: 低负载
	// 	2: 中负载  3: 高负载</li>
	// <li>DiskLoad - Int - 是否必填：否 - 
	// 	0: 0%或未知  1: 0%～20%
	// 	2: 20%～50%  3: 50%～80%
	// 	4: 80%～100%</li>
	// <li>MemLoad - Int - 是否必填：否 - 
	// 	0: 0%或未知  1: 0%～20%
	// 	2: 20%～50%  3: 50%～80%
	// 	4: 80%～100%</li>
	// <li>Quuid：主机Quuid</li>
	// <li>Os -String 是否必填: 否 - 操作系统( DescribeMachineOsList 接口 值 )</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 需要返回的数量，默认为10，最大值为100
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 排序方式，asc升序 或 desc降序
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 可选排序[FirstTime|PartitionCount]
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

type DescribeAssetMachineListRequest struct {
	*tchttp.BaseRequest
	
	// 过滤条件。
	// <li>MachineName  主机名称</li>
	// <li>InstanceID  实例ID  </li>
	// <li>IP   内网IP或公网IP</li>
	// <li>OsType - String - 是否必填：否 - windows或linux</li>
	// <li>CpuLoad - Int - 是否必填：否 - 
	// 	0: 未知  1: 低负载
	// 	2: 中负载  3: 高负载</li>
	// <li>DiskLoad - Int - 是否必填：否 - 
	// 	0: 0%或未知  1: 0%～20%
	// 	2: 20%～50%  3: 50%～80%
	// 	4: 80%～100%</li>
	// <li>MemLoad - Int - 是否必填：否 - 
	// 	0: 0%或未知  1: 0%～20%
	// 	2: 20%～50%  3: 50%～80%
	// 	4: 80%～100%</li>
	// <li>Quuid：主机Quuid</li>
	// <li>Os -String 是否必填: 否 - 操作系统( DescribeMachineOsList 接口 值 )</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 需要返回的数量，默认为10，最大值为100
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 排序方式，asc升序 或 desc降序
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 可选排序[FirstTime|PartitionCount]
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

func (r *DescribeAssetMachineListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAssetMachineListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Filters")
	delete(f, "Limit")
	delete(f, "Offset")
	delete(f, "Order")
	delete(f, "By")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeAssetMachineListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAssetMachineListResponseParams struct {
	// 总数
	Total *uint64 `json:"Total,omitnil,omitempty" name:"Total"`

	// 记录列表
	// 注意：此字段可能返回 null，表示取不到有效值。
	Machines []*AssetMachineBaseInfo `json:"Machines,omitnil,omitempty" name:"Machines"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeAssetMachineListResponse struct {
	*tchttp.BaseResponse
	Response *DescribeAssetMachineListResponseParams `json:"Response"`
}

func (r *DescribeAssetMachineListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAssetMachineListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAssetMachineTagTopRequestParams struct {

}

type DescribeAssetMachineTagTopRequest struct {
	*tchttp.BaseRequest
	
}

func (r *DescribeAssetMachineTagTopRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAssetMachineTagTopRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeAssetMachineTagTopRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAssetMachineTagTopResponseParams struct {
	// Top5标签及数量
	// 注意：此字段可能返回 null，表示取不到有效值。
	Tags []*AssetKeyVal `json:"Tags,omitnil,omitempty" name:"Tags"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeAssetMachineTagTopResponse struct {
	*tchttp.BaseResponse
	Response *DescribeAssetMachineTagTopResponseParams `json:"Response"`
}

func (r *DescribeAssetMachineTagTopResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAssetMachineTagTopResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAssetPlanTaskListRequestParams struct {
	// 服务器Uuid
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 服务器Quuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 过滤条件。
	// <li>IP - String - 是否必填：否 - 主机ip</li>
	// <li>MachineName - String - 是否必填：否 - 主机名称</li>
	// <li>InstanceID - string - 是否必填：否 - 实例ID</li>
	// <li>User- string - 是否必填：否 - 用户</li>
	// <li>Status- int - 是否必填：否 - 默认启用状态：0未启用， 1启用 </li>
	Filters []*AssetFilters `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 需要返回的数量，默认为10，最大值为100
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 排序方式，asc升序 或 desc降序
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 排序方式：[FirstTime]
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

type DescribeAssetPlanTaskListRequest struct {
	*tchttp.BaseRequest
	
	// 服务器Uuid
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 服务器Quuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 过滤条件。
	// <li>IP - String - 是否必填：否 - 主机ip</li>
	// <li>MachineName - String - 是否必填：否 - 主机名称</li>
	// <li>InstanceID - string - 是否必填：否 - 实例ID</li>
	// <li>User- string - 是否必填：否 - 用户</li>
	// <li>Status- int - 是否必填：否 - 默认启用状态：0未启用， 1启用 </li>
	Filters []*AssetFilters `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 需要返回的数量，默认为10，最大值为100
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 排序方式，asc升序 或 desc降序
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 排序方式：[FirstTime]
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

func (r *DescribeAssetPlanTaskListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAssetPlanTaskListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Uuid")
	delete(f, "Quuid")
	delete(f, "Filters")
	delete(f, "Offset")
	delete(f, "Limit")
	delete(f, "Order")
	delete(f, "By")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeAssetPlanTaskListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAssetPlanTaskListResponseParams struct {
	// 列表
	// 注意：此字段可能返回 null，表示取不到有效值。
	Tasks []*AssetPlanTask `json:"Tasks,omitnil,omitempty" name:"Tasks"`

	// 总数量
	Total *uint64 `json:"Total,omitnil,omitempty" name:"Total"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeAssetPlanTaskListResponse struct {
	*tchttp.BaseResponse
	Response *DescribeAssetPlanTaskListResponseParams `json:"Response"`
}

func (r *DescribeAssetPlanTaskListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAssetPlanTaskListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAssetPortCountRequestParams struct {
	// 搜索条件：返回指定端口号数据
	Port *uint64 `json:"Port,omitnil,omitempty" name:"Port"`
}

type DescribeAssetPortCountRequest struct {
	*tchttp.BaseRequest
	
	// 搜索条件：返回指定端口号数据
	Port *uint64 `json:"Port,omitnil,omitempty" name:"Port"`
}

func (r *DescribeAssetPortCountRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAssetPortCountRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Port")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeAssetPortCountRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAssetPortCountResponseParams struct {
	// 各进程数量
	Ports []*AssetKeyVal `json:"Ports,omitnil,omitempty" name:"Ports"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeAssetPortCountResponse struct {
	*tchttp.BaseResponse
	Response *DescribeAssetPortCountResponseParams `json:"Response"`
}

func (r *DescribeAssetPortCountResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAssetPortCountResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAssetPortInfoListRequestParams struct {
	// 查询指定Quuid主机的信息
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 过滤条件。
	// <li>Port - uint64 - 是否必填：否 - 端口</li>
	// <li>IP - String - 是否必填：否 - 主机ip</li>
	// <li>MachineName - String - 是否必填：否 - 主机名称</li>
	// <li>InstanceID - string - 是否必填：否 - 实例ID</li>
	// <li>ProcessName - String - 是否必填：否 - 监听进程</li>
	// <li>Pid - uint64 - 是否必填：否 - PID</li>
	// <li>User - String - 是否必填：否 - 运行用户</li>
	// <li>Group - String - 是否必填：否 - 所属用户组</li>
	// <li>Ppid - uint64 - 是否必填：否 - PPID</li>
	// <li>Proto - string - 是否必填：否 - tcp/udp或“”(空字符串筛选未知状态)</li>
	// <li>OsType - uint64 - 是否必填：否 - windows/linux</li>
	// <li>RunTimeStart - String - 是否必填：否 - 运行开始时间</li>
	// <li>RunTimeEnd - String - 是否必填：否 - 运行结束时间</li>
	// <li>Os -String 是否必填: 否 - 操作系统( DescribeMachineOsList 接口 值 )</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 需要返回的数量，默认为10，最大值为100
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 排序方式，asc升序 或 desc降序
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 排序方式：[FirstTime|StartTime]
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

type DescribeAssetPortInfoListRequest struct {
	*tchttp.BaseRequest
	
	// 查询指定Quuid主机的信息
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 过滤条件。
	// <li>Port - uint64 - 是否必填：否 - 端口</li>
	// <li>IP - String - 是否必填：否 - 主机ip</li>
	// <li>MachineName - String - 是否必填：否 - 主机名称</li>
	// <li>InstanceID - string - 是否必填：否 - 实例ID</li>
	// <li>ProcessName - String - 是否必填：否 - 监听进程</li>
	// <li>Pid - uint64 - 是否必填：否 - PID</li>
	// <li>User - String - 是否必填：否 - 运行用户</li>
	// <li>Group - String - 是否必填：否 - 所属用户组</li>
	// <li>Ppid - uint64 - 是否必填：否 - PPID</li>
	// <li>Proto - string - 是否必填：否 - tcp/udp或“”(空字符串筛选未知状态)</li>
	// <li>OsType - uint64 - 是否必填：否 - windows/linux</li>
	// <li>RunTimeStart - String - 是否必填：否 - 运行开始时间</li>
	// <li>RunTimeEnd - String - 是否必填：否 - 运行结束时间</li>
	// <li>Os -String 是否必填: 否 - 操作系统( DescribeMachineOsList 接口 值 )</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 需要返回的数量，默认为10，最大值为100
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 排序方式，asc升序 或 desc降序
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 排序方式：[FirstTime|StartTime]
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

func (r *DescribeAssetPortInfoListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAssetPortInfoListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Quuid")
	delete(f, "Filters")
	delete(f, "Limit")
	delete(f, "Offset")
	delete(f, "Order")
	delete(f, "By")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeAssetPortInfoListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAssetPortInfoListResponseParams struct {
	// 记录总数
	Total *uint64 `json:"Total,omitnil,omitempty" name:"Total"`

	// 列表
	// 注意：此字段可能返回 null，表示取不到有效值。
	Ports []*AssetPortBaseInfo `json:"Ports,omitnil,omitempty" name:"Ports"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeAssetPortInfoListResponse struct {
	*tchttp.BaseResponse
	Response *DescribeAssetPortInfoListResponseParams `json:"Response"`
}

func (r *DescribeAssetPortInfoListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAssetPortInfoListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAssetProcessCountRequestParams struct {
	// 搜索条件：搜索返回所有进程名包含Name的进程列表
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`
}

type DescribeAssetProcessCountRequest struct {
	*tchttp.BaseRequest
	
	// 搜索条件：搜索返回所有进程名包含Name的进程列表
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`
}

func (r *DescribeAssetProcessCountRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAssetProcessCountRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Name")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeAssetProcessCountRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAssetProcessCountResponseParams struct {
	// 各进程数量
	// 注意：此字段可能返回 null，表示取不到有效值。
	Process []*AssetKeyVal `json:"Process,omitnil,omitempty" name:"Process"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeAssetProcessCountResponse struct {
	*tchttp.BaseResponse
	Response *DescribeAssetProcessCountResponseParams `json:"Response"`
}

func (r *DescribeAssetProcessCountResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAssetProcessCountResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAssetProcessInfoListRequestParams struct {
	// 查询指定Quuid主机的信息
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 过滤条件。
	// <li>IP - String - 是否必填：否 - 主机ip</li>
	// <li>MachineName - String - 是否必填：否 - 主机名称</li>
	// <li>InstanceID - string - 是否必填：否 - 实例ID</li>
	// <li>Name - String - 是否必填：否 - 进程名</li>
	// <li>User - String - 是否必填：否 - 进程用户</li>
	// <li>Group - String - 是否必填：否 - 进程用户组</li>
	// <li>Pid - uint64 - 是否必填：否 - 进程ID</li>
	// <li>Ppid - uint64 - 是否必填：否 - 父进程ID</li>
	// <li>OsType - uint64 - 是否必填：否 - windows/linux</li>
	// <li>Status - string - 是否必填：否 - 进程状态：
	// 1:R 可执行
	// 2:S 可中断
	// 3:D 不可中断
	// 4:T 暂停状态或跟踪状态
	// 5:Z 僵尸状态
	// 6:X 将被销毁</li>
	// <li>RunTimeStart - String - 是否必填：否 - 运行开始时间</li>
	// <li>RunTimeEnd - String - 是否必填：否 - 运行结束时间</li>
	// <li>InstallByPackage - uint64 - 是否必填：否 - 是否包安装：0否，1是</li>
	// <li>Os -String 是否必填: 否 - 操作系统( DescribeMachineOsList 接口 值 )</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 需要返回的数量，默认为10，最大值为100
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 排序方式，asc升序 或 desc降序
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 排序方式：[FirstTime|StartTime]
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

type DescribeAssetProcessInfoListRequest struct {
	*tchttp.BaseRequest
	
	// 查询指定Quuid主机的信息
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 过滤条件。
	// <li>IP - String - 是否必填：否 - 主机ip</li>
	// <li>MachineName - String - 是否必填：否 - 主机名称</li>
	// <li>InstanceID - string - 是否必填：否 - 实例ID</li>
	// <li>Name - String - 是否必填：否 - 进程名</li>
	// <li>User - String - 是否必填：否 - 进程用户</li>
	// <li>Group - String - 是否必填：否 - 进程用户组</li>
	// <li>Pid - uint64 - 是否必填：否 - 进程ID</li>
	// <li>Ppid - uint64 - 是否必填：否 - 父进程ID</li>
	// <li>OsType - uint64 - 是否必填：否 - windows/linux</li>
	// <li>Status - string - 是否必填：否 - 进程状态：
	// 1:R 可执行
	// 2:S 可中断
	// 3:D 不可中断
	// 4:T 暂停状态或跟踪状态
	// 5:Z 僵尸状态
	// 6:X 将被销毁</li>
	// <li>RunTimeStart - String - 是否必填：否 - 运行开始时间</li>
	// <li>RunTimeEnd - String - 是否必填：否 - 运行结束时间</li>
	// <li>InstallByPackage - uint64 - 是否必填：否 - 是否包安装：0否，1是</li>
	// <li>Os -String 是否必填: 否 - 操作系统( DescribeMachineOsList 接口 值 )</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 需要返回的数量，默认为10，最大值为100
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 排序方式，asc升序 或 desc降序
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 排序方式：[FirstTime|StartTime]
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

func (r *DescribeAssetProcessInfoListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAssetProcessInfoListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Quuid")
	delete(f, "Filters")
	delete(f, "Limit")
	delete(f, "Offset")
	delete(f, "Order")
	delete(f, "By")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeAssetProcessInfoListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAssetProcessInfoListResponseParams struct {
	// 记录总数
	Total *uint64 `json:"Total,omitnil,omitempty" name:"Total"`

	// 列表
	// 注意：此字段可能返回 null，表示取不到有效值。
	Process []*AssetProcessBaseInfo `json:"Process,omitnil,omitempty" name:"Process"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeAssetProcessInfoListResponse struct {
	*tchttp.BaseResponse
	Response *DescribeAssetProcessInfoListResponseParams `json:"Response"`
}

func (r *DescribeAssetProcessInfoListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAssetProcessInfoListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAssetRecentMachineInfoRequestParams struct {
	// 开始时间，如：2020-09-22
	BeginDate *string `json:"BeginDate,omitnil,omitempty" name:"BeginDate"`

	// 结束时间，如：2020-09-22
	EndDate *string `json:"EndDate,omitnil,omitempty" name:"EndDate"`
}

type DescribeAssetRecentMachineInfoRequest struct {
	*tchttp.BaseRequest
	
	// 开始时间，如：2020-09-22
	BeginDate *string `json:"BeginDate,omitnil,omitempty" name:"BeginDate"`

	// 结束时间，如：2020-09-22
	EndDate *string `json:"EndDate,omitnil,omitempty" name:"EndDate"`
}

func (r *DescribeAssetRecentMachineInfoRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAssetRecentMachineInfoRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "BeginDate")
	delete(f, "EndDate")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeAssetRecentMachineInfoRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAssetRecentMachineInfoResponseParams struct {
	// 总数量列表
	// 注意：此字段可能返回 null，表示取不到有效值。
	TotalList []*AssetKeyVal `json:"TotalList,omitnil,omitempty" name:"TotalList"`

	// 在线数量列表
	// 注意：此字段可能返回 null，表示取不到有效值。
	LiveList []*AssetKeyVal `json:"LiveList,omitnil,omitempty" name:"LiveList"`

	// 离线数量列表
	// 注意：此字段可能返回 null，表示取不到有效值。
	OfflineList []*AssetKeyVal `json:"OfflineList,omitnil,omitempty" name:"OfflineList"`

	// 风险数量列表
	// 注意：此字段可能返回 null，表示取不到有效值。
	RiskList []*AssetKeyVal `json:"RiskList,omitnil,omitempty" name:"RiskList"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeAssetRecentMachineInfoResponse struct {
	*tchttp.BaseResponse
	Response *DescribeAssetRecentMachineInfoResponseParams `json:"Response"`
}

func (r *DescribeAssetRecentMachineInfoResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAssetRecentMachineInfoResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAssetSystemPackageListRequestParams struct {
	// 主机Uuid
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 主机Quuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 过滤条件。
	// <li>Name - String - 是否必填：否 - 包 名</li>
	// <li>StartTime - String - 是否必填：否 - 安装开始时间</li>
	// <li>EndTime - String - 是否必填：否 - 安装开始时间</li>
	// <li>Type - int - 是否必填：否 - 安装包类型：
	// 1:rmp
	// 2:dpkg
	// 3:java
	// 4:system</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 需要返回的数量，默认为10，最大值为100
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 排序方式，asc-升序 或 desc-降序。默认：desc-降序
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 排序方式可选：[FistTime|InstallTime:安装时间]
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

type DescribeAssetSystemPackageListRequest struct {
	*tchttp.BaseRequest
	
	// 主机Uuid
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 主机Quuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 过滤条件。
	// <li>Name - String - 是否必填：否 - 包 名</li>
	// <li>StartTime - String - 是否必填：否 - 安装开始时间</li>
	// <li>EndTime - String - 是否必填：否 - 安装开始时间</li>
	// <li>Type - int - 是否必填：否 - 安装包类型：
	// 1:rmp
	// 2:dpkg
	// 3:java
	// 4:system</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 需要返回的数量，默认为10，最大值为100
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 排序方式，asc-升序 或 desc-降序。默认：desc-降序
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 排序方式可选：[FistTime|InstallTime:安装时间]
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

func (r *DescribeAssetSystemPackageListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAssetSystemPackageListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Uuid")
	delete(f, "Quuid")
	delete(f, "Filters")
	delete(f, "Offset")
	delete(f, "Limit")
	delete(f, "Order")
	delete(f, "By")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeAssetSystemPackageListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAssetSystemPackageListResponseParams struct {
	// 记录总数
	Total *uint64 `json:"Total,omitnil,omitempty" name:"Total"`

	// 列表
	// 注意：此字段可能返回 null，表示取不到有效值。
	Packages []*AssetSystemPackageInfo `json:"Packages,omitnil,omitempty" name:"Packages"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeAssetSystemPackageListResponse struct {
	*tchttp.BaseResponse
	Response *DescribeAssetSystemPackageListResponseParams `json:"Response"`
}

func (r *DescribeAssetSystemPackageListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAssetSystemPackageListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAssetTotalCountRequestParams struct {

}

type DescribeAssetTotalCountRequest struct {
	*tchttp.BaseRequest
	
}

func (r *DescribeAssetTotalCountRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAssetTotalCountRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeAssetTotalCountRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAssetTotalCountResponseParams struct {
	// 各项资源数量
	// system : 资源监控
	// account: 账号
	// port: 端口
	// process: 进程
	// app: 应用软件
	// database:数据库
	// webapp: Web应用
	// webframe: Web框架
	// webservice: Web服务
	// weblocation: Web站点
	// jar: Jar包
	// initservice: 启动服务
	// planTask:计划任务
	// env:环境变量
	// coremodule:内核模块
	Types []*AssetKeyVal `json:"Types,omitnil,omitempty" name:"Types"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeAssetTotalCountResponse struct {
	*tchttp.BaseResponse
	Response *DescribeAssetTotalCountResponseParams `json:"Response"`
}

func (r *DescribeAssetTotalCountResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAssetTotalCountResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAssetTypeTopRequestParams struct {

}

type DescribeAssetTypeTopRequest struct {
	*tchttp.BaseRequest
	
}

func (r *DescribeAssetTypeTopRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAssetTypeTopRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeAssetTypeTopRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAssetTypeTopResponseParams struct {
	// 账号Top5
	// 注意：此字段可能返回 null，表示取不到有效值。
	User []*AssetKeyVal `json:"User,omitnil,omitempty" name:"User"`

	// 端口Top5
	// 注意：此字段可能返回 null，表示取不到有效值。
	Port []*AssetKeyVal `json:"Port,omitnil,omitempty" name:"Port"`

	// 进程Top5
	// 注意：此字段可能返回 null，表示取不到有效值。
	Process []*AssetKeyVal `json:"Process,omitnil,omitempty" name:"Process"`

	// 软件Top5
	// 注意：此字段可能返回 null，表示取不到有效值。
	Software []*AssetKeyVal `json:"Software,omitnil,omitempty" name:"Software"`

	// 数据库Top5
	// 注意：此字段可能返回 null，表示取不到有效值。
	Database []*AssetKeyVal `json:"Database,omitnil,omitempty" name:"Database"`

	// Web应用Top5
	// 注意：此字段可能返回 null，表示取不到有效值。
	WebApp []*AssetKeyVal `json:"WebApp,omitnil,omitempty" name:"WebApp"`

	// Web站点Top5
	// 注意：此字段可能返回 null，表示取不到有效值。
	WebLocation []*AssetKeyVal `json:"WebLocation,omitnil,omitempty" name:"WebLocation"`

	// Web框架Top5
	// 注意：此字段可能返回 null，表示取不到有效值。
	WebFrame []*AssetKeyVal `json:"WebFrame,omitnil,omitempty" name:"WebFrame"`

	// Web服务Top5
	// 注意：此字段可能返回 null，表示取不到有效值。
	WebService []*AssetKeyVal `json:"WebService,omitnil,omitempty" name:"WebService"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeAssetTypeTopResponse struct {
	*tchttp.BaseResponse
	Response *DescribeAssetTypeTopResponseParams `json:"Response"`
}

func (r *DescribeAssetTypeTopResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAssetTypeTopResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAssetTypesRequestParams struct {

}

type DescribeAssetTypesRequest struct {
	*tchttp.BaseRequest
	
}

func (r *DescribeAssetTypesRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAssetTypesRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeAssetTypesRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAssetTypesResponseParams struct {
	// 资产指纹类型列表
	Types []*AssetType `json:"Types,omitnil,omitempty" name:"Types"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeAssetTypesResponse struct {
	*tchttp.BaseResponse
	Response *DescribeAssetTypesResponseParams `json:"Response"`
}

func (r *DescribeAssetTypesResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAssetTypesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAssetUserCountRequestParams struct {
	// 搜索条件：搜索名称中包含name的所有账号列表
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`
}

type DescribeAssetUserCountRequest struct {
	*tchttp.BaseRequest
	
	// 搜索条件：搜索名称中包含name的所有账号列表
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`
}

func (r *DescribeAssetUserCountRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAssetUserCountRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Name")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeAssetUserCountRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAssetUserCountResponseParams struct {
	// 各账号数量
	Users []*AssetKeyVal `json:"Users,omitnil,omitempty" name:"Users"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeAssetUserCountResponse struct {
	*tchttp.BaseResponse
	Response *DescribeAssetUserCountResponseParams `json:"Response"`
}

func (r *DescribeAssetUserCountResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAssetUserCountResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAssetUserInfoRequestParams struct {
	// 云服务器UUID
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 主机安全UUID
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 账户名
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`
}

type DescribeAssetUserInfoRequest struct {
	*tchttp.BaseRequest
	
	// 云服务器UUID
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 主机安全UUID
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 账户名
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`
}

func (r *DescribeAssetUserInfoRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAssetUserInfoRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Quuid")
	delete(f, "Uuid")
	delete(f, "Name")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeAssetUserInfoRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAssetUserInfoResponseParams struct {
	// 用户详细信息
	User *AssetUserDetail `json:"User,omitnil,omitempty" name:"User"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeAssetUserInfoResponse struct {
	*tchttp.BaseResponse
	Response *DescribeAssetUserInfoResponseParams `json:"Response"`
}

func (r *DescribeAssetUserInfoResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAssetUserInfoResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAssetUserKeyListRequestParams struct {
	// 主机Quuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 主机Uuid
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 账号名
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 需要返回的数量，默认为10，最大值为100
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`
}

type DescribeAssetUserKeyListRequest struct {
	*tchttp.BaseRequest
	
	// 主机Quuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 主机Uuid
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 账号名
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 需要返回的数量，默认为10，最大值为100
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`
}

func (r *DescribeAssetUserKeyListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAssetUserKeyListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Quuid")
	delete(f, "Uuid")
	delete(f, "Name")
	delete(f, "Offset")
	delete(f, "Limit")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeAssetUserKeyListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAssetUserKeyListResponseParams struct {
	// 公钥列表
	// 注意：此字段可能返回 null，表示取不到有效值。
	Keys []*AssetUserKeyInfo `json:"Keys,omitnil,omitempty" name:"Keys"`

	// 分区总数
	Total *uint64 `json:"Total,omitnil,omitempty" name:"Total"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeAssetUserKeyListResponse struct {
	*tchttp.BaseResponse
	Response *DescribeAssetUserKeyListResponseParams `json:"Response"`
}

func (r *DescribeAssetUserKeyListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAssetUserKeyListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAssetUserListRequestParams struct {
	// 查询指定Quuid主机的信息
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 过滤条件。
	// <li>IP - String - 是否必填：否 - 主机ip</li>
	// <li>MachineName - String - 是否必填：否 - 主机名称</li>
	// <li>InstanceID - string - 是否必填：否 - 实例ID</li>
	// <li>Name - String - 是否必填：否 - 账户名（模糊匹配）</li>
	// <li>NameStrict - String - 是否必填：否 - 账户名（严格匹配）</li>
	// <li>Uid - uint64 - 是否必填：否 - Uid</li>
	// <li>Guid - uint64 - 是否必填：否 - Guid</li>
	// <li>LoginTimeStart - String - 是否必填：否 - 开始时间，如：2021-01-11</li>
	// <li>LoginTimeEnd - String - 是否必填：否 - 结束时间，如：2021-01-11</li>
	// <li>LoginType - uint64 - 是否必填：否 - 0-不可登录；1-只允许key登录；2只允许密码登录；3-允许key和密码 仅linux</li>
	// <li>OsType - String - 是否必填：否 - windows或linux</li>
	// <li>Status - uint64 - 是否必填：否 - 账号状态：0-禁用；1-启用</li>
	// <li>UserType - uint64 - 是否必填：否 - 账号类型：0访客用户，1标准用户，2管理员用户 仅windows</li>
	// <li>IsDomain - uint64 - 是否必填：否 - 是否域账号：0 不是，1是 仅windows</li>
	// <li>IsRoot - uint64 - 是否必填：否 - 是否Root权限：0 不是，1是 仅linux</li>
	// <li>IsSudo - uint64 - 是否必填：否 - 是否Sudo权限：0 不是，1是 仅linux</li>
	// <li>IsSshLogin - uint64 - 是否必填：否 - 是否ssh登录：0 不是，1是 仅linux</li>
	// <li>ShellLoginStatus - uint64 - 是否必填：否 - 是否shell登录性，0不是；1是 仅linux</li>
	// <li>PasswordStatus - uint64 - 是否必填：否 - 密码状态：1正常 2即将过期 3已过期 4已锁定 仅linux</li>
	// <li>Os -String 是否必填: 否 - 操作系统( DescribeMachineOsList 接口 值 )</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 需要返回的数量，默认为10，最大值为100
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 排序方式，asc升序 或 desc降序
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 可选排序：[FirstTime|LoginTime|PasswordChangeTime|PasswordDuaTime|PasswordLockDays]
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

type DescribeAssetUserListRequest struct {
	*tchttp.BaseRequest
	
	// 查询指定Quuid主机的信息
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 过滤条件。
	// <li>IP - String - 是否必填：否 - 主机ip</li>
	// <li>MachineName - String - 是否必填：否 - 主机名称</li>
	// <li>InstanceID - string - 是否必填：否 - 实例ID</li>
	// <li>Name - String - 是否必填：否 - 账户名（模糊匹配）</li>
	// <li>NameStrict - String - 是否必填：否 - 账户名（严格匹配）</li>
	// <li>Uid - uint64 - 是否必填：否 - Uid</li>
	// <li>Guid - uint64 - 是否必填：否 - Guid</li>
	// <li>LoginTimeStart - String - 是否必填：否 - 开始时间，如：2021-01-11</li>
	// <li>LoginTimeEnd - String - 是否必填：否 - 结束时间，如：2021-01-11</li>
	// <li>LoginType - uint64 - 是否必填：否 - 0-不可登录；1-只允许key登录；2只允许密码登录；3-允许key和密码 仅linux</li>
	// <li>OsType - String - 是否必填：否 - windows或linux</li>
	// <li>Status - uint64 - 是否必填：否 - 账号状态：0-禁用；1-启用</li>
	// <li>UserType - uint64 - 是否必填：否 - 账号类型：0访客用户，1标准用户，2管理员用户 仅windows</li>
	// <li>IsDomain - uint64 - 是否必填：否 - 是否域账号：0 不是，1是 仅windows</li>
	// <li>IsRoot - uint64 - 是否必填：否 - 是否Root权限：0 不是，1是 仅linux</li>
	// <li>IsSudo - uint64 - 是否必填：否 - 是否Sudo权限：0 不是，1是 仅linux</li>
	// <li>IsSshLogin - uint64 - 是否必填：否 - 是否ssh登录：0 不是，1是 仅linux</li>
	// <li>ShellLoginStatus - uint64 - 是否必填：否 - 是否shell登录性，0不是；1是 仅linux</li>
	// <li>PasswordStatus - uint64 - 是否必填：否 - 密码状态：1正常 2即将过期 3已过期 4已锁定 仅linux</li>
	// <li>Os -String 是否必填: 否 - 操作系统( DescribeMachineOsList 接口 值 )</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 需要返回的数量，默认为10，最大值为100
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 排序方式，asc升序 或 desc降序
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 可选排序：[FirstTime|LoginTime|PasswordChangeTime|PasswordDuaTime|PasswordLockDays]
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

func (r *DescribeAssetUserListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAssetUserListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Quuid")
	delete(f, "Filters")
	delete(f, "Limit")
	delete(f, "Offset")
	delete(f, "Order")
	delete(f, "By")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeAssetUserListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAssetUserListResponseParams struct {
	// 记录总数
	Total *uint64 `json:"Total,omitnil,omitempty" name:"Total"`

	// 账号列表
	// 注意：此字段可能返回 null，表示取不到有效值。
	Users []*AssetUserBaseInfo `json:"Users,omitnil,omitempty" name:"Users"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeAssetUserListResponse struct {
	*tchttp.BaseResponse
	Response *DescribeAssetUserListResponseParams `json:"Response"`
}

func (r *DescribeAssetUserListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAssetUserListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAssetWebAppCountRequestParams struct {
	// 搜索条件：返回名称包含Name的所有Web应用列表
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`
}

type DescribeAssetWebAppCountRequest struct {
	*tchttp.BaseRequest
	
	// 搜索条件：返回名称包含Name的所有Web应用列表
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`
}

func (r *DescribeAssetWebAppCountRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAssetWebAppCountRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Name")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeAssetWebAppCountRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAssetWebAppCountResponseParams struct {
	// 各Web应用数量
	WebApps []*AssetKeyVal `json:"WebApps,omitnil,omitempty" name:"WebApps"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeAssetWebAppCountResponse struct {
	*tchttp.BaseResponse
	Response *DescribeAssetWebAppCountResponseParams `json:"Response"`
}

func (r *DescribeAssetWebAppCountResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAssetWebAppCountResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAssetWebAppListRequestParams struct {
	// 查询指定Quuid主机的信息
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 过滤条件。
	// <li>IP - String - 是否必填：否 - 主机ip</li>
	// <li>MachineName - String - 是否必填：否 - 主机名称</li>
	// <li>InstanceID - string - 是否必填：否 - 实例ID</li>
	// <li>Name - String - 是否必填：否 - 应用名</li>
	// <li>Domain - String - 是否必填：否 - 站点域名</li>
	// <li>Type - int - 是否必填：否 - 服务类型：
	// 0：全部
	// 1:Tomcat
	// 2:Apache
	// 3:Nginx
	// 4:WebLogic
	// 5:Websphere
	// 6:JBoss
	// 7:Jetty
	// 8:IHS
	// 9:Tengine</li>
	// <li>OsType - String - 是否必填：否 - windows/linux</li>
	// <li>Os -String 是否必填: 否 - 操作系统( DescribeMachineOsList 接口 值 )</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 需要返回的数量，默认为10，最大值为100
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 排序方式，asc升序 或 desc降序
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 可选排序：[FirstTime|PluginCount]
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

type DescribeAssetWebAppListRequest struct {
	*tchttp.BaseRequest
	
	// 查询指定Quuid主机的信息
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 过滤条件。
	// <li>IP - String - 是否必填：否 - 主机ip</li>
	// <li>MachineName - String - 是否必填：否 - 主机名称</li>
	// <li>InstanceID - string - 是否必填：否 - 实例ID</li>
	// <li>Name - String - 是否必填：否 - 应用名</li>
	// <li>Domain - String - 是否必填：否 - 站点域名</li>
	// <li>Type - int - 是否必填：否 - 服务类型：
	// 0：全部
	// 1:Tomcat
	// 2:Apache
	// 3:Nginx
	// 4:WebLogic
	// 5:Websphere
	// 6:JBoss
	// 7:Jetty
	// 8:IHS
	// 9:Tengine</li>
	// <li>OsType - String - 是否必填：否 - windows/linux</li>
	// <li>Os -String 是否必填: 否 - 操作系统( DescribeMachineOsList 接口 值 )</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 需要返回的数量，默认为10，最大值为100
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 排序方式，asc升序 或 desc降序
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 可选排序：[FirstTime|PluginCount]
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

func (r *DescribeAssetWebAppListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAssetWebAppListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Quuid")
	delete(f, "Filters")
	delete(f, "Offset")
	delete(f, "Limit")
	delete(f, "Order")
	delete(f, "By")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeAssetWebAppListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAssetWebAppListResponseParams struct {
	// 记录总数
	Total *uint64 `json:"Total,omitnil,omitempty" name:"Total"`

	// 列表
	// 注意：此字段可能返回 null，表示取不到有效值。
	WebApps []*AssetWebAppBaseInfo `json:"WebApps,omitnil,omitempty" name:"WebApps"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeAssetWebAppListResponse struct {
	*tchttp.BaseResponse
	Response *DescribeAssetWebAppListResponseParams `json:"Response"`
}

func (r *DescribeAssetWebAppListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAssetWebAppListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAssetWebAppPluginListRequestParams struct {
	// 主机Quuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 主机Uuid
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// Web应用ID
	Id *string `json:"Id,omitnil,omitempty" name:"Id"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 需要返回的数量，默认为10，最大值为100
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`
}

type DescribeAssetWebAppPluginListRequest struct {
	*tchttp.BaseRequest
	
	// 主机Quuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 主机Uuid
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// Web应用ID
	Id *string `json:"Id,omitnil,omitempty" name:"Id"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 需要返回的数量，默认为10，最大值为100
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`
}

func (r *DescribeAssetWebAppPluginListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAssetWebAppPluginListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Quuid")
	delete(f, "Uuid")
	delete(f, "Id")
	delete(f, "Offset")
	delete(f, "Limit")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeAssetWebAppPluginListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAssetWebAppPluginListResponseParams struct {
	// 列表
	// 注意：此字段可能返回 null，表示取不到有效值。
	Plugins []*AssetWebAppPluginInfo `json:"Plugins,omitnil,omitempty" name:"Plugins"`

	// 分区总数
	Total *uint64 `json:"Total,omitnil,omitempty" name:"Total"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeAssetWebAppPluginListResponse struct {
	*tchttp.BaseResponse
	Response *DescribeAssetWebAppPluginListResponseParams `json:"Response"`
}

func (r *DescribeAssetWebAppPluginListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAssetWebAppPluginListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAssetWebFrameCountRequestParams struct {
	// 搜索条件：返回名称包含Name的所有Web框架列表
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`
}

type DescribeAssetWebFrameCountRequest struct {
	*tchttp.BaseRequest
	
	// 搜索条件：返回名称包含Name的所有Web框架列表
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`
}

func (r *DescribeAssetWebFrameCountRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAssetWebFrameCountRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Name")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeAssetWebFrameCountRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAssetWebFrameCountResponseParams struct {
	// 各Web框架数量
	WebFrames []*AssetKeyVal `json:"WebFrames,omitnil,omitempty" name:"WebFrames"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeAssetWebFrameCountResponse struct {
	*tchttp.BaseResponse
	Response *DescribeAssetWebFrameCountResponseParams `json:"Response"`
}

func (r *DescribeAssetWebFrameCountResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAssetWebFrameCountResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAssetWebFrameListRequestParams struct {
	// 查询指定Quuid主机的信息
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 过滤条件。
	// <li>IP - String - 是否必填：否 - 主机ip</li>
	// <li>MachineName - String - 是否必填：否 - 主机名称</li>
	// <li>InstanceID - string - 是否必填：否 - 实例ID</li>
	// <li>Name - String - 是否必填：否 - 框架名</li>
	// <li>NameStrict - String - 是否必填：否 - 框架名（严格匹配）</li>
	// <li>Lang - String - 是否必填：否 - 框架语言:java/python</li>
	// <li>Type - String - 是否必填：否 - 服务类型：
	// 0：全部
	// 1:Tomcat
	// 2:Apache
	// 3:Nginx
	// 4:WebLogic
	// 5:Websphere
	// 6:JBoss
	// 7:WildFly
	// 8:Jetty
	// 9:IHS
	// 10:Tengine</li>
	// <li>OsType - String - 是否必填：否 - windows/linux</li>
	// <li>Os -String 是否必填: 否 - 操作系统( DescribeMachineOsList 接口 值 )</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 需要返回的数量，默认为10，最大值为100
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 排序方式，asc升序 或 desc降序
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 可选排序：[FirstTime|JarCount]
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

type DescribeAssetWebFrameListRequest struct {
	*tchttp.BaseRequest
	
	// 查询指定Quuid主机的信息
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 过滤条件。
	// <li>IP - String - 是否必填：否 - 主机ip</li>
	// <li>MachineName - String - 是否必填：否 - 主机名称</li>
	// <li>InstanceID - string - 是否必填：否 - 实例ID</li>
	// <li>Name - String - 是否必填：否 - 框架名</li>
	// <li>NameStrict - String - 是否必填：否 - 框架名（严格匹配）</li>
	// <li>Lang - String - 是否必填：否 - 框架语言:java/python</li>
	// <li>Type - String - 是否必填：否 - 服务类型：
	// 0：全部
	// 1:Tomcat
	// 2:Apache
	// 3:Nginx
	// 4:WebLogic
	// 5:Websphere
	// 6:JBoss
	// 7:WildFly
	// 8:Jetty
	// 9:IHS
	// 10:Tengine</li>
	// <li>OsType - String - 是否必填：否 - windows/linux</li>
	// <li>Os -String 是否必填: 否 - 操作系统( DescribeMachineOsList 接口 值 )</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 需要返回的数量，默认为10，最大值为100
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 排序方式，asc升序 或 desc降序
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 可选排序：[FirstTime|JarCount]
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

func (r *DescribeAssetWebFrameListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAssetWebFrameListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Quuid")
	delete(f, "Filters")
	delete(f, "Offset")
	delete(f, "Limit")
	delete(f, "Order")
	delete(f, "By")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeAssetWebFrameListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAssetWebFrameListResponseParams struct {
	// 记录总数
	Total *uint64 `json:"Total,omitnil,omitempty" name:"Total"`

	// 列表
	// 注意：此字段可能返回 null，表示取不到有效值。
	WebFrames []*AssetWebFrameBaseInfo `json:"WebFrames,omitnil,omitempty" name:"WebFrames"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeAssetWebFrameListResponse struct {
	*tchttp.BaseResponse
	Response *DescribeAssetWebFrameListResponseParams `json:"Response"`
}

func (r *DescribeAssetWebFrameListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAssetWebFrameListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAssetWebLocationCountRequestParams struct {
	// 搜索条件：返回名称包含Name的所有Web站点列表
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`
}

type DescribeAssetWebLocationCountRequest struct {
	*tchttp.BaseRequest
	
	// 搜索条件：返回名称包含Name的所有Web站点列表
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`
}

func (r *DescribeAssetWebLocationCountRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAssetWebLocationCountRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Name")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeAssetWebLocationCountRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAssetWebLocationCountResponseParams struct {
	// 各Web站点数量
	WebLocations []*AssetKeyVal `json:"WebLocations,omitnil,omitempty" name:"WebLocations"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeAssetWebLocationCountResponse struct {
	*tchttp.BaseResponse
	Response *DescribeAssetWebLocationCountResponseParams `json:"Response"`
}

func (r *DescribeAssetWebLocationCountResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAssetWebLocationCountResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAssetWebLocationInfoRequestParams struct {
	// 服务器Quuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 服务器Uuid
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 站点Id
	Id *string `json:"Id,omitnil,omitempty" name:"Id"`
}

type DescribeAssetWebLocationInfoRequest struct {
	*tchttp.BaseRequest
	
	// 服务器Quuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 服务器Uuid
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 站点Id
	Id *string `json:"Id,omitnil,omitempty" name:"Id"`
}

func (r *DescribeAssetWebLocationInfoRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAssetWebLocationInfoRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Quuid")
	delete(f, "Uuid")
	delete(f, "Id")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeAssetWebLocationInfoRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAssetWebLocationInfoResponseParams struct {
	// 站点信息
	// 注意：此字段可能返回 null，表示取不到有效值。
	WebLocation *AssetWebLocationInfo `json:"WebLocation,omitnil,omitempty" name:"WebLocation"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeAssetWebLocationInfoResponse struct {
	*tchttp.BaseResponse
	Response *DescribeAssetWebLocationInfoResponseParams `json:"Response"`
}

func (r *DescribeAssetWebLocationInfoResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAssetWebLocationInfoResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAssetWebLocationListRequestParams struct {
	// 查询指定Quuid主机的信息
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 过滤条件。
	// <li>IP - String - 是否必填：否 - 主机ip</li>
	// <li>MachineName - String - 是否必填：否 - 主机名称</li>
	// <li>InstanceID - string - 是否必填：否 - 实例ID</li>
	// <li>Name - String - 是否必填：否 - 域名</li>
	// <li>User - String - 是否必填：否 - 运行用户</li>
	// <li>Port - uint64 - 是否必填：否 - 站点端口</li>
	// <li>Proto - uint64 - 是否必填：否 - 站点协议：1:HTTP,2:HTTPS</li>
	// <li>ServiceType - uint64 - 是否必填：否 - 服务类型：
	// 1:Tomcat
	// 2：Apache
	// 3:Nginx
	// 4:WebLogic
	// 5:Websphere
	// 6:JBoss
	// 7:WildFly
	// 8:Jetty
	// 9:IHS
	// 10:Tengine</li>
	// <li>OsType - String - 是否必填：否 - windows/linux</li>
	// <li>Os -String 是否必填: 否 - 操作系统( DescribeMachineOsList 接口 值 )</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 需要返回的数量，默认为10，最大值为100
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 排序方式，asc升序 或 desc降序
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 可选排序：[FirstTime|PathCount]
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

type DescribeAssetWebLocationListRequest struct {
	*tchttp.BaseRequest
	
	// 查询指定Quuid主机的信息
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 过滤条件。
	// <li>IP - String - 是否必填：否 - 主机ip</li>
	// <li>MachineName - String - 是否必填：否 - 主机名称</li>
	// <li>InstanceID - string - 是否必填：否 - 实例ID</li>
	// <li>Name - String - 是否必填：否 - 域名</li>
	// <li>User - String - 是否必填：否 - 运行用户</li>
	// <li>Port - uint64 - 是否必填：否 - 站点端口</li>
	// <li>Proto - uint64 - 是否必填：否 - 站点协议：1:HTTP,2:HTTPS</li>
	// <li>ServiceType - uint64 - 是否必填：否 - 服务类型：
	// 1:Tomcat
	// 2：Apache
	// 3:Nginx
	// 4:WebLogic
	// 5:Websphere
	// 6:JBoss
	// 7:WildFly
	// 8:Jetty
	// 9:IHS
	// 10:Tengine</li>
	// <li>OsType - String - 是否必填：否 - windows/linux</li>
	// <li>Os -String 是否必填: 否 - 操作系统( DescribeMachineOsList 接口 值 )</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 需要返回的数量，默认为10，最大值为100
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 排序方式，asc升序 或 desc降序
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 可选排序：[FirstTime|PathCount]
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

func (r *DescribeAssetWebLocationListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAssetWebLocationListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Quuid")
	delete(f, "Filters")
	delete(f, "Offset")
	delete(f, "Limit")
	delete(f, "Order")
	delete(f, "By")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeAssetWebLocationListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAssetWebLocationListResponseParams struct {
	// 记录总数
	Total *uint64 `json:"Total,omitnil,omitempty" name:"Total"`

	// 站点列表
	// 注意：此字段可能返回 null，表示取不到有效值。
	Locations []*AssetWebLocationBaseInfo `json:"Locations,omitnil,omitempty" name:"Locations"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeAssetWebLocationListResponse struct {
	*tchttp.BaseResponse
	Response *DescribeAssetWebLocationListResponseParams `json:"Response"`
}

func (r *DescribeAssetWebLocationListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAssetWebLocationListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAssetWebLocationPathListRequestParams struct {
	// 服务器Quuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 服务器Uuid
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// Web站点Id
	Id *string `json:"Id,omitnil,omitempty" name:"Id"`

	// 返回列表数量，最多100，默认10
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量，默认为0
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`
}

type DescribeAssetWebLocationPathListRequest struct {
	*tchttp.BaseRequest
	
	// 服务器Quuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 服务器Uuid
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// Web站点Id
	Id *string `json:"Id,omitnil,omitempty" name:"Id"`

	// 返回列表数量，最多100，默认10
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量，默认为0
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`
}

func (r *DescribeAssetWebLocationPathListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAssetWebLocationPathListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Quuid")
	delete(f, "Uuid")
	delete(f, "Id")
	delete(f, "Limit")
	delete(f, "Offset")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeAssetWebLocationPathListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAssetWebLocationPathListResponseParams struct {
	// 总数
	// 注意：此字段可能返回 null，表示取不到有效值。
	Total *uint64 `json:"Total,omitnil,omitempty" name:"Total"`

	// 列表
	// 注意：此字段可能返回 null，表示取不到有效值。
	Paths []*AssetWebLocationPath `json:"Paths,omitnil,omitempty" name:"Paths"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeAssetWebLocationPathListResponse struct {
	*tchttp.BaseResponse
	Response *DescribeAssetWebLocationPathListResponseParams `json:"Response"`
}

func (r *DescribeAssetWebLocationPathListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAssetWebLocationPathListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAssetWebServiceCountRequestParams struct {
	// 搜索条件：返回名称包含Name的所有Web服务列表
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`
}

type DescribeAssetWebServiceCountRequest struct {
	*tchttp.BaseRequest
	
	// 搜索条件：返回名称包含Name的所有Web服务列表
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`
}

func (r *DescribeAssetWebServiceCountRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAssetWebServiceCountRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Name")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeAssetWebServiceCountRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAssetWebServiceCountResponseParams struct {
	// 各Web服务数量
	WebServices []*AssetKeyVal `json:"WebServices,omitnil,omitempty" name:"WebServices"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeAssetWebServiceCountResponse struct {
	*tchttp.BaseResponse
	Response *DescribeAssetWebServiceCountResponseParams `json:"Response"`
}

func (r *DescribeAssetWebServiceCountResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAssetWebServiceCountResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAssetWebServiceInfoListRequestParams struct {
	// 查询指定Quuid主机的信息
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 过滤条件。
	// <li>User- string - 是否必填：否 - 运行用户</li>
	// <li>Name- string - 是否必填：否 - Web服务名：
	// 1:Tomcat
	// 2:Apache
	// 3:Nginx
	// 4:WebLogic
	// 5:Websphere
	// 6:JBoss
	// 7:WildFly
	// 8:Jetty
	// 9:IHS
	// 10:Tengine</li>
	// <li>OsType- string - 是否必填：否 - Windows/linux</li>
	// <li>Os -String 是否必填: 否 - 操作系统( DescribeMachineOsList 接口 值 )</li>
	Filters []*AssetFilters `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 偏移量，默认为0。
	// <li>IpOrAlias - String - 是否必填：否 - 主机ip或别名筛选</li>
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 需要返回的数量，默认为10，最大值为100
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 排序方式，asc升序 或 desc降序
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 可选排序：[FirstTime|ProcessCount]
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

type DescribeAssetWebServiceInfoListRequest struct {
	*tchttp.BaseRequest
	
	// 查询指定Quuid主机的信息
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 过滤条件。
	// <li>User- string - 是否必填：否 - 运行用户</li>
	// <li>Name- string - 是否必填：否 - Web服务名：
	// 1:Tomcat
	// 2:Apache
	// 3:Nginx
	// 4:WebLogic
	// 5:Websphere
	// 6:JBoss
	// 7:WildFly
	// 8:Jetty
	// 9:IHS
	// 10:Tengine</li>
	// <li>OsType- string - 是否必填：否 - Windows/linux</li>
	// <li>Os -String 是否必填: 否 - 操作系统( DescribeMachineOsList 接口 值 )</li>
	Filters []*AssetFilters `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 偏移量，默认为0。
	// <li>IpOrAlias - String - 是否必填：否 - 主机ip或别名筛选</li>
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 需要返回的数量，默认为10，最大值为100
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 排序方式，asc升序 或 desc降序
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 可选排序：[FirstTime|ProcessCount]
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

func (r *DescribeAssetWebServiceInfoListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAssetWebServiceInfoListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Quuid")
	delete(f, "Filters")
	delete(f, "Offset")
	delete(f, "Limit")
	delete(f, "Order")
	delete(f, "By")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeAssetWebServiceInfoListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAssetWebServiceInfoListResponseParams struct {
	// 列表
	// 注意：此字段可能返回 null，表示取不到有效值。
	WebServices []*AssetWebServiceBaseInfo `json:"WebServices,omitnil,omitempty" name:"WebServices"`

	// 总数量
	Total *uint64 `json:"Total,omitnil,omitempty" name:"Total"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeAssetWebServiceInfoListResponse struct {
	*tchttp.BaseResponse
	Response *DescribeAssetWebServiceInfoListResponseParams `json:"Response"`
}

func (r *DescribeAssetWebServiceInfoListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAssetWebServiceInfoListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAssetWebServiceProcessListRequestParams struct {
	// 主机Quuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 主机Uuid
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// Web服务ID
	Id *string `json:"Id,omitnil,omitempty" name:"Id"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 需要返回的数量，默认为10，最大值为100
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`
}

type DescribeAssetWebServiceProcessListRequest struct {
	*tchttp.BaseRequest
	
	// 主机Quuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 主机Uuid
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// Web服务ID
	Id *string `json:"Id,omitnil,omitempty" name:"Id"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 需要返回的数量，默认为10，最大值为100
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`
}

func (r *DescribeAssetWebServiceProcessListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAssetWebServiceProcessListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Quuid")
	delete(f, "Uuid")
	delete(f, "Id")
	delete(f, "Offset")
	delete(f, "Limit")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeAssetWebServiceProcessListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAssetWebServiceProcessListResponseParams struct {
	// 进程列表
	// 注意：此字段可能返回 null，表示取不到有效值。
	Process []*AssetAppProcessInfo `json:"Process,omitnil,omitempty" name:"Process"`

	// 总数
	Total *uint64 `json:"Total,omitnil,omitempty" name:"Total"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeAssetWebServiceProcessListResponse struct {
	*tchttp.BaseResponse
	Response *DescribeAssetWebServiceProcessListResponseParams `json:"Response"`
}

func (r *DescribeAssetWebServiceProcessListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAssetWebServiceProcessListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAttackEventInfoRequestParams struct {
	// 事件id
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`
}

type DescribeAttackEventInfoRequest struct {
	*tchttp.BaseRequest
	
	// 事件id
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`
}

func (r *DescribeAttackEventInfoRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAttackEventInfoRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Id")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeAttackEventInfoRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAttackEventInfoResponseParams struct {
	// 网络攻击事件详情
	NetAttackEventInfo *NetAttackEventInfo `json:"NetAttackEventInfo,omitnil,omitempty" name:"NetAttackEventInfo"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeAttackEventInfoResponse struct {
	*tchttp.BaseResponse
	Response *DescribeAttackEventInfoResponseParams `json:"Response"`
}

func (r *DescribeAttackEventInfoResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAttackEventInfoResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAttackEventsRequestParams struct {
	// 返回数量，最大值为100。
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	//  过滤条件。
	// <li>Type - String 攻击状态 0: 尝试攻击 1: 攻击成功 - 是否必填: 否</li>
	// <li>Status - String 事件处理状态 0：待处理 1：已处理 2： 已加白 3： 已忽略 4：已删除  - 是否必填: 否</li>
	// <li>SrcIP - String 来源IP - 是否必填: 否</li>
	// <li>Uuids - String 主机安全uuid - 是否必填: 否</li>
	// <li>Quuids - String cvm uuid - 是否必填: 否</li>
	// <li>DstPort - String 攻击目标端口 - 是否必填: 否</li>
	// <li>MachineName - String 主机名称 - 是否必填: 否</li>
	// <li>InstanceID - String 主机实例ID - 是否必填: 否</li>
	// <li>AttackTimeBegin - String 攻击开始时间 - 是否必填: 否</li>
	// <li>AttackTimeEnd - String 攻击结束时间 - 是否必填: 否</li>
	// <li>VulSupportDefense - String 漏洞是否支持防御 0不支持，1支持 - 是否必填: 否</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 排序
	By *string `json:"By,omitnil,omitempty" name:"By"`

	// 排序方式 ASC,DESC
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`
}

type DescribeAttackEventsRequest struct {
	*tchttp.BaseRequest
	
	// 返回数量，最大值为100。
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	//  过滤条件。
	// <li>Type - String 攻击状态 0: 尝试攻击 1: 攻击成功 - 是否必填: 否</li>
	// <li>Status - String 事件处理状态 0：待处理 1：已处理 2： 已加白 3： 已忽略 4：已删除  - 是否必填: 否</li>
	// <li>SrcIP - String 来源IP - 是否必填: 否</li>
	// <li>Uuids - String 主机安全uuid - 是否必填: 否</li>
	// <li>Quuids - String cvm uuid - 是否必填: 否</li>
	// <li>DstPort - String 攻击目标端口 - 是否必填: 否</li>
	// <li>MachineName - String 主机名称 - 是否必填: 否</li>
	// <li>InstanceID - String 主机实例ID - 是否必填: 否</li>
	// <li>AttackTimeBegin - String 攻击开始时间 - 是否必填: 否</li>
	// <li>AttackTimeEnd - String 攻击结束时间 - 是否必填: 否</li>
	// <li>VulSupportDefense - String 漏洞是否支持防御 0不支持，1支持 - 是否必填: 否</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 排序
	By *string `json:"By,omitnil,omitempty" name:"By"`

	// 排序方式 ASC,DESC
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`
}

func (r *DescribeAttackEventsRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAttackEventsRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Limit")
	delete(f, "Offset")
	delete(f, "Filters")
	delete(f, "By")
	delete(f, "Order")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeAttackEventsRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAttackEventsResponseParams struct {
	// 攻击事件列表
	// 注意：此字段可能返回 null，表示取不到有效值。
	List []*NetAttackEvent `json:"List,omitnil,omitempty" name:"List"`

	// 总条数
	TotalCount *uint64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeAttackEventsResponse struct {
	*tchttp.BaseResponse
	Response *DescribeAttackEventsResponseParams `json:"Response"`
}

func (r *DescribeAttackEventsResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAttackEventsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAttackLogsRequestParams struct {
	// 返回数量，最大值为100。
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 过滤条件。
	// <li>HttpMethod - String - 是否必填：否 - 攻击方法(POST|GET)</li>
	// <li>DateRange - String - 是否必填：否 - 时间范围(存储最近3个月的数据)，如最近一个月["2019-11-17", "2019-12-17"]</li>
	// <li>VulType - String 威胁类型 - 是否必填: 否</li>
	// <li>SrcIp - String 攻击源IP - 是否必填: 否</li>
	// <li>DstIp - String 攻击目标IP - 是否必填: 否</li>
	// <li>SrcPort - String 攻击源端口 - 是否必填: 否</li>
	// <li>DstPort - String 攻击目标端口 - 是否必填: 否</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 主机安全客户端ID
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 云主机机器ID
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`
}

type DescribeAttackLogsRequest struct {
	*tchttp.BaseRequest
	
	// 返回数量，最大值为100。
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 过滤条件。
	// <li>HttpMethod - String - 是否必填：否 - 攻击方法(POST|GET)</li>
	// <li>DateRange - String - 是否必填：否 - 时间范围(存储最近3个月的数据)，如最近一个月["2019-11-17", "2019-12-17"]</li>
	// <li>VulType - String 威胁类型 - 是否必填: 否</li>
	// <li>SrcIp - String 攻击源IP - 是否必填: 否</li>
	// <li>DstIp - String 攻击目标IP - 是否必填: 否</li>
	// <li>SrcPort - String 攻击源端口 - 是否必填: 否</li>
	// <li>DstPort - String 攻击目标端口 - 是否必填: 否</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 主机安全客户端ID
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 云主机机器ID
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`
}

func (r *DescribeAttackLogsRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAttackLogsRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Limit")
	delete(f, "Offset")
	delete(f, "Filters")
	delete(f, "Uuid")
	delete(f, "Quuid")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeAttackLogsRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAttackLogsResponseParams struct {
	// 日志列表
	// 注意：此字段可能返回 null，表示取不到有效值。
	AttackLogs []*DefendAttackLog `json:"AttackLogs,omitnil,omitempty" name:"AttackLogs"`

	// 总条数
	TotalCount *uint64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeAttackLogsResponse struct {
	*tchttp.BaseResponse
	Response *DescribeAttackLogsResponseParams `json:"Response"`
}

func (r *DescribeAttackLogsResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAttackLogsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAttackSourceEventsRequestParams struct {
	// 主机uuid
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 开始日期
	BeginDate *string `json:"BeginDate,omitnil,omitempty" name:"BeginDate"`

	// 结束日期
	EndDate *string `json:"EndDate,omitnil,omitempty" name:"EndDate"`

	// 接口DescribeAttackSource 返回的EventInfoParam
	EventInfoParam *string `json:"EventInfoParam,omitnil,omitempty" name:"EventInfoParam"`

	// 限制分页条数默认10
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 起始步长默认0
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`
}

type DescribeAttackSourceEventsRequest struct {
	*tchttp.BaseRequest
	
	// 主机uuid
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 开始日期
	BeginDate *string `json:"BeginDate,omitnil,omitempty" name:"BeginDate"`

	// 结束日期
	EndDate *string `json:"EndDate,omitnil,omitempty" name:"EndDate"`

	// 接口DescribeAttackSource 返回的EventInfoParam
	EventInfoParam *string `json:"EventInfoParam,omitnil,omitempty" name:"EventInfoParam"`

	// 限制分页条数默认10
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 起始步长默认0
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`
}

func (r *DescribeAttackSourceEventsRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAttackSourceEventsRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Uuid")
	delete(f, "BeginDate")
	delete(f, "EndDate")
	delete(f, "EventInfoParam")
	delete(f, "Limit")
	delete(f, "Offset")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeAttackSourceEventsRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAttackSourceEventsResponseParams struct {
	// 总条数
	TotalCount *uint64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// 攻击溯源事件列表
	List []*AttackSourceEvent `json:"List,omitnil,omitempty" name:"List"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeAttackSourceEventsResponse struct {
	*tchttp.BaseResponse
	Response *DescribeAttackSourceEventsResponseParams `json:"Response"`
}

func (r *DescribeAttackSourceEventsResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAttackSourceEventsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAttackSourceRequestParams struct {
	// 主机uuid
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 开始日期
	BeginDate *string `json:"BeginDate,omitnil,omitempty" name:"BeginDate"`

	// 结束日期
	EndDate *string `json:"EndDate,omitnil,omitempty" name:"EndDate"`
}

type DescribeAttackSourceRequest struct {
	*tchttp.BaseRequest
	
	// 主机uuid
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 开始日期
	BeginDate *string `json:"BeginDate,omitnil,omitempty" name:"BeginDate"`

	// 结束日期
	EndDate *string `json:"EndDate,omitnil,omitempty" name:"EndDate"`
}

func (r *DescribeAttackSourceRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAttackSourceRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Uuid")
	delete(f, "BeginDate")
	delete(f, "EndDate")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeAttackSourceRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAttackSourceResponseParams struct {
	// 攻击溯源数据
	AttackSource *AttackSource `json:"AttackSource,omitnil,omitempty" name:"AttackSource"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeAttackSourceResponse struct {
	*tchttp.BaseResponse
	Response *DescribeAttackSourceResponseParams `json:"Response"`
}

func (r *DescribeAttackSourceResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAttackSourceResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAttackStatisticsRequestParams struct {

}

type DescribeAttackStatisticsRequest struct {
	*tchttp.BaseRequest
	
}

func (r *DescribeAttackStatisticsRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAttackStatisticsRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeAttackStatisticsRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAttackStatisticsResponseParams struct {
	// 总攻击次数
	// 注意：此字段可能返回 null，表示取不到有效值。
	PendingAttackCount *uint64 `json:"PendingAttackCount,omitnil,omitempty" name:"PendingAttackCount"`

	// 总尝试攻击次数
	// 注意：此字段可能返回 null，表示取不到有效值。
	PendingTryAttackCount *uint64 `json:"PendingTryAttackCount,omitnil,omitempty" name:"PendingTryAttackCount"`

	// 总攻击成功次数
	// 注意：此字段可能返回 null，表示取不到有效值。
	PendingSuccAttackCount *uint64 `json:"PendingSuccAttackCount,omitnil,omitempty" name:"PendingSuccAttackCount"`

	// 今日新增攻击次数
	// 注意：此字段可能返回 null，表示取不到有效值。
	PendingNewAttackCount *uint64 `json:"PendingNewAttackCount,omitnil,omitempty" name:"PendingNewAttackCount"`

	// 总受攻击资产数量
	// 注意：此字段可能返回 null，表示取不到有效值。
	AttackedAssetCount *uint64 `json:"AttackedAssetCount,omitnil,omitempty" name:"AttackedAssetCount"`

	// 今日新增受攻击资产数量
	// 注意：此字段可能返回 null，表示取不到有效值。
	NewAttackedAssetCount *uint64 `json:"NewAttackedAssetCount,omitnil,omitempty" name:"NewAttackedAssetCount"`

	// 总受攻击端口数量
	// 注意：此字段可能返回 null，表示取不到有效值。
	AttackedPortCount *uint64 `json:"AttackedPortCount,omitnil,omitempty" name:"AttackedPortCount"`

	// 今日新增受攻击端口数量
	// 注意：此字段可能返回 null，表示取不到有效值。
	NewAttackedPortCount *uint64 `json:"NewAttackedPortCount,omitnil,omitempty" name:"NewAttackedPortCount"`

	// 总攻击来源ip数量
	// 注意：此字段可能返回 null，表示取不到有效值。
	AttackSrcIpCount *uint64 `json:"AttackSrcIpCount,omitnil,omitempty" name:"AttackSrcIpCount"`

	// 今日新增攻击来源ip数量
	// 注意：此字段可能返回 null，表示取不到有效值。
	NewAttackSrcIpCount *uint64 `json:"NewAttackSrcIpCount,omitnil,omitempty" name:"NewAttackSrcIpCount"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeAttackStatisticsResponse struct {
	*tchttp.BaseResponse
	Response *DescribeAttackStatisticsResponseParams `json:"Response"`
}

func (r *DescribeAttackStatisticsResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAttackStatisticsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAttackTopRequestParams struct {
	//  过滤条件。
	// <li>BeginTime - String 起始时间,默认近7天- 是否必填: 否</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`
}

type DescribeAttackTopRequest struct {
	*tchttp.BaseRequest
	
	//  过滤条件。
	// <li>BeginTime - String 起始时间,默认近7天- 是否必填: 否</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`
}

func (r *DescribeAttackTopRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAttackTopRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Filters")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeAttackTopRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAttackTopResponseParams struct {
	// top统计数据
	// 注意：此字段可能返回 null，表示取不到有效值。
	NetAttackTopInfo *NetAttackTopInfo `json:"NetAttackTopInfo,omitnil,omitempty" name:"NetAttackTopInfo"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeAttackTopResponse struct {
	*tchttp.BaseResponse
	Response *DescribeAttackTopResponseParams `json:"Response"`
}

func (r *DescribeAttackTopResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAttackTopResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAttackTrendsRequestParams struct {
	//  过滤条件。
	// <li>BeginTime - String 起始时间,默认近7天- 是否必填: 否</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`
}

type DescribeAttackTrendsRequest struct {
	*tchttp.BaseRequest
	
	//  过滤条件。
	// <li>BeginTime - String 起始时间,默认近7天- 是否必填: 否</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`
}

func (r *DescribeAttackTrendsRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAttackTrendsRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Filters")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeAttackTrendsRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAttackTrendsResponseParams struct {
	// 攻击趋势统计数据（天）
	// 注意：此字段可能返回 null，表示取不到有效值。
	NetAttackTrend []*NetAttackTrend `json:"NetAttackTrend,omitnil,omitempty" name:"NetAttackTrend"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeAttackTrendsResponse struct {
	*tchttp.BaseResponse
	Response *DescribeAttackTrendsResponseParams `json:"Response"`
}

func (r *DescribeAttackTrendsResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAttackTrendsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAttackVulTypeListRequestParams struct {

}

type DescribeAttackVulTypeListRequest struct {
	*tchttp.BaseRequest
	
}

func (r *DescribeAttackVulTypeListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAttackVulTypeListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeAttackVulTypeListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAttackVulTypeListResponseParams struct {
	// 威胁类型列表
	List []*string `json:"List,omitnil,omitempty" name:"List"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeAttackVulTypeListResponse struct {
	*tchttp.BaseResponse
	Response *DescribeAttackVulTypeListResponseParams `json:"Response"`
}

func (r *DescribeAttackVulTypeListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAttackVulTypeListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAvailableExpertServiceDetailRequestParams struct {

}

type DescribeAvailableExpertServiceDetailRequest struct {
	*tchttp.BaseRequest
	
}

func (r *DescribeAvailableExpertServiceDetailRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAvailableExpertServiceDetailRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeAvailableExpertServiceDetailRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAvailableExpertServiceDetailResponseParams struct {
	// 安全管家订单
	ExpertService []*ExpertServiceOrderInfo `json:"ExpertService,omitnil,omitempty" name:"ExpertService"`

	// 应急响应可用次数
	EmergencyResponse *uint64 `json:"EmergencyResponse,omitnil,omitempty" name:"EmergencyResponse"`

	// 旗舰护网可用次数
	ProtectNet *uint64 `json:"ProtectNet,omitnil,omitempty" name:"ProtectNet"`

	// 是否购买过安全管家
	ExpertServiceBuy *bool `json:"ExpertServiceBuy,omitnil,omitempty" name:"ExpertServiceBuy"`

	// 是否购买过应急响应
	EmergencyResponseBuy *bool `json:"EmergencyResponseBuy,omitnil,omitempty" name:"EmergencyResponseBuy"`

	// 是否购买过旗舰护网
	ProtectNetBuy *bool `json:"ProtectNetBuy,omitnil,omitempty" name:"ProtectNetBuy"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeAvailableExpertServiceDetailResponse struct {
	*tchttp.BaseResponse
	Response *DescribeAvailableExpertServiceDetailResponseParams `json:"Response"`
}

func (r *DescribeAvailableExpertServiceDetailResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAvailableExpertServiceDetailResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeBanModeRequestParams struct {

}

type DescribeBanModeRequest struct {
	*tchttp.BaseRequest
	
}

func (r *DescribeBanModeRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeBanModeRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeBanModeRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeBanModeResponseParams struct {
	// 阻断模式，STANDARD_MODE：标准阻断，DEEP_MODE：深度阻断
	Mode *string `json:"Mode,omitnil,omitempty" name:"Mode"`

	// 标准阻断模式的配置
	StandardModeConfig *StandardModeConfig `json:"StandardModeConfig,omitnil,omitempty" name:"StandardModeConfig"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeBanModeResponse struct {
	*tchttp.BaseResponse
	Response *DescribeBanModeResponseParams `json:"Response"`
}

func (r *DescribeBanModeResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeBanModeResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeBanRegionsRequestParams struct {
	// 阻断模式，STANDARD_MODE：标准阻断，DEEP_MODE：深度阻断
	Mode *string `json:"Mode,omitnil,omitempty" name:"Mode"`
}

type DescribeBanRegionsRequest struct {
	*tchttp.BaseRequest
	
	// 阻断模式，STANDARD_MODE：标准阻断，DEEP_MODE：深度阻断
	Mode *string `json:"Mode,omitnil,omitempty" name:"Mode"`
}

func (r *DescribeBanRegionsRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeBanRegionsRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Mode")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeBanRegionsRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeBanRegionsResponseParams struct {
	// 地域信息列表
	RegionSet []*RegionSet `json:"RegionSet,omitnil,omitempty" name:"RegionSet"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeBanRegionsResponse struct {
	*tchttp.BaseResponse
	Response *DescribeBanRegionsResponseParams `json:"Response"`
}

func (r *DescribeBanRegionsResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeBanRegionsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeBanStatusRequestParams struct {

}

type DescribeBanStatusRequest struct {
	*tchttp.BaseRequest
	
}

func (r *DescribeBanStatusRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeBanStatusRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeBanStatusRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeBanStatusResponseParams struct {
	// 阻断开关状态:
	//  0 -- 关闭 
	//  1 -- 高级阻断
	//  2 -- 基础阻断(只阻断情报库黑ip)
	Status *uint64 `json:"Status,omitnil,omitempty" name:"Status"`

	// 是否弹窗提示信息 false: 关闭，true: 开启
	ShowTips *bool `json:"ShowTips,omitnil,omitempty" name:"ShowTips"`

	// 是否开启智能过白模式
	OpenSmartMode *bool `json:"OpenSmartMode,omitnil,omitempty" name:"OpenSmartMode"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeBanStatusResponse struct {
	*tchttp.BaseResponse
	Response *DescribeBanStatusResponseParams `json:"Response"`
}

func (r *DescribeBanStatusResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeBanStatusResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeBanWhiteListRequestParams struct {
	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 返回数量，最大值为100。
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 过滤条件。
	// <li>Keywords - String - 是否必填：否 - 查询关键字 </li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`
}

type DescribeBanWhiteListRequest struct {
	*tchttp.BaseRequest
	
	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 返回数量，最大值为100。
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 过滤条件。
	// <li>Keywords - String - 是否必填：否 - 查询关键字 </li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`
}

func (r *DescribeBanWhiteListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeBanWhiteListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Offset")
	delete(f, "Limit")
	delete(f, "Filters")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeBanWhiteListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeBanWhiteListResponseParams struct {
	// 总记录数
	TotalCount *uint64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// 白名单列表
	WhiteList []*BanWhiteListDetail `json:"WhiteList,omitnil,omitempty" name:"WhiteList"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeBanWhiteListResponse struct {
	*tchttp.BaseResponse
	Response *DescribeBanWhiteListResponseParams `json:"Response"`
}

func (r *DescribeBanWhiteListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeBanWhiteListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeBaselineAnalysisDataRequestParams struct {
	// 基线策略id
	StrategyId *uint64 `json:"StrategyId,omitnil,omitempty" name:"StrategyId"`
}

type DescribeBaselineAnalysisDataRequest struct {
	*tchttp.BaseRequest
	
	// 基线策略id
	StrategyId *uint64 `json:"StrategyId,omitnil,omitempty" name:"StrategyId"`
}

func (r *DescribeBaselineAnalysisDataRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeBaselineAnalysisDataRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "StrategyId")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeBaselineAnalysisDataRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeBaselineAnalysisDataResponseParams struct {
	// 最后检测时间
	// 注意：此字段可能返回 null，表示取不到有效值。
	LatestScanTime *string `json:"LatestScanTime,omitnil,omitempty" name:"LatestScanTime"`

	// 是否全部服务器：1-是 0-否
	// 注意：此字段可能返回 null，表示取不到有效值。
	IsGlobal *uint64 `json:"IsGlobal,omitnil,omitempty" name:"IsGlobal"`

	// 服务器总数
	// 注意：此字段可能返回 null，表示取不到有效值。
	ScanHostCount *uint64 `json:"ScanHostCount,omitnil,omitempty" name:"ScanHostCount"`

	// 检测项总数
	// 注意：此字段可能返回 null，表示取不到有效值。
	ScanRuleCount *uint64 `json:"ScanRuleCount,omitnil,omitempty" name:"ScanRuleCount"`

	// 是否是第一次检测  1是 0不是
	// 注意：此字段可能返回 null，表示取不到有效值。
	IfFirstScan *uint64 `json:"IfFirstScan,omitnil,omitempty" name:"IfFirstScan"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeBaselineAnalysisDataResponse struct {
	*tchttp.BaseResponse
	Response *DescribeBaselineAnalysisDataResponseParams `json:"Response"`
}

func (r *DescribeBaselineAnalysisDataResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeBaselineAnalysisDataResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeBaselineBasicInfoRequestParams struct {
	// 基线名称
	BaselineName *string `json:"BaselineName,omitnil,omitempty" name:"BaselineName"`
}

type DescribeBaselineBasicInfoRequest struct {
	*tchttp.BaseRequest
	
	// 基线名称
	BaselineName *string `json:"BaselineName,omitnil,omitempty" name:"BaselineName"`
}

func (r *DescribeBaselineBasicInfoRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeBaselineBasicInfoRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "BaselineName")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeBaselineBasicInfoRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeBaselineBasicInfoResponseParams struct {
	// 基线基础信息列表
	// 注意：此字段可能返回 null，表示取不到有效值。
	BaselineBasicInfoList []*BaselineBasicInfo `json:"BaselineBasicInfoList,omitnil,omitempty" name:"BaselineBasicInfoList"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeBaselineBasicInfoResponse struct {
	*tchttp.BaseResponse
	Response *DescribeBaselineBasicInfoResponseParams `json:"Response"`
}

func (r *DescribeBaselineBasicInfoResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeBaselineBasicInfoResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeBaselineDefaultStrategyListRequestParams struct {

}

type DescribeBaselineDefaultStrategyListRequest struct {
	*tchttp.BaseRequest
	
}

func (r *DescribeBaselineDefaultStrategyListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeBaselineDefaultStrategyListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeBaselineDefaultStrategyListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeBaselineDefaultStrategyListResponseParams struct {
	// 默认策略基础信息列表
	// 注意：此字段可能返回 null，表示取不到有效值。
	StrategyList []*DefaultStrategyInfo `json:"StrategyList,omitnil,omitempty" name:"StrategyList"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeBaselineDefaultStrategyListResponse struct {
	*tchttp.BaseResponse
	Response *DescribeBaselineDefaultStrategyListResponseParams `json:"Response"`
}

func (r *DescribeBaselineDefaultStrategyListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeBaselineDefaultStrategyListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeBaselineDetailRequestParams struct {
	// 基线id
	BaselineId *uint64 `json:"BaselineId,omitnil,omitempty" name:"BaselineId"`
}

type DescribeBaselineDetailRequest struct {
	*tchttp.BaseRequest
	
	// 基线id
	BaselineId *uint64 `json:"BaselineId,omitnil,omitempty" name:"BaselineId"`
}

func (r *DescribeBaselineDetailRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeBaselineDetailRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "BaselineId")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeBaselineDetailRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeBaselineDetailResponseParams struct {
	// 基线详情
	// 注意：此字段可能返回 null，表示取不到有效值。
	BaselineDetail *BaselineDetail `json:"BaselineDetail,omitnil,omitempty" name:"BaselineDetail"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeBaselineDetailResponse struct {
	*tchttp.BaseResponse
	Response *DescribeBaselineDetailResponseParams `json:"Response"`
}

func (r *DescribeBaselineDetailResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeBaselineDetailResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeBaselineDetectListRequestParams struct {
	// <li>PolicyName - string - 是否必填：否 - 策略名称</li>
	// <li>PolicyDetectStatus - int - 是否必填：否 - 1:检测中 2:检测完成</li>
	// <li>FirstTime - string - 是否必填：否 - 开始时间</li>
	// <li>LastTime - string - 是否必填：否 - 结束时间</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 限制条数,默认10,最大100
	Limit *int64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量,默认0
	Offset *int64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 排序方式: [ASC:升序|DESC:降序]
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 可选排序列: [HostCount|StartTime|StopTime]
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

type DescribeBaselineDetectListRequest struct {
	*tchttp.BaseRequest
	
	// <li>PolicyName - string - 是否必填：否 - 策略名称</li>
	// <li>PolicyDetectStatus - int - 是否必填：否 - 1:检测中 2:检测完成</li>
	// <li>FirstTime - string - 是否必填：否 - 开始时间</li>
	// <li>LastTime - string - 是否必填：否 - 结束时间</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 限制条数,默认10,最大100
	Limit *int64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量,默认0
	Offset *int64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 排序方式: [ASC:升序|DESC:降序]
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 可选排序列: [HostCount|StartTime|StopTime]
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

func (r *DescribeBaselineDetectListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeBaselineDetectListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Filters")
	delete(f, "Limit")
	delete(f, "Offset")
	delete(f, "Order")
	delete(f, "By")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeBaselineDetectListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeBaselineDetectListResponseParams struct {
	// 无
	List []*BaselinePolicyDetect `json:"List,omitnil,omitempty" name:"List"`

	// 总数
	Total *int64 `json:"Total,omitnil,omitempty" name:"Total"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeBaselineDetectListResponse struct {
	*tchttp.BaseResponse
	Response *DescribeBaselineDetectListResponseParams `json:"Response"`
}

func (r *DescribeBaselineDetectListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeBaselineDetectListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeBaselineDetectOverviewRequestParams struct {
	// 策略Id
	PolicyId *int64 `json:"PolicyId,omitnil,omitempty" name:"PolicyId"`
}

type DescribeBaselineDetectOverviewRequest struct {
	*tchttp.BaseRequest
	
	// 策略Id
	PolicyId *int64 `json:"PolicyId,omitnil,omitempty" name:"PolicyId"`
}

func (r *DescribeBaselineDetectOverviewRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeBaselineDetectOverviewRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "PolicyId")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeBaselineDetectOverviewRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeBaselineDetectOverviewResponseParams struct {
	// 检测服务器数
	HostCount *int64 `json:"HostCount,omitnil,omitempty" name:"HostCount"`

	// 检测项
	ItemCount *int64 `json:"ItemCount,omitnil,omitempty" name:"ItemCount"`

	// 检测策略项
	PolicyCount *int64 `json:"PolicyCount,omitnil,omitempty" name:"PolicyCount"`

	// 通过率*100%
	PassRate *int64 `json:"PassRate,omitnil,omitempty" name:"PassRate"`

	// 最近一次检测通过个数
	// 注意：此字段可能返回 null，表示取不到有效值。
	LatestPassCount *int64 `json:"LatestPassCount,omitnil,omitempty" name:"LatestPassCount"`

	// 最近一次检测未通过个数
	// 注意：此字段可能返回 null，表示取不到有效值。
	LatestNotPassCount *int64 `json:"LatestNotPassCount,omitnil,omitempty" name:"LatestNotPassCount"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeBaselineDetectOverviewResponse struct {
	*tchttp.BaseResponse
	Response *DescribeBaselineDetectOverviewResponseParams `json:"Response"`
}

func (r *DescribeBaselineDetectOverviewResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeBaselineDetectOverviewResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeBaselineDownloadListRequestParams struct {
	// <li>Status - int - 是否必填：否 - 0:导出中 1:已完成</li>
	// <li>StartTime - string - 是否必填：否 - 开始时间</li>
	// <li>EndTime - string - 是否必填：否 - 结束时间</li>
	// <li>TaskName - string - 是否必填：否 - 任务名称</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 限制条数,默认10,最大100
	Limit *int64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量,默认0
	Offset *int64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 排序方式: [ASC:升序|DESC:降序]
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 可选排序列: [StartTime|EndTime]
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

type DescribeBaselineDownloadListRequest struct {
	*tchttp.BaseRequest
	
	// <li>Status - int - 是否必填：否 - 0:导出中 1:已完成</li>
	// <li>StartTime - string - 是否必填：否 - 开始时间</li>
	// <li>EndTime - string - 是否必填：否 - 结束时间</li>
	// <li>TaskName - string - 是否必填：否 - 任务名称</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 限制条数,默认10,最大100
	Limit *int64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量,默认0
	Offset *int64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 排序方式: [ASC:升序|DESC:降序]
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 可选排序列: [StartTime|EndTime]
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

func (r *DescribeBaselineDownloadListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeBaselineDownloadListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Filters")
	delete(f, "Limit")
	delete(f, "Offset")
	delete(f, "Order")
	delete(f, "By")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeBaselineDownloadListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeBaselineDownloadListResponseParams struct {
	// 无
	List []*BaselineDownload `json:"List,omitnil,omitempty" name:"List"`

	// 总数
	Total *int64 `json:"Total,omitnil,omitempty" name:"Total"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeBaselineDownloadListResponse struct {
	*tchttp.BaseResponse
	Response *DescribeBaselineDownloadListResponseParams `json:"Response"`
}

func (r *DescribeBaselineDownloadListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeBaselineDownloadListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeBaselineEffectHostListRequestParams struct {
	// 分页参数 最大100条
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 分页参数
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 基线id
	BaselineId *uint64 `json:"BaselineId,omitnil,omitempty" name:"BaselineId"`

	// 过滤条件。
	// <li>AliasName- String- 主机别名</li>
	// <li>Status- Uint- 1已通过  0未通过 5检测中</li>
	Filters []*Filters `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 策略id
	StrategyId *uint64 `json:"StrategyId,omitnil,omitempty" name:"StrategyId"`

	// 主机uuid数组
	UuidList []*string `json:"UuidList,omitnil,omitempty" name:"UuidList"`
}

type DescribeBaselineEffectHostListRequest struct {
	*tchttp.BaseRequest
	
	// 分页参数 最大100条
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 分页参数
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 基线id
	BaselineId *uint64 `json:"BaselineId,omitnil,omitempty" name:"BaselineId"`

	// 过滤条件。
	// <li>AliasName- String- 主机别名</li>
	// <li>Status- Uint- 1已通过  0未通过 5检测中</li>
	Filters []*Filters `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 策略id
	StrategyId *uint64 `json:"StrategyId,omitnil,omitempty" name:"StrategyId"`

	// 主机uuid数组
	UuidList []*string `json:"UuidList,omitnil,omitempty" name:"UuidList"`
}

func (r *DescribeBaselineEffectHostListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeBaselineEffectHostListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Limit")
	delete(f, "Offset")
	delete(f, "BaselineId")
	delete(f, "Filters")
	delete(f, "StrategyId")
	delete(f, "UuidList")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeBaselineEffectHostListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeBaselineEffectHostListResponseParams struct {
	// 记录总数
	// 注意：此字段可能返回 null，表示取不到有效值。
	TotalCount *uint64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// 影响服务器列表
	// 注意：此字段可能返回 null，表示取不到有效值。
	EffectHostList []*BaselineEffectHost `json:"EffectHostList,omitnil,omitempty" name:"EffectHostList"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeBaselineEffectHostListResponse struct {
	*tchttp.BaseResponse
	Response *DescribeBaselineEffectHostListResponseParams `json:"Response"`
}

func (r *DescribeBaselineEffectHostListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeBaselineEffectHostListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeBaselineFixListRequestParams struct {
	// <li>ItemName- string - 是否必填：否 - 项名称</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 限制条数,默认10,最大100
	Limit *int64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量,默认0
	Offset *int64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 排序方式: [ASC:升序|DESC:降序]
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 可选排序列: [CreateTime|MoifyTime|FixTime]
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

type DescribeBaselineFixListRequest struct {
	*tchttp.BaseRequest
	
	// <li>ItemName- string - 是否必填：否 - 项名称</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 限制条数,默认10,最大100
	Limit *int64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量,默认0
	Offset *int64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 排序方式: [ASC:升序|DESC:降序]
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 可选排序列: [CreateTime|MoifyTime|FixTime]
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

func (r *DescribeBaselineFixListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeBaselineFixListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Filters")
	delete(f, "Limit")
	delete(f, "Offset")
	delete(f, "Order")
	delete(f, "By")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeBaselineFixListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeBaselineFixListResponseParams struct {
	// 无
	List []*BaselineFix `json:"List,omitnil,omitempty" name:"List"`

	// 总数
	Total *int64 `json:"Total,omitnil,omitempty" name:"Total"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeBaselineFixListResponse struct {
	*tchttp.BaseResponse
	Response *DescribeBaselineFixListResponseParams `json:"Response"`
}

func (r *DescribeBaselineFixListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeBaselineFixListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeBaselineHostDetectListRequestParams struct {
	// <li>PolicyId - int64 - 是否必填：否 - 策略Id</li>
	// <li>HostName - string - 是否必填：否 - 主机名称</i>
	// <li>HostIp - string - 是否必填：否 - 主机Ip</i>
	// <li>ItemId - int64 - 是否必填：否 - 项Id</i>
	// <li>RuleId - int64 - 是否必填：否 - 规则Id</li>
	// <li>DetectStatus - int - 是否必填：否 - 检测状态</li>
	// <li>Level - int - 是否必填：否 - 风险等级</li>
	// <li>StartTime - string - 是否必填：否 - 开时时间</li>
	// <li>EndTime - string - 是否必填：否 - 结束时间</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 限制条数,默认10,最大100
	Limit *int64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量,默认0
	Offset *int64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 排序方式: [ASC:升序|DESC:降序]
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 可选排序列: [LastTime|ItemCount|PassedItemCount|NotPassedItemCount|FirstTime]
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

type DescribeBaselineHostDetectListRequest struct {
	*tchttp.BaseRequest
	
	// <li>PolicyId - int64 - 是否必填：否 - 策略Id</li>
	// <li>HostName - string - 是否必填：否 - 主机名称</i>
	// <li>HostIp - string - 是否必填：否 - 主机Ip</i>
	// <li>ItemId - int64 - 是否必填：否 - 项Id</i>
	// <li>RuleId - int64 - 是否必填：否 - 规则Id</li>
	// <li>DetectStatus - int - 是否必填：否 - 检测状态</li>
	// <li>Level - int - 是否必填：否 - 风险等级</li>
	// <li>StartTime - string - 是否必填：否 - 开时时间</li>
	// <li>EndTime - string - 是否必填：否 - 结束时间</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 限制条数,默认10,最大100
	Limit *int64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量,默认0
	Offset *int64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 排序方式: [ASC:升序|DESC:降序]
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 可选排序列: [LastTime|ItemCount|PassedItemCount|NotPassedItemCount|FirstTime]
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

func (r *DescribeBaselineHostDetectListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeBaselineHostDetectListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Filters")
	delete(f, "Limit")
	delete(f, "Offset")
	delete(f, "Order")
	delete(f, "By")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeBaselineHostDetectListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeBaselineHostDetectListResponseParams struct {
	// 无
	List []*BaselineHostDetect `json:"List,omitnil,omitempty" name:"List"`

	// 总数
	Total *int64 `json:"Total,omitnil,omitempty" name:"Total"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeBaselineHostDetectListResponse struct {
	*tchttp.BaseResponse
	Response *DescribeBaselineHostDetectListResponseParams `json:"Response"`
}

func (r *DescribeBaselineHostDetectListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeBaselineHostDetectListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeBaselineHostIgnoreListRequestParams struct {
	// 请求的规则
	RuleID *int64 `json:"RuleID,omitnil,omitempty" name:"RuleID"`

	// 限制条数,默认10,最大100
	Limit *int64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量,默认0
	Offset *int64 `json:"Offset,omitnil,omitempty" name:"Offset"`
}

type DescribeBaselineHostIgnoreListRequest struct {
	*tchttp.BaseRequest
	
	// 请求的规则
	RuleID *int64 `json:"RuleID,omitnil,omitempty" name:"RuleID"`

	// 限制条数,默认10,最大100
	Limit *int64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量,默认0
	Offset *int64 `json:"Offset,omitnil,omitempty" name:"Offset"`
}

func (r *DescribeBaselineHostIgnoreListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeBaselineHostIgnoreListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "RuleID")
	delete(f, "Limit")
	delete(f, "Offset")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeBaselineHostIgnoreListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeBaselineHostIgnoreListResponseParams struct {
	// 总数
	Total *int64 `json:"Total,omitnil,omitempty" name:"Total"`

	// 无
	List []*BaselineHost `json:"List,omitnil,omitempty" name:"List"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeBaselineHostIgnoreListResponse struct {
	*tchttp.BaseResponse
	Response *DescribeBaselineHostIgnoreListResponseParams `json:"Response"`
}

func (r *DescribeBaselineHostIgnoreListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeBaselineHostIgnoreListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeBaselineHostRiskTopRequestParams struct {
	// 策略ID
	PolicyId *int64 `json:"PolicyId,omitnil,omitempty" name:"PolicyId"`
}

type DescribeBaselineHostRiskTopRequest struct {
	*tchttp.BaseRequest
	
	// 策略ID
	PolicyId *int64 `json:"PolicyId,omitnil,omitempty" name:"PolicyId"`
}

func (r *DescribeBaselineHostRiskTopRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeBaselineHostRiskTopRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "PolicyId")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeBaselineHostRiskTopRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeBaselineHostRiskTopResponseParams struct {
	// 风险主机top5
	HostRiskTop5 []*HostRiskLevelCount `json:"HostRiskTop5,omitnil,omitempty" name:"HostRiskTop5"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeBaselineHostRiskTopResponse struct {
	*tchttp.BaseResponse
	Response *DescribeBaselineHostRiskTopResponseParams `json:"Response"`
}

func (r *DescribeBaselineHostRiskTopResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeBaselineHostRiskTopResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeBaselineHostTopRequestParams struct {
	// 动态top值
	Top *uint64 `json:"Top,omitnil,omitempty" name:"Top"`

	// 策略id
	StrategyId *uint64 `json:"StrategyId,omitnil,omitempty" name:"StrategyId"`
}

type DescribeBaselineHostTopRequest struct {
	*tchttp.BaseRequest
	
	// 动态top值
	Top *uint64 `json:"Top,omitnil,omitempty" name:"Top"`

	// 策略id
	StrategyId *uint64 `json:"StrategyId,omitnil,omitempty" name:"StrategyId"`
}

func (r *DescribeBaselineHostTopRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeBaselineHostTopRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Top")
	delete(f, "StrategyId")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeBaselineHostTopRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeBaselineHostTopResponseParams struct {
	// 主机基线策略事件Top
	// 注意：此字段可能返回 null，表示取不到有效值。
	BaselineHostTopList []*BaselineHostTopList `json:"BaselineHostTopList,omitnil,omitempty" name:"BaselineHostTopList"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeBaselineHostTopResponse struct {
	*tchttp.BaseResponse
	Response *DescribeBaselineHostTopResponseParams `json:"Response"`
}

func (r *DescribeBaselineHostTopResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeBaselineHostTopResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeBaselineItemDetectListRequestParams struct {
	// <li>HostId - string - 是否必填：否 - 主机Id</li>
	// <li>RuleId - int64 - 是否必填：否 - 规则Id</li>
	// <li>PolicyId - int64 - 是否必填：否 - 规则Id</li>
	// <li>ItemName - string - 是否必填：否 - 项名称</li>
	// <li>DetectStatus - int - 是否必填：否 - 检测状态</li>
	// <li>Level - int - 是否必填：否 - 风险等级</li>
	// <li>StartTime - string - 是否必填：否 - 开始时间</li>
	// <li>EndTime - string - 是否必填：否 - 结束时间</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 限制条数,默认10,最大100
	Limit *int64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量,默认0
	Offset *int64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 排序方式: [ASC:升序|DESC:降序]
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 可选排序列: [HostCount|FirstTime|LastTime]
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

type DescribeBaselineItemDetectListRequest struct {
	*tchttp.BaseRequest
	
	// <li>HostId - string - 是否必填：否 - 主机Id</li>
	// <li>RuleId - int64 - 是否必填：否 - 规则Id</li>
	// <li>PolicyId - int64 - 是否必填：否 - 规则Id</li>
	// <li>ItemName - string - 是否必填：否 - 项名称</li>
	// <li>DetectStatus - int - 是否必填：否 - 检测状态</li>
	// <li>Level - int - 是否必填：否 - 风险等级</li>
	// <li>StartTime - string - 是否必填：否 - 开始时间</li>
	// <li>EndTime - string - 是否必填：否 - 结束时间</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 限制条数,默认10,最大100
	Limit *int64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量,默认0
	Offset *int64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 排序方式: [ASC:升序|DESC:降序]
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 可选排序列: [HostCount|FirstTime|LastTime]
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

func (r *DescribeBaselineItemDetectListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeBaselineItemDetectListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Filters")
	delete(f, "Limit")
	delete(f, "Offset")
	delete(f, "Order")
	delete(f, "By")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeBaselineItemDetectListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeBaselineItemDetectListResponseParams struct {
	// 总数
	Total *int64 `json:"Total,omitnil,omitempty" name:"Total"`

	// 无
	List []*BaselineItemDetect `json:"List,omitnil,omitempty" name:"List"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeBaselineItemDetectListResponse struct {
	*tchttp.BaseResponse
	Response *DescribeBaselineItemDetectListResponseParams `json:"Response"`
}

func (r *DescribeBaselineItemDetectListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeBaselineItemDetectListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeBaselineItemIgnoreListRequestParams struct {
	// 忽略规则ID
	RuleID *int64 `json:"RuleID,omitnil,omitempty" name:"RuleID"`

	// 限制条数,默认10,最大100
	Limit *int64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 请求偏移默认0
	Offset *int64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// <li>CatgoryId - int64 - 是否必填：否 - 规则Id</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 排序方式 [ASC:升序|DESC:降序]
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 可选排序列 [ID]
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

type DescribeBaselineItemIgnoreListRequest struct {
	*tchttp.BaseRequest
	
	// 忽略规则ID
	RuleID *int64 `json:"RuleID,omitnil,omitempty" name:"RuleID"`

	// 限制条数,默认10,最大100
	Limit *int64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 请求偏移默认0
	Offset *int64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// <li>CatgoryId - int64 - 是否必填：否 - 规则Id</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 排序方式 [ASC:升序|DESC:降序]
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 可选排序列 [ID]
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

func (r *DescribeBaselineItemIgnoreListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeBaselineItemIgnoreListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "RuleID")
	delete(f, "Limit")
	delete(f, "Offset")
	delete(f, "Filters")
	delete(f, "Order")
	delete(f, "By")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeBaselineItemIgnoreListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeBaselineItemIgnoreListResponseParams struct {
	// 无
	List []*BaselineItemInfo `json:"List,omitnil,omitempty" name:"List"`

	// 总数
	Total *int64 `json:"Total,omitnil,omitempty" name:"Total"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeBaselineItemIgnoreListResponse struct {
	*tchttp.BaseResponse
	Response *DescribeBaselineItemIgnoreListResponseParams `json:"Response"`
}

func (r *DescribeBaselineItemIgnoreListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeBaselineItemIgnoreListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeBaselineItemInfoRequestParams struct {
	// <li>ItemId - int64 - 是否必填：否 - 项Id</li>
	// <li>Level - int - 是否必填：否 - 风险等级</li>
	// <li>ItemName - string - 是否必填：否 - 检测项名字</li>
	// <li>RuleId - int - 是否必填：否 - 规则Id</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 限制条数,默认10,最大100
	Limit *int64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量,默认0
	Offset *int64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 排序方式: [ASC:升序|DESC:降序]
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 可选排序列
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

type DescribeBaselineItemInfoRequest struct {
	*tchttp.BaseRequest
	
	// <li>ItemId - int64 - 是否必填：否 - 项Id</li>
	// <li>Level - int - 是否必填：否 - 风险等级</li>
	// <li>ItemName - string - 是否必填：否 - 检测项名字</li>
	// <li>RuleId - int - 是否必填：否 - 规则Id</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 限制条数,默认10,最大100
	Limit *int64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量,默认0
	Offset *int64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 排序方式: [ASC:升序|DESC:降序]
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 可选排序列
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

func (r *DescribeBaselineItemInfoRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeBaselineItemInfoRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Filters")
	delete(f, "Limit")
	delete(f, "Offset")
	delete(f, "Order")
	delete(f, "By")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeBaselineItemInfoRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeBaselineItemInfoResponseParams struct {
	// 结果列表
	List []*BaselineItemInfo `json:"List,omitnil,omitempty" name:"List"`

	// 总条目数
	Total *int64 `json:"Total,omitnil,omitempty" name:"Total"`

	// 基线分类列表
	// 注意：此字段可能返回 null，表示取不到有效值。
	CategoryList []*BaselineItemsCategory `json:"CategoryList,omitnil,omitempty" name:"CategoryList"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeBaselineItemInfoResponse struct {
	*tchttp.BaseResponse
	Response *DescribeBaselineItemInfoResponseParams `json:"Response"`
}

func (r *DescribeBaselineItemInfoResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeBaselineItemInfoResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeBaselineItemListRequestParams struct {
	// <li>PolicyId - int64 - 是否必填：否 - 策略Id</li>
	// <li>RuleId - int64 - 是否必填：否 - 规则Id</li>
	// <li>HostId - string - 是否必填：否 - 主机Id</li>
	// <li>HostName - string - 是否必填：否 - 主机名</li>
	// <li>HostIp - string - 是否必填：否 - 主机IP</li>
	// <li>ItemId - String - 是否必填：否 - 检测项Id</li>
	// <li>ItemName - String - 是否必填：否 - 项名称</li>
	// <li>DetectStatus - int - 是否必填：否 - 检测状态[0:未通过|3:通过|5:检测中]</li>
	// <li>Level - int - 是否必填：否 - 风险等级</li>
	// <li>StartTime - string - 是否必填：否 - 开始时间</li>
	// <li>EndTime - string - 是否必填：否 - 结束时间</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 限制条数,默认10,最大100
	Limit *int64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量,默认0
	Offset *int64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 排序方式: [ASC:升序|DESC:降序]
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 可选排序列
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

type DescribeBaselineItemListRequest struct {
	*tchttp.BaseRequest
	
	// <li>PolicyId - int64 - 是否必填：否 - 策略Id</li>
	// <li>RuleId - int64 - 是否必填：否 - 规则Id</li>
	// <li>HostId - string - 是否必填：否 - 主机Id</li>
	// <li>HostName - string - 是否必填：否 - 主机名</li>
	// <li>HostIp - string - 是否必填：否 - 主机IP</li>
	// <li>ItemId - String - 是否必填：否 - 检测项Id</li>
	// <li>ItemName - String - 是否必填：否 - 项名称</li>
	// <li>DetectStatus - int - 是否必填：否 - 检测状态[0:未通过|3:通过|5:检测中]</li>
	// <li>Level - int - 是否必填：否 - 风险等级</li>
	// <li>StartTime - string - 是否必填：否 - 开始时间</li>
	// <li>EndTime - string - 是否必填：否 - 结束时间</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 限制条数,默认10,最大100
	Limit *int64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量,默认0
	Offset *int64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 排序方式: [ASC:升序|DESC:降序]
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 可选排序列
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

func (r *DescribeBaselineItemListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeBaselineItemListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Filters")
	delete(f, "Limit")
	delete(f, "Offset")
	delete(f, "Order")
	delete(f, "By")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeBaselineItemListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeBaselineItemListResponseParams struct {
	// 无
	List []*BaselineItem `json:"List,omitnil,omitempty" name:"List"`

	// 总数
	Total *int64 `json:"Total,omitnil,omitempty" name:"Total"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeBaselineItemListResponse struct {
	*tchttp.BaseResponse
	Response *DescribeBaselineItemListResponseParams `json:"Response"`
}

func (r *DescribeBaselineItemListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeBaselineItemListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeBaselineItemRiskTopRequestParams struct {
	// 策略ID
	PolicyId *int64 `json:"PolicyId,omitnil,omitempty" name:"PolicyId"`
}

type DescribeBaselineItemRiskTopRequest struct {
	*tchttp.BaseRequest
	
	// 策略ID
	PolicyId *int64 `json:"PolicyId,omitnil,omitempty" name:"PolicyId"`
}

func (r *DescribeBaselineItemRiskTopRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeBaselineItemRiskTopRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "PolicyId")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeBaselineItemRiskTopRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeBaselineItemRiskTopResponseParams struct {
	// 结果数组
	RiskItemTop5 []*BaselineRiskItem `json:"RiskItemTop5,omitnil,omitempty" name:"RiskItemTop5"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeBaselineItemRiskTopResponse struct {
	*tchttp.BaseResponse
	Response *DescribeBaselineItemRiskTopResponseParams `json:"Response"`
}

func (r *DescribeBaselineItemRiskTopResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeBaselineItemRiskTopResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeBaselineListRequestParams struct {
	// 分页参数 最大100条
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 分页参数
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 过滤条件。
	// <li>StrategyId- Uint64 - 基线策略id</li>
	// <li>Status - Uint64 - 处理状态1已通过 0未通过</li>
	// <li>Level - Uint64[] - 处理状态1已通过 0未通过</li>BaselineName 
	// <li>BaselineName  - String - 基线名称</li>
	// <li>Quuid- String - 主机quuid</li>
	// <li>Uuid- String - 主机uuid</li>
	Filters []*Filters `json:"Filters,omitnil,omitempty" name:"Filters"`
}

type DescribeBaselineListRequest struct {
	*tchttp.BaseRequest
	
	// 分页参数 最大100条
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 分页参数
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 过滤条件。
	// <li>StrategyId- Uint64 - 基线策略id</li>
	// <li>Status - Uint64 - 处理状态1已通过 0未通过</li>
	// <li>Level - Uint64[] - 处理状态1已通过 0未通过</li>BaselineName 
	// <li>BaselineName  - String - 基线名称</li>
	// <li>Quuid- String - 主机quuid</li>
	// <li>Uuid- String - 主机uuid</li>
	Filters []*Filters `json:"Filters,omitnil,omitempty" name:"Filters"`
}

func (r *DescribeBaselineListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeBaselineListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Limit")
	delete(f, "Offset")
	delete(f, "Filters")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeBaselineListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeBaselineListResponseParams struct {
	// 基线信息列表
	// 注意：此字段可能返回 null，表示取不到有效值。
	BaselineList []*BaselineInfo `json:"BaselineList,omitnil,omitempty" name:"BaselineList"`

	// 分页查询记录总数
	// 注意：此字段可能返回 null，表示取不到有效值。
	TotalCount *uint64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeBaselineListResponse struct {
	*tchttp.BaseResponse
	Response *DescribeBaselineListResponseParams `json:"Response"`
}

func (r *DescribeBaselineListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeBaselineListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeBaselinePolicyListRequestParams struct {
	// <li>PolicyName - String - 是否必填：否 - 策略名称</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 限制条数,默认10,最大100
	Limit *int64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量,默认0
	Offset *int64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 排序方式: [ASC:升序|DESC:降序]
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 可选排序列: [RuleCount|ItemCount|HostCount]
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

type DescribeBaselinePolicyListRequest struct {
	*tchttp.BaseRequest
	
	// <li>PolicyName - String - 是否必填：否 - 策略名称</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 限制条数,默认10,最大100
	Limit *int64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量,默认0
	Offset *int64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 排序方式: [ASC:升序|DESC:降序]
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 可选排序列: [RuleCount|ItemCount|HostCount]
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

func (r *DescribeBaselinePolicyListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeBaselinePolicyListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Filters")
	delete(f, "Limit")
	delete(f, "Offset")
	delete(f, "Order")
	delete(f, "By")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeBaselinePolicyListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeBaselinePolicyListResponseParams struct {
	// 无
	List []*BaselinePolicy `json:"List,omitnil,omitempty" name:"List"`

	// 总数
	Total *int64 `json:"Total,omitnil,omitempty" name:"Total"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeBaselinePolicyListResponse struct {
	*tchttp.BaseResponse
	Response *DescribeBaselinePolicyListResponseParams `json:"Response"`
}

func (r *DescribeBaselinePolicyListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeBaselinePolicyListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeBaselineRuleCategoryListRequestParams struct {

}

type DescribeBaselineRuleCategoryListRequest struct {
	*tchttp.BaseRequest
	
}

func (r *DescribeBaselineRuleCategoryListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeBaselineRuleCategoryListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeBaselineRuleCategoryListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeBaselineRuleCategoryListResponseParams struct {
	// 无
	List []*BaselineCategory `json:"List,omitnil,omitempty" name:"List"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeBaselineRuleCategoryListResponse struct {
	*tchttp.BaseResponse
	Response *DescribeBaselineRuleCategoryListResponseParams `json:"Response"`
}

func (r *DescribeBaselineRuleCategoryListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeBaselineRuleCategoryListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeBaselineRuleDetectListRequestParams struct {
	// <li>PolicyId - int64 - 是否必填：否 - 策略Id</li>
	// <li>ItemId - int64 - 是否必填：否 - 策略Id</li>
	// <li>RuleName - string - 是否必填：否 - 规则名称</li>
	// <li>DetectStatus - int - 是否必填：否 - 检测状态</li>
	// <li>StartTime - string - 是否必填：否 - 开时时间</li>
	// <li>EndTime - string - 是否必填：否 - 结束时间</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 限制条数,默认10,最大100
	Limit *int64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量,默认0
	Offset *int64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 排序方式: [ASC:升序|DESC:降序]
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 可选排序列: [HostCount|FirstTime|LastTime]
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

type DescribeBaselineRuleDetectListRequest struct {
	*tchttp.BaseRequest
	
	// <li>PolicyId - int64 - 是否必填：否 - 策略Id</li>
	// <li>ItemId - int64 - 是否必填：否 - 策略Id</li>
	// <li>RuleName - string - 是否必填：否 - 规则名称</li>
	// <li>DetectStatus - int - 是否必填：否 - 检测状态</li>
	// <li>StartTime - string - 是否必填：否 - 开时时间</li>
	// <li>EndTime - string - 是否必填：否 - 结束时间</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 限制条数,默认10,最大100
	Limit *int64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量,默认0
	Offset *int64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 排序方式: [ASC:升序|DESC:降序]
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 可选排序列: [HostCount|FirstTime|LastTime]
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

func (r *DescribeBaselineRuleDetectListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeBaselineRuleDetectListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Filters")
	delete(f, "Limit")
	delete(f, "Offset")
	delete(f, "Order")
	delete(f, "By")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeBaselineRuleDetectListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeBaselineRuleDetectListResponseParams struct {
	// 无
	List []*BaselineRuleDetect `json:"List,omitnil,omitempty" name:"List"`

	// 总数
	Total *int64 `json:"Total,omitnil,omitempty" name:"Total"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeBaselineRuleDetectListResponse struct {
	*tchttp.BaseResponse
	Response *DescribeBaselineRuleDetectListResponseParams `json:"Response"`
}

func (r *DescribeBaselineRuleDetectListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeBaselineRuleDetectListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeBaselineRuleIgnoreListRequestParams struct {
	// <li>RuleName - String - 是否必填：否 - 规则名称</li>
	// <li>ItemId- int - 是否必填：否 - 检测项Id</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 限制条数,默认10,最大100
	Limit *int64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量,默认0
	Offset *int64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 排序方式: [ASC:升序|DESC:降序]
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 可选排序列: [HostCount]
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

type DescribeBaselineRuleIgnoreListRequest struct {
	*tchttp.BaseRequest
	
	// <li>RuleName - String - 是否必填：否 - 规则名称</li>
	// <li>ItemId- int - 是否必填：否 - 检测项Id</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 限制条数,默认10,最大100
	Limit *int64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量,默认0
	Offset *int64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 排序方式: [ASC:升序|DESC:降序]
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 可选排序列: [HostCount]
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

func (r *DescribeBaselineRuleIgnoreListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeBaselineRuleIgnoreListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Filters")
	delete(f, "Limit")
	delete(f, "Offset")
	delete(f, "Order")
	delete(f, "By")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeBaselineRuleIgnoreListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeBaselineRuleIgnoreListResponseParams struct {
	// 总数
	Total *int64 `json:"Total,omitnil,omitempty" name:"Total"`

	// 列表
	List []*BaselineRule `json:"List,omitnil,omitempty" name:"List"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeBaselineRuleIgnoreListResponse struct {
	*tchttp.BaseResponse
	Response *DescribeBaselineRuleIgnoreListResponseParams `json:"Response"`
}

func (r *DescribeBaselineRuleIgnoreListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeBaselineRuleIgnoreListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeBaselineRuleListRequestParams struct {
	// <li>RuleName - String - 是否必填：否 - 规则名称</li>
	// <li>CategoryId - int64 - 是否必填：否 自定义筛选为-1 - 规则分类</li>
	// <li>RuleType - int - 是否必填：否 0:系统 1:自定义 - 规则类型</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 限制条数,默认10,最大100
	Limit *int64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量,默认0
	Offset *int64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 排序方式: [ASC:升序|DESC:降序]
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 可选排序列
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

type DescribeBaselineRuleListRequest struct {
	*tchttp.BaseRequest
	
	// <li>RuleName - String - 是否必填：否 - 规则名称</li>
	// <li>CategoryId - int64 - 是否必填：否 自定义筛选为-1 - 规则分类</li>
	// <li>RuleType - int - 是否必填：否 0:系统 1:自定义 - 规则类型</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 限制条数,默认10,最大100
	Limit *int64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量,默认0
	Offset *int64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 排序方式: [ASC:升序|DESC:降序]
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 可选排序列
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

func (r *DescribeBaselineRuleListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeBaselineRuleListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Filters")
	delete(f, "Limit")
	delete(f, "Offset")
	delete(f, "Order")
	delete(f, "By")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeBaselineRuleListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeBaselineRuleListResponseParams struct {
	// 无
	List []*BaselineRule `json:"List,omitnil,omitempty" name:"List"`

	// 总数
	Total *int64 `json:"Total,omitnil,omitempty" name:"Total"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeBaselineRuleListResponse struct {
	*tchttp.BaseResponse
	Response *DescribeBaselineRuleListResponseParams `json:"Response"`
}

func (r *DescribeBaselineRuleListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeBaselineRuleListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeBaselineRuleRequestParams struct {
	// 基线id
	BaselineId *uint64 `json:"BaselineId,omitnil,omitempty" name:"BaselineId"`

	// 分页参数 最大100条
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 分页参数
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 危害等级
	Level []*uint64 `json:"Level,omitnil,omitempty" name:"Level"`

	// 状态
	Status *uint64 `json:"Status,omitnil,omitempty" name:"Status"`

	// 主机quuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 主机uuid
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`
}

type DescribeBaselineRuleRequest struct {
	*tchttp.BaseRequest
	
	// 基线id
	BaselineId *uint64 `json:"BaselineId,omitnil,omitempty" name:"BaselineId"`

	// 分页参数 最大100条
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 分页参数
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 危害等级
	Level []*uint64 `json:"Level,omitnil,omitempty" name:"Level"`

	// 状态
	Status *uint64 `json:"Status,omitnil,omitempty" name:"Status"`

	// 主机quuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 主机uuid
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`
}

func (r *DescribeBaselineRuleRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeBaselineRuleRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "BaselineId")
	delete(f, "Limit")
	delete(f, "Offset")
	delete(f, "Level")
	delete(f, "Status")
	delete(f, "Quuid")
	delete(f, "Uuid")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeBaselineRuleRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeBaselineRuleResponseParams struct {
	// 分页查询记录总数
	TotalCount *uint64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// 基线检测项列表
	// 注意：此字段可能返回 null，表示取不到有效值。
	BaselineRuleList []*BaselineRuleInfo `json:"BaselineRuleList,omitnil,omitempty" name:"BaselineRuleList"`

	// 是否显示说明列：true-是，false-否
	// 注意：此字段可能返回 null，表示取不到有效值。
	ShowRuleRemark *bool `json:"ShowRuleRemark,omitnil,omitempty" name:"ShowRuleRemark"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeBaselineRuleResponse struct {
	*tchttp.BaseResponse
	Response *DescribeBaselineRuleResponseParams `json:"Response"`
}

func (r *DescribeBaselineRuleResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeBaselineRuleResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeBaselineScanScheduleRequestParams struct {
	// 任务id
	TaskId *uint64 `json:"TaskId,omitnil,omitempty" name:"TaskId"`
}

type DescribeBaselineScanScheduleRequest struct {
	*tchttp.BaseRequest
	
	// 任务id
	TaskId *uint64 `json:"TaskId,omitnil,omitempty" name:"TaskId"`
}

func (r *DescribeBaselineScanScheduleRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeBaselineScanScheduleRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "TaskId")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeBaselineScanScheduleRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeBaselineScanScheduleResponseParams struct {
	// 检测进度(百分比)
	// 注意：此字段可能返回 null，表示取不到有效值。
	Schedule *uint64 `json:"Schedule,omitnil,omitempty" name:"Schedule"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeBaselineScanScheduleResponse struct {
	*tchttp.BaseResponse
	Response *DescribeBaselineScanScheduleResponseParams `json:"Response"`
}

func (r *DescribeBaselineScanScheduleResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeBaselineScanScheduleResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeBaselineStrategyDetailRequestParams struct {
	// 用户基线策略id
	StrategyId *uint64 `json:"StrategyId,omitnil,omitempty" name:"StrategyId"`
}

type DescribeBaselineStrategyDetailRequest struct {
	*tchttp.BaseRequest
	
	// 用户基线策略id
	StrategyId *uint64 `json:"StrategyId,omitnil,omitempty" name:"StrategyId"`
}

func (r *DescribeBaselineStrategyDetailRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeBaselineStrategyDetailRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "StrategyId")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeBaselineStrategyDetailRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeBaselineStrategyDetailResponseParams struct {
	// 策略扫描通过率
	// 注意：此字段可能返回 null，表示取不到有效值。
	PassRate *uint64 `json:"PassRate,omitnil,omitempty" name:"PassRate"`

	// 策略名
	// 注意：此字段可能返回 null，表示取不到有效值。
	StrategyName *string `json:"StrategyName,omitnil,omitempty" name:"StrategyName"`

	// 策略扫描周期(天)
	// 注意：此字段可能返回 null，表示取不到有效值。
	ScanCycle *string `json:"ScanCycle,omitnil,omitempty" name:"ScanCycle"`

	// 定期检测时间, 该时间下发扫描
	// 注意：此字段可能返回 null，表示取不到有效值。
	ScanAt *string `json:"ScanAt,omitnil,omitempty" name:"ScanAt"`

	// 扫描范围是否全部服务器, 1:是  0:否, 为1则为全部专业版主机
	// 注意：此字段可能返回 null，表示取不到有效值。
	IsGlobal *uint64 `json:"IsGlobal,omitnil,omitempty" name:"IsGlobal"`

	// 云服务器类型：
	// cvm：腾讯云服务器
	// bm：裸金属
	// ecm：边缘计算主机
	// lh: 轻量应用服务器
	// ohter: 混合云机器
	// 注意：此字段可能返回 null，表示取不到有效值。
	MachineType *string `json:"MachineType,omitnil,omitempty" name:"MachineType"`

	// 主机地域
	// 注意：此字段可能返回 null，表示取不到有效值。
	Region *string `json:"Region,omitnil,omitempty" name:"Region"`

	// 用户该策略下的所有主机id
	// 注意：此字段可能返回 null，表示取不到有效值。
	Quuids []*string `json:"Quuids,omitnil,omitempty" name:"Quuids"`

	// 用户该策略下所有的基线id
	// 注意：此字段可能返回 null，表示取不到有效值。
	CategoryIds []*string `json:"CategoryIds,omitnil,omitempty" name:"CategoryIds"`

	// 1 表示扫描过, 0没扫描过
	// 注意：此字段可能返回 null，表示取不到有效值。
	IfScanned *uint64 `json:"IfScanned,omitnil,omitempty" name:"IfScanned"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeBaselineStrategyDetailResponse struct {
	*tchttp.BaseResponse
	Response *DescribeBaselineStrategyDetailResponseParams `json:"Response"`
}

func (r *DescribeBaselineStrategyDetailResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeBaselineStrategyDetailResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeBaselineStrategyListRequestParams struct {
	// 分页参数 最大100
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 分页参数
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 规则开关，1：打开 0：关闭  2:全部
	Enabled *uint64 `json:"Enabled,omitnil,omitempty" name:"Enabled"`
}

type DescribeBaselineStrategyListRequest struct {
	*tchttp.BaseRequest
	
	// 分页参数 最大100
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 分页参数
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 规则开关，1：打开 0：关闭  2:全部
	Enabled *uint64 `json:"Enabled,omitnil,omitempty" name:"Enabled"`
}

func (r *DescribeBaselineStrategyListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeBaselineStrategyListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Limit")
	delete(f, "Offset")
	delete(f, "Enabled")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeBaselineStrategyListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeBaselineStrategyListResponseParams struct {
	// 分页查询记录的总数
	// 注意：此字段可能返回 null，表示取不到有效值。
	TotalCount *uint64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// 用户策略信息列表
	// 注意：此字段可能返回 null，表示取不到有效值。
	StrategyList []*Strategy `json:"StrategyList,omitnil,omitempty" name:"StrategyList"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeBaselineStrategyListResponse struct {
	*tchttp.BaseResponse
	Response *DescribeBaselineStrategyListResponseParams `json:"Response"`
}

func (r *DescribeBaselineStrategyListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeBaselineStrategyListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeBaselineTopRequestParams struct {
	// 动态top值
	Top *uint64 `json:"Top,omitnil,omitempty" name:"Top"`

	// 策略id
	StrategyId *uint64 `json:"StrategyId,omitnil,omitempty" name:"StrategyId"`
}

type DescribeBaselineTopRequest struct {
	*tchttp.BaseRequest
	
	// 动态top值
	Top *uint64 `json:"Top,omitnil,omitempty" name:"Top"`

	// 策略id
	StrategyId *uint64 `json:"StrategyId,omitnil,omitempty" name:"StrategyId"`
}

func (r *DescribeBaselineTopRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeBaselineTopRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Top")
	delete(f, "StrategyId")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeBaselineTopRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeBaselineTopResponseParams struct {
	// 检测项Top列表
	// 注意：此字段可能返回 null，表示取不到有效值。
	RuleTopList []*BaselineRuleTopInfo `json:"RuleTopList,omitnil,omitempty" name:"RuleTopList"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeBaselineTopResponse struct {
	*tchttp.BaseResponse
	Response *DescribeBaselineTopResponseParams `json:"Response"`
}

func (r *DescribeBaselineTopResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeBaselineTopResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeBaselineWeakPasswordListRequestParams struct {
	// <li>WeakPassword - string - 是否必填：否 - 弱口令</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 限制条数,默认10,最大100
	Limit *int64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量,默认0
	Offset *int64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 排序方式 [ASC:升序|DESC:降序]
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 可选排序列 [CreateTime|ModifyTime]
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

type DescribeBaselineWeakPasswordListRequest struct {
	*tchttp.BaseRequest
	
	// <li>WeakPassword - string - 是否必填：否 - 弱口令</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 限制条数,默认10,最大100
	Limit *int64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量,默认0
	Offset *int64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 排序方式 [ASC:升序|DESC:降序]
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 可选排序列 [CreateTime|ModifyTime]
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

func (r *DescribeBaselineWeakPasswordListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeBaselineWeakPasswordListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Filters")
	delete(f, "Limit")
	delete(f, "Offset")
	delete(f, "Order")
	delete(f, "By")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeBaselineWeakPasswordListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeBaselineWeakPasswordListResponseParams struct {
	// 总数
	Total *int64 `json:"Total,omitnil,omitempty" name:"Total"`

	// 无
	List []*BaselineWeakPassword `json:"List,omitnil,omitempty" name:"List"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeBaselineWeakPasswordListResponse struct {
	*tchttp.BaseResponse
	Response *DescribeBaselineWeakPasswordListResponseParams `json:"Response"`
}

func (r *DescribeBaselineWeakPasswordListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeBaselineWeakPasswordListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeBashEventsInfoNewRequestParams struct {
	// 事件id
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`
}

type DescribeBashEventsInfoNewRequest struct {
	*tchttp.BaseRequest
	
	// 事件id
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`
}

func (r *DescribeBashEventsInfoNewRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeBashEventsInfoNewRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Id")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeBashEventsInfoNewRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeBashEventsInfoNewResponseParams struct {
	// 事件详情
	// 注意：此字段可能返回 null，表示取不到有效值。
	BashEventsInfo *BashEventsInfoNew `json:"BashEventsInfo,omitnil,omitempty" name:"BashEventsInfo"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeBashEventsInfoNewResponse struct {
	*tchttp.BaseResponse
	Response *DescribeBashEventsInfoNewResponseParams `json:"Response"`
}

func (r *DescribeBashEventsInfoNewResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeBashEventsInfoNewResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeBashEventsInfoRequestParams struct {
	// 事件id
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`
}

type DescribeBashEventsInfoRequest struct {
	*tchttp.BaseRequest
	
	// 事件id
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`
}

func (r *DescribeBashEventsInfoRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeBashEventsInfoRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Id")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeBashEventsInfoRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeBashEventsInfoResponseParams struct {
	// 事件详情
	// 注意：此字段可能返回 null，表示取不到有效值。
	BashEventsInfo *BashEventsInfo `json:"BashEventsInfo,omitnil,omitempty" name:"BashEventsInfo"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeBashEventsInfoResponse struct {
	*tchttp.BaseResponse
	Response *DescribeBashEventsInfoResponseParams `json:"Response"`
}

func (r *DescribeBashEventsInfoResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeBashEventsInfoResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeBashEventsNewRequestParams struct {
	// 返回数量，默认为10，最大值为100。
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 过滤条件。
	// <li>HostName - String - 是否必填：否 - 主机名</li>
	// <li>Hostip - String - 是否必填：否 - 主机内网IP</li>
	// <li>HostIp - String - 是否必填：否 - 主机内网IP</li>
	// <li>RuleCategory - Int - 是否必填：否 - 策略类型,全部或者单选(0:系统 1:用户)</li>
	// <li>RuleName - String - 是否必填：否 - 策略名称</li>
	// <li>RuleLevel - Int - 是否必填：否 - 威胁等级,可以多选</li>
	// <li>Status - Int - 是否必填：否 - 处理状态,可多选(0:待处理 1:已处理 2:已加白  3:已忽略 4:已删除 5:已拦截)</li>
	// <li>DetectBy - Int - 是否必填：否 - 数据来源,可多选(0:bash日志 1:实时监控)</li>
	// <li>StartTime - String - 是否必填：否 - 开始时间</li>
	// <li>EndTime - String - 是否必填：否 - 结束时间</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 排序方式：根据请求次数排序：asc-升序/desc-降序
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 排序字段：CreateTime-发生时间。ModifyTime-处理时间
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

type DescribeBashEventsNewRequest struct {
	*tchttp.BaseRequest
	
	// 返回数量，默认为10，最大值为100。
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 过滤条件。
	// <li>HostName - String - 是否必填：否 - 主机名</li>
	// <li>Hostip - String - 是否必填：否 - 主机内网IP</li>
	// <li>HostIp - String - 是否必填：否 - 主机内网IP</li>
	// <li>RuleCategory - Int - 是否必填：否 - 策略类型,全部或者单选(0:系统 1:用户)</li>
	// <li>RuleName - String - 是否必填：否 - 策略名称</li>
	// <li>RuleLevel - Int - 是否必填：否 - 威胁等级,可以多选</li>
	// <li>Status - Int - 是否必填：否 - 处理状态,可多选(0:待处理 1:已处理 2:已加白  3:已忽略 4:已删除 5:已拦截)</li>
	// <li>DetectBy - Int - 是否必填：否 - 数据来源,可多选(0:bash日志 1:实时监控)</li>
	// <li>StartTime - String - 是否必填：否 - 开始时间</li>
	// <li>EndTime - String - 是否必填：否 - 结束时间</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 排序方式：根据请求次数排序：asc-升序/desc-降序
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 排序字段：CreateTime-发生时间。ModifyTime-处理时间
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

func (r *DescribeBashEventsNewRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeBashEventsNewRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Limit")
	delete(f, "Filters")
	delete(f, "Offset")
	delete(f, "Order")
	delete(f, "By")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeBashEventsNewRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeBashEventsNewResponseParams struct {
	// 总条数
	TotalCount *uint64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// 高危命令事件列表
	List []*BashEventNew `json:"List,omitnil,omitempty" name:"List"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeBashEventsNewResponse struct {
	*tchttp.BaseResponse
	Response *DescribeBashEventsNewResponseParams `json:"Response"`
}

func (r *DescribeBashEventsNewResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeBashEventsNewResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeBashEventsRequestParams struct {
	// 返回数量，默认为10，最大值为100。
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 过滤条件。
	// <li>HostName - String - 是否必填：否 - 主机名</li>
	// <li>Hostip - String - 是否必填：否 - 主机内网IP</li>
	// <li>RuleCategory - Int - 是否必填：否 - 策略类型,全部或者单选(0:系统 1:用户)</li>
	// <li>RuleName - String - 是否必填：否 - 策略名称</li>
	// <li>RuleLevel - Int - 是否必填：否 - 威胁等级,可以多选</li>
	// <li>Status - Int - 是否必填：否 - 处理状态,可多选(0:待处理 1:已处理 2:已加白  3:已忽略 4:已删除 5:已拦截)</li>
	// <li>DetectBy - Int - 是否必填：否 - 数据来源,可多选(0:bash日志 1:实时监控)</li>
	// <li>StartTime - String - 是否必填：否 - 开始时间</li>
	// <li>EndTime - String - 是否必填：否 - 结束时间</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 排序方式：根据请求次数排序：asc-升序/desc-降序
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 排序字段：CreateTime-发生时间。ModifyTime-处理时间
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

type DescribeBashEventsRequest struct {
	*tchttp.BaseRequest
	
	// 返回数量，默认为10，最大值为100。
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 过滤条件。
	// <li>HostName - String - 是否必填：否 - 主机名</li>
	// <li>Hostip - String - 是否必填：否 - 主机内网IP</li>
	// <li>RuleCategory - Int - 是否必填：否 - 策略类型,全部或者单选(0:系统 1:用户)</li>
	// <li>RuleName - String - 是否必填：否 - 策略名称</li>
	// <li>RuleLevel - Int - 是否必填：否 - 威胁等级,可以多选</li>
	// <li>Status - Int - 是否必填：否 - 处理状态,可多选(0:待处理 1:已处理 2:已加白  3:已忽略 4:已删除 5:已拦截)</li>
	// <li>DetectBy - Int - 是否必填：否 - 数据来源,可多选(0:bash日志 1:实时监控)</li>
	// <li>StartTime - String - 是否必填：否 - 开始时间</li>
	// <li>EndTime - String - 是否必填：否 - 结束时间</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 排序方式：根据请求次数排序：asc-升序/desc-降序
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 排序字段：CreateTime-发生时间。ModifyTime-处理时间
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

func (r *DescribeBashEventsRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeBashEventsRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Limit")
	delete(f, "Filters")
	delete(f, "Offset")
	delete(f, "Order")
	delete(f, "By")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeBashEventsRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeBashEventsResponseParams struct {
	// 总条数
	TotalCount *uint64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// 高危命令事件列表
	List []*BashEvent `json:"List,omitnil,omitempty" name:"List"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeBashEventsResponse struct {
	*tchttp.BaseResponse
	Response *DescribeBashEventsResponseParams `json:"Response"`
}

func (r *DescribeBashEventsResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeBashEventsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeBashPoliciesRequestParams struct {
	// 返回数量，最大值为100。
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 过滤条件。
	// <li>Name - String - 是否必填：否 - 规则名称</li>
	// <li>Rule - String - 是否必填：否 - 规则内容</li>
	// <li>Level - Int - 是否必填：否 - 威胁等级</li>
	// <li>White - Int - 是否必填：否 - 白名单类型</li>
	// <li>Category - Int - 是否必填：否 - 策略类型</li>
	// <li>BashAction - Int - 是否必填：否 - 操作动作</li>
	// <li>Enable - Int - 是否必填：否 - 生效状态</li>
	// <li>Id - Int - 是否必填：否 - 策略ID</li>
	// <li>PolicyId - Int - 是否必填：否 - 策略ID</li>
	// <li>RuleId - Int - 是否必填：否 - 策略ID</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`
}

type DescribeBashPoliciesRequest struct {
	*tchttp.BaseRequest
	
	// 返回数量，最大值为100。
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 过滤条件。
	// <li>Name - String - 是否必填：否 - 规则名称</li>
	// <li>Rule - String - 是否必填：否 - 规则内容</li>
	// <li>Level - Int - 是否必填：否 - 威胁等级</li>
	// <li>White - Int - 是否必填：否 - 白名单类型</li>
	// <li>Category - Int - 是否必填：否 - 策略类型</li>
	// <li>BashAction - Int - 是否必填：否 - 操作动作</li>
	// <li>Enable - Int - 是否必填：否 - 生效状态</li>
	// <li>Id - Int - 是否必填：否 - 策略ID</li>
	// <li>PolicyId - Int - 是否必填：否 - 策略ID</li>
	// <li>RuleId - Int - 是否必填：否 - 策略ID</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`
}

func (r *DescribeBashPoliciesRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeBashPoliciesRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Limit")
	delete(f, "Offset")
	delete(f, "Filters")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeBashPoliciesRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeBashPoliciesResponseParams struct {
	// 列表内容
	List []*BashPolicy `json:"List,omitnil,omitempty" name:"List"`

	// 总条数
	TotalCount *uint64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeBashPoliciesResponse struct {
	*tchttp.BaseResponse
	Response *DescribeBashPoliciesResponseParams `json:"Response"`
}

func (r *DescribeBashPoliciesResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeBashPoliciesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeBashRulesRequestParams struct {
	// 0-系统规则; 1-用户规则
	Type *uint64 `json:"Type,omitnil,omitempty" name:"Type"`

	// 返回数量，最大值为100。
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 过滤条件。
	// <li>Name - String - 是否必填：否 - 规则名称</li>
	// <li>Rule - String - 是否必填：否 - 规则内容</li>
	// <li>Level - Int - 是否必填：否 - 威胁等级</li>
	// <li>White - Int - 是否必填：否 - 白名单类型</li>
	// <li>RuleCategory - Int - 是否必填：否 - 策略类型</li>
	// <li>BashAction - Int - 是否必填：否 - 操作动作</li>
	// <li>Status - Int - 是否必填：否 - 生效状态</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`
}

type DescribeBashRulesRequest struct {
	*tchttp.BaseRequest
	
	// 0-系统规则; 1-用户规则
	Type *uint64 `json:"Type,omitnil,omitempty" name:"Type"`

	// 返回数量，最大值为100。
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 过滤条件。
	// <li>Name - String - 是否必填：否 - 规则名称</li>
	// <li>Rule - String - 是否必填：否 - 规则内容</li>
	// <li>Level - Int - 是否必填：否 - 威胁等级</li>
	// <li>White - Int - 是否必填：否 - 白名单类型</li>
	// <li>RuleCategory - Int - 是否必填：否 - 策略类型</li>
	// <li>BashAction - Int - 是否必填：否 - 操作动作</li>
	// <li>Status - Int - 是否必填：否 - 生效状态</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`
}

func (r *DescribeBashRulesRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeBashRulesRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Type")
	delete(f, "Limit")
	delete(f, "Offset")
	delete(f, "Filters")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeBashRulesRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeBashRulesResponseParams struct {
	// 列表内容
	List []*BashRule `json:"List,omitnil,omitempty" name:"List"`

	// 总条数
	TotalCount *uint64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeBashRulesResponse struct {
	*tchttp.BaseResponse
	Response *DescribeBashRulesResponseParams `json:"Response"`
}

func (r *DescribeBashRulesResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeBashRulesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeBruteAttackListRequestParams struct {
	// 需要返回的数量，最大值为100
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 过滤条件。
	// <li>IpOrAlias - String - 是否必填：否 - 主机ip或别名筛选</li>
	// <li>Uuid - String - 是否必填：否 - 主机安全唯一Uuid</li>
	// <li>Quuid - String - 是否必填：否 - 云服务器uuid</li>
	// <li>Status - String - 是否必填：否 - 状态筛选：失败：FAILED 成功：SUCCESS</li>
	// <li>UserName - String - 是否必填：否 - UserName筛选</li>
	// <li>SrcIp - String - 是否必填：否 - 来源ip筛选</li>
	// <li>CreateBeginTime - String - 是否必填：否 - 首次攻击时间筛选，开始时间</li>
	// <li>CreateEndTime - String - 是否必填：否 - 首次攻击时间筛选，结束时间</li>
	// <li>ModifyBeginTime - String - 是否必填：否 - 最近攻击时间筛选，开始时间</li>
	// <li>ModifyEndTime - String - 是否必填：否 - 最近攻击时间筛选，结束时间</li>
	// <li>Banned - String - 是否必填：否 - 阻断状态筛选，多个用","分割：0-未阻断（全局ZK开关关闭），82-未阻断(非专业版)，83-未阻断(已加白名单)，1-阻断成功(已完成)，2-未阻断-程序异常，3-未阻断-内网攻击暂不支持阻断，4-未阻断-安平暂不支持阻断，10-阻断成功(生效中)</li>
	// <li>DataFrom - Int - 命中规则：0-登录规则，1-情报规则</li>
	// <li>EventType - String - 是否必填：否 - 破解状态筛选：200-破解失败(密码错误),300-破解成功,400-破解失败(账号不存在)</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 排序方式：根据请求次数排序：asc-升序/desc-降序
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 排序字段：CreateTime-首次攻击时间
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

type DescribeBruteAttackListRequest struct {
	*tchttp.BaseRequest
	
	// 需要返回的数量，最大值为100
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 过滤条件。
	// <li>IpOrAlias - String - 是否必填：否 - 主机ip或别名筛选</li>
	// <li>Uuid - String - 是否必填：否 - 主机安全唯一Uuid</li>
	// <li>Quuid - String - 是否必填：否 - 云服务器uuid</li>
	// <li>Status - String - 是否必填：否 - 状态筛选：失败：FAILED 成功：SUCCESS</li>
	// <li>UserName - String - 是否必填：否 - UserName筛选</li>
	// <li>SrcIp - String - 是否必填：否 - 来源ip筛选</li>
	// <li>CreateBeginTime - String - 是否必填：否 - 首次攻击时间筛选，开始时间</li>
	// <li>CreateEndTime - String - 是否必填：否 - 首次攻击时间筛选，结束时间</li>
	// <li>ModifyBeginTime - String - 是否必填：否 - 最近攻击时间筛选，开始时间</li>
	// <li>ModifyEndTime - String - 是否必填：否 - 最近攻击时间筛选，结束时间</li>
	// <li>Banned - String - 是否必填：否 - 阻断状态筛选，多个用","分割：0-未阻断（全局ZK开关关闭），82-未阻断(非专业版)，83-未阻断(已加白名单)，1-阻断成功(已完成)，2-未阻断-程序异常，3-未阻断-内网攻击暂不支持阻断，4-未阻断-安平暂不支持阻断，10-阻断成功(生效中)</li>
	// <li>DataFrom - Int - 命中规则：0-登录规则，1-情报规则</li>
	// <li>EventType - String - 是否必填：否 - 破解状态筛选：200-破解失败(密码错误),300-破解成功,400-破解失败(账号不存在)</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 排序方式：根据请求次数排序：asc-升序/desc-降序
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 排序字段：CreateTime-首次攻击时间
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

func (r *DescribeBruteAttackListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeBruteAttackListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Limit")
	delete(f, "Offset")
	delete(f, "Filters")
	delete(f, "Order")
	delete(f, "By")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeBruteAttackListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeBruteAttackListResponseParams struct {
	// 总数
	// 注意：此字段可能返回 null，表示取不到有效值。
	TotalCount *uint64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// 密码破解列表
	// 注意：此字段可能返回 null，表示取不到有效值。
	BruteAttackList []*BruteAttackInfo `json:"BruteAttackList,omitnil,omitempty" name:"BruteAttackList"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeBruteAttackListResponse struct {
	*tchttp.BaseResponse
	Response *DescribeBruteAttackListResponseParams `json:"Response"`
}

func (r *DescribeBruteAttackListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeBruteAttackListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeBruteAttackRulesRequestParams struct {

}

type DescribeBruteAttackRulesRequest struct {
	*tchttp.BaseRequest
	
}

func (r *DescribeBruteAttackRulesRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeBruteAttackRulesRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeBruteAttackRulesRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeBruteAttackRulesResponseParams struct {
	// 爆破阻断规则列表
	Rules []*BruteAttackRuleList `json:"Rules,omitnil,omitempty" name:"Rules"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeBruteAttackRulesResponse struct {
	*tchttp.BaseResponse
	Response *DescribeBruteAttackRulesResponseParams `json:"Response"`
}

func (r *DescribeBruteAttackRulesResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeBruteAttackRulesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeCanFixVulMachineRequestParams struct {
	// 漏洞id 支持多个漏洞
	VulIds []*uint64 `json:"VulIds,omitnil,omitempty" name:"VulIds"`

	// 需要修复的主机，和VulIds是and 的关系
	Quuids []*string `json:"Quuids,omitnil,omitempty" name:"Quuids"`
}

type DescribeCanFixVulMachineRequest struct {
	*tchttp.BaseRequest
	
	// 漏洞id 支持多个漏洞
	VulIds []*uint64 `json:"VulIds,omitnil,omitempty" name:"VulIds"`

	// 需要修复的主机，和VulIds是and 的关系
	Quuids []*string `json:"Quuids,omitnil,omitempty" name:"Quuids"`
}

func (r *DescribeCanFixVulMachineRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeCanFixVulMachineRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "VulIds")
	delete(f, "Quuids")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeCanFixVulMachineRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeCanFixVulMachineResponseParams struct {
	// 主机漏洞修护信息列表
	// 注意：此字段可能返回 null，表示取不到有效值。
	VulInfo []*CanFixVulInfo `json:"VulInfo,omitnil,omitempty" name:"VulInfo"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeCanFixVulMachineResponse struct {
	*tchttp.BaseResponse
	Response *DescribeCanFixVulMachineResponseParams `json:"Response"`
}

func (r *DescribeCanFixVulMachineResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeCanFixVulMachineResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeCanNotSeparateMachineRequestParams struct {
	// 需要修改的事件id 数组，支持批量
	Ids []*uint64 `json:"Ids,omitnil,omitempty" name:"Ids"`

	// 是否更新全部，即是否对所有的事件进行操作，当ids 不为空时，此参数无效
	UpdateAll *bool `json:"UpdateAll,omitnil,omitempty" name:"UpdateAll"`

	// 排除的事件id,当操作全部事件时，需要排除这次id
	ExcludeId []*uint64 `json:"ExcludeId,omitnil,omitempty" name:"ExcludeId"`

	// <li>IpOrAlias - String - 是否必填：否 - 主机ip或别名筛选</li>
	// <li>FilePath - String - 是否必填：否 - 路径筛选</li>
	// <li>VirusName - String - 是否必填：否 - 描述筛选</li>
	// <li>CreateBeginTime - String - 是否必填：否 - 创建时间筛选-开始时间</li>
	// <li>CreateEndTime - String - 是否必填：否 - 创建时间筛选-结束时间</li>
	// <li>Status - String - 是否必填：否 - 状态筛选 4待处理,5信任,6已隔离,10隔离中,11恢复隔离中</li>
	Filters []*Filters `json:"Filters,omitnil,omitempty" name:"Filters"`
}

type DescribeCanNotSeparateMachineRequest struct {
	*tchttp.BaseRequest
	
	// 需要修改的事件id 数组，支持批量
	Ids []*uint64 `json:"Ids,omitnil,omitempty" name:"Ids"`

	// 是否更新全部，即是否对所有的事件进行操作，当ids 不为空时，此参数无效
	UpdateAll *bool `json:"UpdateAll,omitnil,omitempty" name:"UpdateAll"`

	// 排除的事件id,当操作全部事件时，需要排除这次id
	ExcludeId []*uint64 `json:"ExcludeId,omitnil,omitempty" name:"ExcludeId"`

	// <li>IpOrAlias - String - 是否必填：否 - 主机ip或别名筛选</li>
	// <li>FilePath - String - 是否必填：否 - 路径筛选</li>
	// <li>VirusName - String - 是否必填：否 - 描述筛选</li>
	// <li>CreateBeginTime - String - 是否必填：否 - 创建时间筛选-开始时间</li>
	// <li>CreateEndTime - String - 是否必填：否 - 创建时间筛选-结束时间</li>
	// <li>Status - String - 是否必填：否 - 状态筛选 4待处理,5信任,6已隔离,10隔离中,11恢复隔离中</li>
	Filters []*Filters `json:"Filters,omitnil,omitempty" name:"Filters"`
}

func (r *DescribeCanNotSeparateMachineRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeCanNotSeparateMachineRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Ids")
	delete(f, "UpdateAll")
	delete(f, "ExcludeId")
	delete(f, "Filters")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeCanNotSeparateMachineRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeCanNotSeparateMachineResponseParams struct {
	// 不可隔离主机列表
	List []*CanNotSeparateInfo `json:"List,omitnil,omitempty" name:"List"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeCanNotSeparateMachineResponse struct {
	*tchttp.BaseResponse
	Response *DescribeCanNotSeparateMachineResponseParams `json:"Response"`
}

func (r *DescribeCanNotSeparateMachineResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeCanNotSeparateMachineResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeClientExceptionRequestParams struct {
	// 客户端异常类型 1:客户端离线，2:客户端卸载
	ExceptionType *int64 `json:"ExceptionType,omitnil,omitempty" name:"ExceptionType"`

	// 分页的偏移量
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 分页单页限制数目，不为0，最大值100
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 起始时间 `2006-01-02 15:04:05` 格式
	StartTime *string `json:"StartTime,omitnil,omitempty" name:"StartTime"`

	// 结束时间 `2006-01-02 15:04:05` 格式
	EndTime *string `json:"EndTime,omitnil,omitempty" name:"EndTime"`
}

type DescribeClientExceptionRequest struct {
	*tchttp.BaseRequest
	
	// 客户端异常类型 1:客户端离线，2:客户端卸载
	ExceptionType *int64 `json:"ExceptionType,omitnil,omitempty" name:"ExceptionType"`

	// 分页的偏移量
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 分页单页限制数目，不为0，最大值100
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 起始时间 `2006-01-02 15:04:05` 格式
	StartTime *string `json:"StartTime,omitnil,omitempty" name:"StartTime"`

	// 结束时间 `2006-01-02 15:04:05` 格式
	EndTime *string `json:"EndTime,omitnil,omitempty" name:"EndTime"`
}

func (r *DescribeClientExceptionRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeClientExceptionRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "ExceptionType")
	delete(f, "Offset")
	delete(f, "Limit")
	delete(f, "StartTime")
	delete(f, "EndTime")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeClientExceptionRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeClientExceptionResponseParams struct {
	// 事件总数量
	TotalCount *uint64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// 事件详情
	Records []*RecordInfo `json:"Records,omitnil,omitempty" name:"Records"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeClientExceptionResponse struct {
	*tchttp.BaseResponse
	Response *DescribeClientExceptionResponseParams `json:"Response"`
}

func (r *DescribeClientExceptionResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeClientExceptionResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeCloudProtectServiceOrderListRequestParams struct {
	// 排序字段,当前支持: BeginTime
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 排序方式,当前支持:
	// ASC 正序,DESC 倒序
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

type DescribeCloudProtectServiceOrderListRequest struct {
	*tchttp.BaseRequest
	
	// 排序字段,当前支持: BeginTime
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 排序方式,当前支持:
	// ASC 正序,DESC 倒序
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

func (r *DescribeCloudProtectServiceOrderListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeCloudProtectServiceOrderListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Order")
	delete(f, "By")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeCloudProtectServiceOrderListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeCloudProtectServiceOrderListResponseParams struct {
	// 云护航订单列表信息
	Data []*CloudProtectService `json:"Data,omitnil,omitempty" name:"Data"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeCloudProtectServiceOrderListResponse struct {
	*tchttp.BaseResponse
	Response *DescribeCloudProtectServiceOrderListResponseParams `json:"Response"`
}

func (r *DescribeCloudProtectServiceOrderListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeCloudProtectServiceOrderListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeComponentStatisticsRequestParams struct {
	// 返回数量，默认为10，最大值为100。
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 过滤条件。
	// ComponentName - String - 是否必填：否 - 组件名称
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`
}

type DescribeComponentStatisticsRequest struct {
	*tchttp.BaseRequest
	
	// 返回数量，默认为10，最大值为100。
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 过滤条件。
	// ComponentName - String - 是否必填：否 - 组件名称
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`
}

func (r *DescribeComponentStatisticsRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeComponentStatisticsRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Limit")
	delete(f, "Offset")
	delete(f, "Filters")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeComponentStatisticsRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeComponentStatisticsResponseParams struct {
	// 组件统计列表记录总数。
	TotalCount *uint64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// 组件统计列表数据数组。
	ComponentStatistics []*ComponentStatistics `json:"ComponentStatistics,omitnil,omitempty" name:"ComponentStatistics"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeComponentStatisticsResponse struct {
	*tchttp.BaseResponse
	Response *DescribeComponentStatisticsResponseParams `json:"Response"`
}

func (r *DescribeComponentStatisticsResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeComponentStatisticsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeDefenceEventDetailRequestParams struct {
	// 漏洞事件id
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`
}

type DescribeDefenceEventDetailRequest struct {
	*tchttp.BaseRequest
	
	// 漏洞事件id
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`
}

func (r *DescribeDefenceEventDetailRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeDefenceEventDetailRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Id")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeDefenceEventDetailRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeDefenceEventDetailResponseParams struct {
	// 漏洞事件详细信息
	Data *VulDefenceEventDetail `json:"Data,omitnil,omitempty" name:"Data"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeDefenceEventDetailResponse struct {
	*tchttp.BaseResponse
	Response *DescribeDefenceEventDetailResponseParams `json:"Response"`
}

func (r *DescribeDefenceEventDetailResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeDefenceEventDetailResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeDirectConnectInstallCommandRequestParams struct {
	// 地域标示
	RegionCode *string `json:"RegionCode,omitnil,omitempty" name:"RegionCode"`

	// Vpc的ID
	VpcId *string `json:"VpcId,omitnil,omitempty" name:"VpcId"`

	// 命令过期时间
	ExpireDate *string `json:"ExpireDate,omitnil,omitempty" name:"ExpireDate"`
}

type DescribeDirectConnectInstallCommandRequest struct {
	*tchttp.BaseRequest
	
	// 地域标示
	RegionCode *string `json:"RegionCode,omitnil,omitempty" name:"RegionCode"`

	// Vpc的ID
	VpcId *string `json:"VpcId,omitnil,omitempty" name:"VpcId"`

	// 命令过期时间
	ExpireDate *string `json:"ExpireDate,omitnil,omitempty" name:"ExpireDate"`
}

func (r *DescribeDirectConnectInstallCommandRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeDirectConnectInstallCommandRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "RegionCode")
	delete(f, "VpcId")
	delete(f, "ExpireDate")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeDirectConnectInstallCommandRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeDirectConnectInstallCommandResponseParams struct {
	// 安装命令的ip
	Ip *string `json:"Ip,omitnil,omitempty" name:"Ip"`

	// 安装命令的token
	Token *string `json:"Token,omitnil,omitempty" name:"Token"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeDirectConnectInstallCommandResponse struct {
	*tchttp.BaseResponse
	Response *DescribeDirectConnectInstallCommandResponseParams `json:"Response"`
}

func (r *DescribeDirectConnectInstallCommandResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeDirectConnectInstallCommandResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeESAggregationsRequestParams struct {
	// ES聚合条件JSON
	Query *string `json:"Query,omitnil,omitempty" name:"Query"`
}

type DescribeESAggregationsRequest struct {
	*tchttp.BaseRequest
	
	// ES聚合条件JSON
	Query *string `json:"Query,omitnil,omitempty" name:"Query"`
}

func (r *DescribeESAggregationsRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeESAggregationsRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Query")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeESAggregationsRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeESAggregationsResponseParams struct {
	// ES聚合结果JSON
	Data *string `json:"Data,omitnil,omitempty" name:"Data"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeESAggregationsResponse struct {
	*tchttp.BaseResponse
	Response *DescribeESAggregationsResponseParams `json:"Response"`
}

func (r *DescribeESAggregationsResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeESAggregationsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeEmergencyResponseListRequestParams struct {
	// 过滤条件。
	// <li>Keyword- String - 是否必填：否 - 关键词过滤，</li>
	// <li>Uuids - String - 是否必填：否 - 主机id过滤</li>
	Filters []*Filters `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 需要返回的数量，最大值为100
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 排序步长
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 排序方法
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 排序字段 StartTime，EndTime
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

type DescribeEmergencyResponseListRequest struct {
	*tchttp.BaseRequest
	
	// 过滤条件。
	// <li>Keyword- String - 是否必填：否 - 关键词过滤，</li>
	// <li>Uuids - String - 是否必填：否 - 主机id过滤</li>
	Filters []*Filters `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 需要返回的数量，最大值为100
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 排序步长
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 排序方法
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 排序字段 StartTime，EndTime
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

func (r *DescribeEmergencyResponseListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeEmergencyResponseListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Filters")
	delete(f, "Limit")
	delete(f, "Offset")
	delete(f, "Order")
	delete(f, "By")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeEmergencyResponseListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeEmergencyResponseListResponseParams struct {
	// 总条数
	TotalCount *uint64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// 应急响应列表
	List []*EmergencyResponseInfo `json:"List,omitnil,omitempty" name:"List"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeEmergencyResponseListResponse struct {
	*tchttp.BaseResponse
	Response *DescribeEmergencyResponseListResponseParams `json:"Response"`
}

func (r *DescribeEmergencyResponseListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeEmergencyResponseListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeEmergencyVulListRequestParams struct {
	// 返回数量，最大值为100。
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 过滤条件。
	// <li>Status - String - 是否必填：是 - 漏洞状态筛选，0//未检测 1有风险 ，2无风险 ，3 检查中展示progress</li>
	// <li>Level - String - 是否必填：否 - 漏洞等级筛选 1:低 2:中 3:高 4:提示</li>
	// <li>VulName- String - 是否必填：否 - 漏洞名称搜索</li>
	// <li>Uuids- String - 是否必填：否 - 主机uuid</li>
	// <li>IsSupportDefense - int- 是否必填：否 - 是否支持防御 0:不支持 1:支持</li>
	Filters []*Filters `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 排序方式 desc , asc
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 排序字段 PublishDate  LastScanTime HostCount
	By *string `json:"By,omitnil,omitempty" name:"By"`

	// 是否热点漏洞
	HotspotAttack *bool `json:"HotspotAttack,omitnil,omitempty" name:"HotspotAttack"`
}

type DescribeEmergencyVulListRequest struct {
	*tchttp.BaseRequest
	
	// 返回数量，最大值为100。
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 过滤条件。
	// <li>Status - String - 是否必填：是 - 漏洞状态筛选，0//未检测 1有风险 ，2无风险 ，3 检查中展示progress</li>
	// <li>Level - String - 是否必填：否 - 漏洞等级筛选 1:低 2:中 3:高 4:提示</li>
	// <li>VulName- String - 是否必填：否 - 漏洞名称搜索</li>
	// <li>Uuids- String - 是否必填：否 - 主机uuid</li>
	// <li>IsSupportDefense - int- 是否必填：否 - 是否支持防御 0:不支持 1:支持</li>
	Filters []*Filters `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 排序方式 desc , asc
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 排序字段 PublishDate  LastScanTime HostCount
	By *string `json:"By,omitnil,omitempty" name:"By"`

	// 是否热点漏洞
	HotspotAttack *bool `json:"HotspotAttack,omitnil,omitempty" name:"HotspotAttack"`
}

func (r *DescribeEmergencyVulListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeEmergencyVulListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Limit")
	delete(f, "Offset")
	delete(f, "Filters")
	delete(f, "Order")
	delete(f, "By")
	delete(f, "HotspotAttack")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeEmergencyVulListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeEmergencyVulListResponseParams struct {
	// 漏洞列表
	// 注意：此字段可能返回 null，表示取不到有效值。
	List []*EmergencyVul `json:"List,omitnil,omitempty" name:"List"`

	// 漏洞总条数
	// 注意：此字段可能返回 null，表示取不到有效值。
	TotalCount *uint64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// 是否存在风险
	// 注意：此字段可能返回 null，表示取不到有效值。
	ExistsRisk *bool `json:"ExistsRisk,omitnil,omitempty" name:"ExistsRisk"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeEmergencyVulListResponse struct {
	*tchttp.BaseResponse
	Response *DescribeEmergencyVulListResponseParams `json:"Response"`
}

func (r *DescribeEmergencyVulListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeEmergencyVulListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeEventByTableRequestParams struct {
	// 事件表名
	TableName *string `json:"TableName,omitnil,omitempty" name:"TableName"`

	// 事件表id号
	Ids []*int64 `json:"Ids,omitnil,omitempty" name:"Ids"`
}

type DescribeEventByTableRequest struct {
	*tchttp.BaseRequest
	
	// 事件表名
	TableName *string `json:"TableName,omitnil,omitempty" name:"TableName"`

	// 事件表id号
	Ids []*int64 `json:"Ids,omitnil,omitempty" name:"Ids"`
}

func (r *DescribeEventByTableRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeEventByTableRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "TableName")
	delete(f, "Ids")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeEventByTableRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeEventByTableResponseParams struct {
	// 告警类型，爆破bruteattack，高危命令bash，恶意文件malware，恶意请求risk_dns，本地提权privilege_escalation，反弹shell reverse_shell，内存马java_shell
	Type *string `json:"Type,omitnil,omitempty" name:"Type"`

	// 事件内容的json编码字符串，字段结构对齐事件表
	Value *string `json:"Value,omitnil,omitempty" name:"Value"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeEventByTableResponse struct {
	*tchttp.BaseResponse
	Response *DescribeEventByTableResponseParams `json:"Response"`
}

func (r *DescribeEventByTableResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeEventByTableResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeExpertServiceListRequestParams struct {
	// 过滤条件。
	// <li>Keyword- String - 是否必填：否 - 关键词过滤，</li>
	// <li>Uuids - String - 是否必填：否 - 主机id过滤</li>
	Filters []*Filters `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 需要返回的数量，最大值为100
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 排序步长
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 排序方法
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 排序字段 StartTime，EndTime
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

type DescribeExpertServiceListRequest struct {
	*tchttp.BaseRequest
	
	// 过滤条件。
	// <li>Keyword- String - 是否必填：否 - 关键词过滤，</li>
	// <li>Uuids - String - 是否必填：否 - 主机id过滤</li>
	Filters []*Filters `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 需要返回的数量，最大值为100
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 排序步长
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 排序方法
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 排序字段 StartTime，EndTime
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

func (r *DescribeExpertServiceListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeExpertServiceListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Filters")
	delete(f, "Limit")
	delete(f, "Offset")
	delete(f, "Order")
	delete(f, "By")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeExpertServiceListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeExpertServiceListResponseParams struct {
	// 总条数
	TotalCount *uint64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// 安全管家数据
	List []*SecurityButlerInfo `json:"List,omitnil,omitempty" name:"List"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeExpertServiceListResponse struct {
	*tchttp.BaseResponse
	Response *DescribeExpertServiceListResponseParams `json:"Response"`
}

func (r *DescribeExpertServiceListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeExpertServiceListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeExpertServiceOrderListRequestParams struct {
	// <li>InquireType- String - 是否必填：否 - 订单类型过滤，</li>
	Filters []*Filters `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 分页条数 最大100条
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 分页步长
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`
}

type DescribeExpertServiceOrderListRequest struct {
	*tchttp.BaseRequest
	
	// <li>InquireType- String - 是否必填：否 - 订单类型过滤，</li>
	Filters []*Filters `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 分页条数 最大100条
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 分页步长
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`
}

func (r *DescribeExpertServiceOrderListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeExpertServiceOrderListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Filters")
	delete(f, "Limit")
	delete(f, "Offset")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeExpertServiceOrderListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeExpertServiceOrderListResponseParams struct {
	// 总条数
	TotalCount *uint64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// 订单列表
	List []*ExpertServiceOrderInfo `json:"List,omitnil,omitempty" name:"List"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeExpertServiceOrderListResponse struct {
	*tchttp.BaseResponse
	Response *DescribeExpertServiceOrderListResponseParams `json:"Response"`
}

func (r *DescribeExpertServiceOrderListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeExpertServiceOrderListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeExportMachinesRequestParams struct {
	// 云主机类型。
	// <li>CVM：表示虚拟主机</li>
	// <li>BM:  表示黑石物理机</li>
	MachineType *string `json:"MachineType,omitnil,omitempty" name:"MachineType"`

	// 机器所属地域。如：ap-guangzhou，ap-shanghai
	MachineRegion *string `json:"MachineRegion,omitnil,omitempty" name:"MachineRegion"`

	// 返回数量，默认为10，最大值为100。
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 过滤条件。
	// <li>Keywords - String - 是否必填：否 - 查询关键字 </li>
	// <li>Status - String - 是否必填：否 - 客户端在线状态（OFFLINE: 离线 | ONLINE: 在线 | UNINSTALLED：未安装）</li>
	// <li>Version - String  是否必填：否 - 当前防护版本（ PRO_VERSION：专业版 | BASIC_VERSION：基础版）</li>
	// 每个过滤条件只支持一个值，暂不支持多个值“或”关系查询
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 机器所属业务ID列表
	ProjectIds []*uint64 `json:"ProjectIds,omitnil,omitempty" name:"ProjectIds"`
}

type DescribeExportMachinesRequest struct {
	*tchttp.BaseRequest
	
	// 云主机类型。
	// <li>CVM：表示虚拟主机</li>
	// <li>BM:  表示黑石物理机</li>
	MachineType *string `json:"MachineType,omitnil,omitempty" name:"MachineType"`

	// 机器所属地域。如：ap-guangzhou，ap-shanghai
	MachineRegion *string `json:"MachineRegion,omitnil,omitempty" name:"MachineRegion"`

	// 返回数量，默认为10，最大值为100。
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 过滤条件。
	// <li>Keywords - String - 是否必填：否 - 查询关键字 </li>
	// <li>Status - String - 是否必填：否 - 客户端在线状态（OFFLINE: 离线 | ONLINE: 在线 | UNINSTALLED：未安装）</li>
	// <li>Version - String  是否必填：否 - 当前防护版本（ PRO_VERSION：专业版 | BASIC_VERSION：基础版）</li>
	// 每个过滤条件只支持一个值，暂不支持多个值“或”关系查询
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 机器所属业务ID列表
	ProjectIds []*uint64 `json:"ProjectIds,omitnil,omitempty" name:"ProjectIds"`
}

func (r *DescribeExportMachinesRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeExportMachinesRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "MachineType")
	delete(f, "MachineRegion")
	delete(f, "Limit")
	delete(f, "Offset")
	delete(f, "Filters")
	delete(f, "ProjectIds")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeExportMachinesRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeExportMachinesResponseParams struct {
	// 任务ID,需要到接口“异步导出任务”ExportTasks获取DownloadUrl下载地址
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeExportMachinesResponse struct {
	*tchttp.BaseResponse
	Response *DescribeExportMachinesResponseParams `json:"Response"`
}

func (r *DescribeExportMachinesResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeExportMachinesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeFastAnalysisRequestParams struct {
	// 起始时间，单位ms
	From *int64 `json:"From,omitnil,omitempty" name:"From"`

	// 结束时间，单位ms
	To *int64 `json:"To,omitnil,omitempty" name:"To"`

	// 查询语句，语句长度最大为4096
	Query *string `json:"Query,omitnil,omitempty" name:"Query"`

	// 日志字段名称
	FieldName *string `json:"FieldName,omitnil,omitempty" name:"FieldName"`
}

type DescribeFastAnalysisRequest struct {
	*tchttp.BaseRequest
	
	// 起始时间，单位ms
	From *int64 `json:"From,omitnil,omitempty" name:"From"`

	// 结束时间，单位ms
	To *int64 `json:"To,omitnil,omitempty" name:"To"`

	// 查询语句，语句长度最大为4096
	Query *string `json:"Query,omitnil,omitempty" name:"Query"`

	// 日志字段名称
	FieldName *string `json:"FieldName,omitnil,omitempty" name:"FieldName"`
}

func (r *DescribeFastAnalysisRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeFastAnalysisRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "From")
	delete(f, "To")
	delete(f, "Query")
	delete(f, "FieldName")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeFastAnalysisRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeFastAnalysisResponseParams struct {
	// 分析统计信息
	// 注意：此字段可能返回 null，表示取不到有效值。
	FieldValueRatioInfos []*FieldValueRatioInfo `json:"FieldValueRatioInfos,omitnil,omitempty" name:"FieldValueRatioInfos"`

	// 总数
	TotalCount *int64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeFastAnalysisResponse struct {
	*tchttp.BaseResponse
	Response *DescribeFastAnalysisResponseParams `json:"Response"`
}

func (r *DescribeFastAnalysisResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeFastAnalysisResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeFileTamperEventRuleInfoRequestParams struct {
	// 事件id
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`

	// 一页多少个 控制返回的uuids条数
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 控制返回的uuids条数
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`
}

type DescribeFileTamperEventRuleInfoRequest struct {
	*tchttp.BaseRequest
	
	// 事件id
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`

	// 一页多少个 控制返回的uuids条数
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 控制返回的uuids条数
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`
}

func (r *DescribeFileTamperEventRuleInfoRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeFileTamperEventRuleInfoRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Id")
	delete(f, "Limit")
	delete(f, "Offset")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeFileTamperEventRuleInfoRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeFileTamperEventRuleInfoResponseParams struct {
	// 规则详情信息
	FileTamperRuleDetail *FileTamperRuleDetail `json:"FileTamperRuleDetail,omitnil,omitempty" name:"FileTamperRuleDetail"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeFileTamperEventRuleInfoResponse struct {
	*tchttp.BaseResponse
	Response *DescribeFileTamperEventRuleInfoResponseParams `json:"Response"`
}

func (r *DescribeFileTamperEventRuleInfoResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeFileTamperEventRuleInfoResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeFileTamperEventsRequestParams struct {
	// 过滤条件。
	// <li>Status - String - 是否必填：否 - 处理状态  0 -- 待处理 1 -- 已加白 2 -- 已删除 3 - 已忽略</li>
	// <li>ModifyTime - String - 是否必填：否 - 最近发生时间</li>
	// <li>Uuid- String - 是否必填：否 - 主机uuid查询</li>
	// <li>RuleCategory- string - 是否必填：否 - 规则类别 0 系统规则 1 自定义规则</li>
	// <li>FileAction- string - 是否必填：否 - 威胁行为 read 读取文件 write 写文件</li>
	Filters []*Filters `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 需要返回的数量，默认为10，最大值为100
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 排序方式 ASC,DESC
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 排序字段 CreateTime、ModifyTime
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

type DescribeFileTamperEventsRequest struct {
	*tchttp.BaseRequest
	
	// 过滤条件。
	// <li>Status - String - 是否必填：否 - 处理状态  0 -- 待处理 1 -- 已加白 2 -- 已删除 3 - 已忽略</li>
	// <li>ModifyTime - String - 是否必填：否 - 最近发生时间</li>
	// <li>Uuid- String - 是否必填：否 - 主机uuid查询</li>
	// <li>RuleCategory- string - 是否必填：否 - 规则类别 0 系统规则 1 自定义规则</li>
	// <li>FileAction- string - 是否必填：否 - 威胁行为 read 读取文件 write 写文件</li>
	Filters []*Filters `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 需要返回的数量，默认为10，最大值为100
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 排序方式 ASC,DESC
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 排序字段 CreateTime、ModifyTime
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

func (r *DescribeFileTamperEventsRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeFileTamperEventsRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Filters")
	delete(f, "Offset")
	delete(f, "Limit")
	delete(f, "Order")
	delete(f, "By")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeFileTamperEventsRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeFileTamperEventsResponseParams struct {
	// 核心文件事件列表
	// 注意：此字段可能返回 null，表示取不到有效值。
	List []*FileTamperEvent `json:"List,omitnil,omitempty" name:"List"`

	// 数据总条数
	TotalCount *uint64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeFileTamperEventsResponse struct {
	*tchttp.BaseResponse
	Response *DescribeFileTamperEventsResponseParams `json:"Response"`
}

func (r *DescribeFileTamperEventsResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeFileTamperEventsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeFileTamperRuleCountRequestParams struct {
	// 查询的主机uuids 一次性最多只能查100个
	Uuids []*string `json:"Uuids,omitnil,omitempty" name:"Uuids"`
}

type DescribeFileTamperRuleCountRequest struct {
	*tchttp.BaseRequest
	
	// 查询的主机uuids 一次性最多只能查100个
	Uuids []*string `json:"Uuids,omitnil,omitempty" name:"Uuids"`
}

func (r *DescribeFileTamperRuleCountRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeFileTamperRuleCountRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Uuids")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeFileTamperRuleCountRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeFileTamperRuleCountResponseParams struct {
	// 主机关联核心文件规则数量信息
	// 注意：此字段可能返回 null，表示取不到有效值。
	List []*FileTamperRuleCount `json:"List,omitnil,omitempty" name:"List"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeFileTamperRuleCountResponse struct {
	*tchttp.BaseResponse
	Response *DescribeFileTamperRuleCountResponseParams `json:"Response"`
}

func (r *DescribeFileTamperRuleCountResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeFileTamperRuleCountResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeFileTamperRuleInfoRequestParams struct {
	// 规则id
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`

	// 控制返回的uuids 数量
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 控制返回的uuids 数量，起始位置
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`
}

type DescribeFileTamperRuleInfoRequest struct {
	*tchttp.BaseRequest
	
	// 规则id
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`

	// 控制返回的uuids 数量
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 控制返回的uuids 数量，起始位置
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`
}

func (r *DescribeFileTamperRuleInfoRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeFileTamperRuleInfoRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Id")
	delete(f, "Limit")
	delete(f, "Offset")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeFileTamperRuleInfoRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeFileTamperRuleInfoResponseParams struct {
	// 规则详情信息
	FileTamperRuleDetail *FileTamperRuleDetail `json:"FileTamperRuleDetail,omitnil,omitempty" name:"FileTamperRuleDetail"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeFileTamperRuleInfoResponse struct {
	*tchttp.BaseResponse
	Response *DescribeFileTamperRuleInfoResponseParams `json:"Response"`
}

func (r *DescribeFileTamperRuleInfoResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeFileTamperRuleInfoResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeFileTamperRulesRequestParams struct {
	// 过滤条件。
	// <li>RuleCategory- string- 规则类别  0=系统规则，1=用户规则</li>
	// <li>Name- String - 规则名称</li>
	Filters []*Filters `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 需要返回的数量，默认为10，最大值为100
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 排序方式 ASC,DESC
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 排序字段 CreateTime、ModifyTime、HostCount
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

type DescribeFileTamperRulesRequest struct {
	*tchttp.BaseRequest
	
	// 过滤条件。
	// <li>RuleCategory- string- 规则类别  0=系统规则，1=用户规则</li>
	// <li>Name- String - 规则名称</li>
	Filters []*Filters `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 需要返回的数量，默认为10，最大值为100
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 排序方式 ASC,DESC
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 排序字段 CreateTime、ModifyTime、HostCount
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

func (r *DescribeFileTamperRulesRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeFileTamperRulesRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Filters")
	delete(f, "Offset")
	delete(f, "Limit")
	delete(f, "Order")
	delete(f, "By")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeFileTamperRulesRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeFileTamperRulesResponseParams struct {
	// 规则列表
	// 注意：此字段可能返回 null，表示取不到有效值。
	List []*FileTamperRuleInfo `json:"List,omitnil,omitempty" name:"List"`

	// 总数
	TotalCount *uint64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeFileTamperRulesResponse struct {
	*tchttp.BaseResponse
	Response *DescribeFileTamperRulesResponseParams `json:"Response"`
}

func (r *DescribeFileTamperRulesResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeFileTamperRulesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeGeneralStatRequestParams struct {
	// 云主机类型。
	// <li>CVM：表示腾讯云服务器</li>
	// <li>BM:  表示黑石物理机</li>
	// <li>ECM:  表示边缘计算服务器</li>
	// <li>LH:  表示轻量应用服务器</li>
	// <li>Other:  表示混合云机器</li>
	MachineType *string `json:"MachineType,omitnil,omitempty" name:"MachineType"`

	// 机器所属地域。如：ap-guangzhou，ap-shanghai
	MachineRegion *string `json:"MachineRegion,omitnil,omitempty" name:"MachineRegion"`
}

type DescribeGeneralStatRequest struct {
	*tchttp.BaseRequest
	
	// 云主机类型。
	// <li>CVM：表示腾讯云服务器</li>
	// <li>BM:  表示黑石物理机</li>
	// <li>ECM:  表示边缘计算服务器</li>
	// <li>LH:  表示轻量应用服务器</li>
	// <li>Other:  表示混合云机器</li>
	MachineType *string `json:"MachineType,omitnil,omitempty" name:"MachineType"`

	// 机器所属地域。如：ap-guangzhou，ap-shanghai
	MachineRegion *string `json:"MachineRegion,omitnil,omitempty" name:"MachineRegion"`
}

func (r *DescribeGeneralStatRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeGeneralStatRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "MachineType")
	delete(f, "MachineRegion")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeGeneralStatRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeGeneralStatResponseParams struct {
	// 云主机总数
	MachinesAll *uint64 `json:"MachinesAll,omitnil,omitempty" name:"MachinesAll"`

	// 云主机没有安装主机安全客户端的总数
	MachinesUninstalled *uint64 `json:"MachinesUninstalled,omitnil,omitempty" name:"MachinesUninstalled"`

	// 主机安全客户端总数的总数
	AgentsAll *uint64 `json:"AgentsAll,omitnil,omitempty" name:"AgentsAll"`

	// 主机安全客户端在线的总数
	AgentsOnline *uint64 `json:"AgentsOnline,omitnil,omitempty" name:"AgentsOnline"`

	// 主机安全客户端 离线+关机 的总数
	AgentsOffline *uint64 `json:"AgentsOffline,omitnil,omitempty" name:"AgentsOffline"`

	// 主机安全客户端专业版的总数
	AgentsPro *uint64 `json:"AgentsPro,omitnil,omitempty" name:"AgentsPro"`

	// 主机安全客户端基础版的总数
	AgentsBasic *uint64 `json:"AgentsBasic,omitnil,omitempty" name:"AgentsBasic"`

	// 7天内到期的预付费专业版总数
	AgentsProExpireWithInSevenDays *uint64 `json:"AgentsProExpireWithInSevenDays,omitnil,omitempty" name:"AgentsProExpireWithInSevenDays"`

	// 风险主机总数
	RiskMachine *uint64 `json:"RiskMachine,omitnil,omitempty" name:"RiskMachine"`

	// 已关机总数
	Shutdown *uint64 `json:"Shutdown,omitnil,omitempty" name:"Shutdown"`

	// 已离线总数
	Offline *uint64 `json:"Offline,omitnil,omitempty" name:"Offline"`

	// 旗舰版主机数
	// 注意：此字段可能返回 null，表示取不到有效值。
	FlagshipMachineCnt *uint64 `json:"FlagshipMachineCnt,omitnil,omitempty" name:"FlagshipMachineCnt"`

	// 保护天数
	// 注意：此字段可能返回 null，表示取不到有效值。
	ProtectDays *uint64 `json:"ProtectDays,omitnil,omitempty" name:"ProtectDays"`

	// 15天内新增的主机数
	// 注意：此字段可能返回 null，表示取不到有效值。
	AddedOnTheFifteen *uint64 `json:"AddedOnTheFifteen,omitnil,omitempty" name:"AddedOnTheFifteen"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeGeneralStatResponse struct {
	*tchttp.BaseResponse
	Response *DescribeGeneralStatResponseParams `json:"Response"`
}

func (r *DescribeGeneralStatResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeGeneralStatResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeHistoryAccountsRequestParams struct {
	// 云镜客户端唯一Uuid。
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 返回数量，默认为10，最大值为100。
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 过滤条件。
	// <li>Username - String - 是否必填：否 - 帐号名</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`
}

type DescribeHistoryAccountsRequest struct {
	*tchttp.BaseRequest
	
	// 云镜客户端唯一Uuid。
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 返回数量，默认为10，最大值为100。
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 过滤条件。
	// <li>Username - String - 是否必填：否 - 帐号名</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`
}

func (r *DescribeHistoryAccountsRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeHistoryAccountsRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Uuid")
	delete(f, "Limit")
	delete(f, "Offset")
	delete(f, "Filters")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeHistoryAccountsRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeHistoryAccountsResponseParams struct {
	// 帐号变更历史列表记录总数。
	TotalCount *uint64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// 帐号变更历史数据数组。
	HistoryAccounts []*HistoryAccount `json:"HistoryAccounts,omitnil,omitempty" name:"HistoryAccounts"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeHistoryAccountsResponse struct {
	*tchttp.BaseResponse
	Response *DescribeHistoryAccountsResponseParams `json:"Response"`
}

func (r *DescribeHistoryAccountsResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeHistoryAccountsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeHistoryServiceRequestParams struct {

}

type DescribeHistoryServiceRequest struct {
	*tchttp.BaseRequest
	
}

func (r *DescribeHistoryServiceRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeHistoryServiceRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeHistoryServiceRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeHistoryServiceResponseParams struct {
	// 1 可购买 2 只能升降配 3 只能跳到续费管理页
	BuyStatus *uint64 `json:"BuyStatus,omitnil,omitempty" name:"BuyStatus"`

	// 用户已购容量 单位 G
	InquireNum *uint64 `json:"InquireNum,omitnil,omitempty" name:"InquireNum"`

	// 到期时间
	EndTime *string `json:"EndTime,omitnil,omitempty" name:"EndTime"`

	// 是否自动续费,0 初始值, 1 开通 2 没开通
	IsAutoOpenRenew *uint64 `json:"IsAutoOpenRenew,omitnil,omitempty" name:"IsAutoOpenRenew"`

	// 资源ID
	ResourceId *string `json:"ResourceId,omitnil,omitempty" name:"ResourceId"`

	// 0 没开通 1 正常 2隔离 3销毁
	Status *uint64 `json:"Status,omitnil,omitempty" name:"Status"`

	// 开始时间
	StartTime *string `json:"StartTime,omitnil,omitempty" name:"StartTime"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeHistoryServiceResponse struct {
	*tchttp.BaseResponse
	Response *DescribeHistoryServiceResponseParams `json:"Response"`
}

func (r *DescribeHistoryServiceResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeHistoryServiceResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeHostInfoRequestParams struct {
	// 主机Quuid数组
	QuuidList []*string `json:"QuuidList,omitnil,omitempty" name:"QuuidList"`

	// Uuids 查询，Quuid查询时填空
	Uuids []*string `json:"Uuids,omitnil,omitempty" name:"Uuids"`
}

type DescribeHostInfoRequest struct {
	*tchttp.BaseRequest
	
	// 主机Quuid数组
	QuuidList []*string `json:"QuuidList,omitnil,omitempty" name:"QuuidList"`

	// Uuids 查询，Quuid查询时填空
	Uuids []*string `json:"Uuids,omitnil,omitempty" name:"Uuids"`
}

func (r *DescribeHostInfoRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeHostInfoRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "QuuidList")
	delete(f, "Uuids")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeHostInfoRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeHostInfoResponseParams struct {
	// 主机信息与标签信息
	// 注意：此字段可能返回 null，表示取不到有效值。
	HostInfoList []*HostTagInfo `json:"HostInfoList,omitnil,omitempty" name:"HostInfoList"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeHostInfoResponse struct {
	*tchttp.BaseResponse
	Response *DescribeHostInfoResponseParams `json:"Response"`
}

func (r *DescribeHostInfoResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeHostInfoResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeHostLoginListRequestParams struct {
	// 需要返回的数量，最大值为100
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 过滤条件。<li>Quuid - String - 是否必填：否 - 云服务器uuid</li><li>Uuid - String - 是否必填：否 - 主机安全唯一Uuid</li><li>MachineName - String - 是否必填：否 - 主机别名</li><li>Ip - String - 是否必填：否 - 主机ip</li><li>InstanceID - String - 是否必填：否 - 主机实例ID</li><li>SrcIp - String - 是否必填：否 - 来源ip筛选</li><li>UserName - String - 是否必填：否 - 用户名筛选</li><li>Status - string - 是否必填：否 - 状态筛选1:正常登录；5：已加白,14:已处理，15：已忽略</li><li>LoginTimeBegin - String - 是否必填：否 - 按照修改时间段筛选，开始时间</li><li>LoginTimeEnd - String - 是否必填：否 - 按照修改时间段筛选，结束时间</li><li>RiskLevel - string - 是否必填：否 - 状态筛选0:高危；1：可疑</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 排序方式：根据请求次数排序：asc-升序/desc-降序
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 排序字段：LoginTime-发生时间
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

type DescribeHostLoginListRequest struct {
	*tchttp.BaseRequest
	
	// 需要返回的数量，最大值为100
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 过滤条件。<li>Quuid - String - 是否必填：否 - 云服务器uuid</li><li>Uuid - String - 是否必填：否 - 主机安全唯一Uuid</li><li>MachineName - String - 是否必填：否 - 主机别名</li><li>Ip - String - 是否必填：否 - 主机ip</li><li>InstanceID - String - 是否必填：否 - 主机实例ID</li><li>SrcIp - String - 是否必填：否 - 来源ip筛选</li><li>UserName - String - 是否必填：否 - 用户名筛选</li><li>Status - string - 是否必填：否 - 状态筛选1:正常登录；5：已加白,14:已处理，15：已忽略</li><li>LoginTimeBegin - String - 是否必填：否 - 按照修改时间段筛选，开始时间</li><li>LoginTimeEnd - String - 是否必填：否 - 按照修改时间段筛选，结束时间</li><li>RiskLevel - string - 是否必填：否 - 状态筛选0:高危；1：可疑</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 排序方式：根据请求次数排序：asc-升序/desc-降序
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 排序字段：LoginTime-发生时间
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

func (r *DescribeHostLoginListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeHostLoginListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Limit")
	delete(f, "Offset")
	delete(f, "Filters")
	delete(f, "Order")
	delete(f, "By")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeHostLoginListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeHostLoginListResponseParams struct {
	// 总数
	TotalCount *uint64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// 登录审计列表
	// 注意：此字段可能返回 null，表示取不到有效值。
	HostLoginList []*HostLoginList `json:"HostLoginList,omitnil,omitempty" name:"HostLoginList"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeHostLoginListResponse struct {
	*tchttp.BaseResponse
	Response *DescribeHostLoginListResponseParams `json:"Response"`
}

func (r *DescribeHostLoginListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeHostLoginListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeHotVulTopRequestParams struct {

}

type DescribeHotVulTopRequest struct {
	*tchttp.BaseRequest
	
}

func (r *DescribeHotVulTopRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeHotVulTopRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeHotVulTopRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeHotVulTopResponseParams struct {
	// 漏洞信息
	// 注意：此字段可能返回 null，表示取不到有效值。
	List []*VulStoreListInfo `json:"List,omitnil,omitempty" name:"List"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeHotVulTopResponse struct {
	*tchttp.BaseResponse
	Response *DescribeHotVulTopResponseParams `json:"Response"`
}

func (r *DescribeHotVulTopResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeHotVulTopResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeIgnoreBaselineRuleRequestParams struct {
	// 分页参数 最大100条
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 分页参数
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 检测项名称
	RuleName *string `json:"RuleName,omitnil,omitempty" name:"RuleName"`
}

type DescribeIgnoreBaselineRuleRequest struct {
	*tchttp.BaseRequest
	
	// 分页参数 最大100条
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 分页参数
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 检测项名称
	RuleName *string `json:"RuleName,omitnil,omitempty" name:"RuleName"`
}

func (r *DescribeIgnoreBaselineRuleRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeIgnoreBaselineRuleRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Limit")
	delete(f, "Offset")
	delete(f, "RuleName")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeIgnoreBaselineRuleRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeIgnoreBaselineRuleResponseParams struct {
	// 忽略基线检测项列表信息
	// 注意：此字段可能返回 null，表示取不到有效值。
	IgnoreBaselineRuleList []*IgnoreBaselineRule `json:"IgnoreBaselineRuleList,omitnil,omitempty" name:"IgnoreBaselineRuleList"`

	// 分页查询记录总数
	// 注意：此字段可能返回 null，表示取不到有效值。
	TotalCount *uint64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeIgnoreBaselineRuleResponse struct {
	*tchttp.BaseResponse
	Response *DescribeIgnoreBaselineRuleResponseParams `json:"Response"`
}

func (r *DescribeIgnoreBaselineRuleResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeIgnoreBaselineRuleResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeIgnoreHostAndItemConfigRequestParams struct {
	// <li>ItemId - int64 - 是否必填：否 - 项Id</i>
	// <li>RuleId - int64 - 是否必填：否 - 规则Id</li>
	// <li>HostId - string - 是否必填：否 - 主机Id</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`
}

type DescribeIgnoreHostAndItemConfigRequest struct {
	*tchttp.BaseRequest
	
	// <li>ItemId - int64 - 是否必填：否 - 项Id</i>
	// <li>RuleId - int64 - 是否必填：否 - 规则Id</li>
	// <li>HostId - string - 是否必填：否 - 主机Id</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`
}

func (r *DescribeIgnoreHostAndItemConfigRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeIgnoreHostAndItemConfigRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Filters")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeIgnoreHostAndItemConfigRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeIgnoreHostAndItemConfigResponseParams struct {
	// 受影响检测项
	// 注意：此字段可能返回 null，表示取不到有效值。
	ItemSet []*BaselineItemInfo `json:"ItemSet,omitnil,omitempty" name:"ItemSet"`

	// 受影响主机
	// 注意：此字段可能返回 null，表示取不到有效值。
	HostSet []*BaselineHost `json:"HostSet,omitnil,omitempty" name:"HostSet"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeIgnoreHostAndItemConfigResponse struct {
	*tchttp.BaseResponse
	Response *DescribeIgnoreHostAndItemConfigResponseParams `json:"Response"`
}

func (r *DescribeIgnoreHostAndItemConfigResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeIgnoreHostAndItemConfigResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeIgnoreRuleEffectHostListRequestParams struct {
	// 分页参数 最大100条
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 分页参数
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 检测项id
	RuleId *uint64 `json:"RuleId,omitnil,omitempty" name:"RuleId"`

	// 过滤条件。
	// <li>AliasName- String- 主机别名</li>
	Filters []*Filters `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 主机标签名
	TagNames []*string `json:"TagNames,omitnil,omitempty" name:"TagNames"`
}

type DescribeIgnoreRuleEffectHostListRequest struct {
	*tchttp.BaseRequest
	
	// 分页参数 最大100条
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 分页参数
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 检测项id
	RuleId *uint64 `json:"RuleId,omitnil,omitempty" name:"RuleId"`

	// 过滤条件。
	// <li>AliasName- String- 主机别名</li>
	Filters []*Filters `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 主机标签名
	TagNames []*string `json:"TagNames,omitnil,omitempty" name:"TagNames"`
}

func (r *DescribeIgnoreRuleEffectHostListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeIgnoreRuleEffectHostListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Limit")
	delete(f, "Offset")
	delete(f, "RuleId")
	delete(f, "Filters")
	delete(f, "TagNames")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeIgnoreRuleEffectHostListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeIgnoreRuleEffectHostListResponseParams struct {
	// 忽略检测项影响主机列表
	// 注意：此字段可能返回 null，表示取不到有效值。
	IgnoreRuleEffectHostList []*IgnoreRuleEffectHostInfo `json:"IgnoreRuleEffectHostList,omitnil,omitempty" name:"IgnoreRuleEffectHostList"`

	// 分页查询记录总数
	TotalCount *uint64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeIgnoreRuleEffectHostListResponse struct {
	*tchttp.BaseResponse
	Response *DescribeIgnoreRuleEffectHostListResponseParams `json:"Response"`
}

func (r *DescribeIgnoreRuleEffectHostListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeIgnoreRuleEffectHostListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeImportMachineInfoRequestParams struct {
	// 服务器内网IP（默认）/ 服务器名称 / 服务器ID 数组 (最大 1000条)
	MachineList []*string `json:"MachineList,omitnil,omitempty" name:"MachineList"`

	// 批量导入的数据类型：Ip、Name、Id 三选一
	ImportType *string `json:"ImportType,omitnil,omitempty" name:"ImportType"`

	// 该参数已作废.
	IsQueryProMachine *bool `json:"IsQueryProMachine,omitnil,omitempty" name:"IsQueryProMachine"`

	// 过滤条件：
	// <li>Version - String  是否必填：否 - 当前防护版本（ PRO_VERSION：专业版 | BASIC_VERSION：基础版 | Flagship：旗舰版 | ProtectedMachines：专业版+旗舰版） | BASIC_PROPOST_GENERAL_DISCOUNT：普惠版+专业版按量计费+基础版主机 | UnFlagship：专业版预付费+专业版后付费+基础版+普惠版</li>
	Filters []*Filters `json:"Filters,omitnil,omitempty" name:"Filters"`
}

type DescribeImportMachineInfoRequest struct {
	*tchttp.BaseRequest
	
	// 服务器内网IP（默认）/ 服务器名称 / 服务器ID 数组 (最大 1000条)
	MachineList []*string `json:"MachineList,omitnil,omitempty" name:"MachineList"`

	// 批量导入的数据类型：Ip、Name、Id 三选一
	ImportType *string `json:"ImportType,omitnil,omitempty" name:"ImportType"`

	// 该参数已作废.
	IsQueryProMachine *bool `json:"IsQueryProMachine,omitnil,omitempty" name:"IsQueryProMachine"`

	// 过滤条件：
	// <li>Version - String  是否必填：否 - 当前防护版本（ PRO_VERSION：专业版 | BASIC_VERSION：基础版 | Flagship：旗舰版 | ProtectedMachines：专业版+旗舰版） | BASIC_PROPOST_GENERAL_DISCOUNT：普惠版+专业版按量计费+基础版主机 | UnFlagship：专业版预付费+专业版后付费+基础版+普惠版</li>
	Filters []*Filters `json:"Filters,omitnil,omitempty" name:"Filters"`
}

func (r *DescribeImportMachineInfoRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeImportMachineInfoRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "MachineList")
	delete(f, "ImportType")
	delete(f, "IsQueryProMachine")
	delete(f, "Filters")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeImportMachineInfoRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeImportMachineInfoResponseParams struct {
	// 有效的机器信息列表：机器名称、机器公网/内网ip、机器标签
	// 注意：此字段可能返回 null，表示取不到有效值。
	EffectiveMachineInfoList []*EffectiveMachineInfo `json:"EffectiveMachineInfoList,omitnil,omitempty" name:"EffectiveMachineInfoList"`

	// 用户批量导入失败的机器列表（例如机器不存在等...）
	// 注意：此字段可能返回 null，表示取不到有效值。
	InvalidMachineList []*string `json:"InvalidMachineList,omitnil,omitempty" name:"InvalidMachineList"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeImportMachineInfoResponse struct {
	*tchttp.BaseResponse
	Response *DescribeImportMachineInfoResponseParams `json:"Response"`
}

func (r *DescribeImportMachineInfoResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeImportMachineInfoResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeIndexListRequestParams struct {

}

type DescribeIndexListRequest struct {
	*tchttp.BaseRequest
	
}

func (r *DescribeIndexListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeIndexListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeIndexListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeIndexListResponseParams struct {
	// ES 索引信息
	Data *string `json:"Data,omitnil,omitempty" name:"Data"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeIndexListResponse struct {
	*tchttp.BaseResponse
	Response *DescribeIndexListResponseParams `json:"Response"`
}

func (r *DescribeIndexListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeIndexListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeJavaMemShellInfoRequestParams struct {
	// 事件Id
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`
}

type DescribeJavaMemShellInfoRequest struct {
	*tchttp.BaseRequest
	
	// 事件Id
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`
}

func (r *DescribeJavaMemShellInfoRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeJavaMemShellInfoRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Id")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeJavaMemShellInfoRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeJavaMemShellInfoResponseParams struct {
	// java内存马事件详细信息
	// 注意：此字段可能返回 null，表示取不到有效值。
	Info *JavaMemShellDetail `json:"Info,omitnil,omitempty" name:"Info"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeJavaMemShellInfoResponse struct {
	*tchttp.BaseResponse
	Response *DescribeJavaMemShellInfoResponseParams `json:"Response"`
}

func (r *DescribeJavaMemShellInfoResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeJavaMemShellInfoResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeJavaMemShellListRequestParams struct {
	// 过滤条件：InstanceID、IP、
	// 
	// MachineName主机名模糊查询, Type，Status精确匹配，CreateBeginTime，CreateEndTime时间段
	Filters []*Filters `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 需要返回的数量，默认为10，最大值为100
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`
}

type DescribeJavaMemShellListRequest struct {
	*tchttp.BaseRequest
	
	// 过滤条件：InstanceID、IP、
	// 
	// MachineName主机名模糊查询, Type，Status精确匹配，CreateBeginTime，CreateEndTime时间段
	Filters []*Filters `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 需要返回的数量，默认为10，最大值为100
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`
}

func (r *DescribeJavaMemShellListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeJavaMemShellListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Filters")
	delete(f, "Offset")
	delete(f, "Limit")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeJavaMemShellListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeJavaMemShellListResponseParams struct {
	// 事件列表
	// 注意：此字段可能返回 null，表示取不到有效值。
	List []*JavaMemShellInfo `json:"List,omitnil,omitempty" name:"List"`

	// 总数
	TotalCount *uint64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeJavaMemShellListResponse struct {
	*tchttp.BaseResponse
	Response *DescribeJavaMemShellListResponseParams `json:"Response"`
}

func (r *DescribeJavaMemShellListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeJavaMemShellListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeJavaMemShellPluginInfoRequestParams struct {
	// 主机quuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 过滤条件：Pid精确匹配，MainClass模糊匹配
	Filters []*Filters `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 需要返回的数量，默认为10，最大值为100
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`
}

type DescribeJavaMemShellPluginInfoRequest struct {
	*tchttp.BaseRequest
	
	// 主机quuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 过滤条件：Pid精确匹配，MainClass模糊匹配
	Filters []*Filters `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 需要返回的数量，默认为10，最大值为100
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`
}

func (r *DescribeJavaMemShellPluginInfoRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeJavaMemShellPluginInfoRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Quuid")
	delete(f, "Filters")
	delete(f, "Offset")
	delete(f, "Limit")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeJavaMemShellPluginInfoRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeJavaMemShellPluginInfoResponseParams struct {
	// java内存马插件列表
	// 注意：此字段可能返回 null，表示取不到有效值。
	List []*JavaMemShellPluginInfo `json:"List,omitnil,omitempty" name:"List"`

	// 总数
	TotalCount *uint64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeJavaMemShellPluginInfoResponse struct {
	*tchttp.BaseResponse
	Response *DescribeJavaMemShellPluginInfoResponseParams `json:"Response"`
}

func (r *DescribeJavaMemShellPluginInfoResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeJavaMemShellPluginInfoResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeJavaMemShellPluginListRequestParams struct {
	// 过滤条件：Keywords: ip或者主机名模糊查询, JavaShellStatus，Exception精确匹配
	Filters []*Filters `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 需要返回的数量，默认为10，最大值为100
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`
}

type DescribeJavaMemShellPluginListRequest struct {
	*tchttp.BaseRequest
	
	// 过滤条件：Keywords: ip或者主机名模糊查询, JavaShellStatus，Exception精确匹配
	Filters []*Filters `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 需要返回的数量，默认为10，最大值为100
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`
}

func (r *DescribeJavaMemShellPluginListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeJavaMemShellPluginListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Filters")
	delete(f, "Offset")
	delete(f, "Limit")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeJavaMemShellPluginListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeJavaMemShellPluginListResponseParams struct {
	// java内存马插件列表
	// 注意：此字段可能返回 null，表示取不到有效值。
	List []*JavaMemShellPluginSetting `json:"List,omitnil,omitempty" name:"List"`

	// 总数
	TotalCount *uint64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeJavaMemShellPluginListResponse struct {
	*tchttp.BaseResponse
	Response *DescribeJavaMemShellPluginListResponseParams `json:"Response"`
}

func (r *DescribeJavaMemShellPluginListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeJavaMemShellPluginListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeLicenseBindListRequestParams struct {
	// 授权ID
	LicenseId *uint64 `json:"LicenseId,omitnil,omitempty" name:"LicenseId"`

	// 授权类型
	LicenseType *uint64 `json:"LicenseType,omitnil,omitempty" name:"LicenseType"`

	// 资源ID
	ResourceId *string `json:"ResourceId,omitnil,omitempty" name:"ResourceId"`

	// <li>InstanceID、IP、
	// 
	// MachineName 模糊查询</li>
	Filters []*Filters `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 限制条数,默认10.
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量,默认0.
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`
}

type DescribeLicenseBindListRequest struct {
	*tchttp.BaseRequest
	
	// 授权ID
	LicenseId *uint64 `json:"LicenseId,omitnil,omitempty" name:"LicenseId"`

	// 授权类型
	LicenseType *uint64 `json:"LicenseType,omitnil,omitempty" name:"LicenseType"`

	// 资源ID
	ResourceId *string `json:"ResourceId,omitnil,omitempty" name:"ResourceId"`

	// <li>InstanceID、IP、
	// 
	// MachineName 模糊查询</li>
	Filters []*Filters `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 限制条数,默认10.
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量,默认0.
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`
}

func (r *DescribeLicenseBindListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeLicenseBindListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "LicenseId")
	delete(f, "LicenseType")
	delete(f, "ResourceId")
	delete(f, "Filters")
	delete(f, "Limit")
	delete(f, "Offset")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeLicenseBindListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeLicenseBindListResponseParams struct {
	// 总条数
	TotalCount *uint64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// 绑定机器列表信息
	List []*LicenseBindDetail `json:"List,omitnil,omitempty" name:"List"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeLicenseBindListResponse struct {
	*tchttp.BaseResponse
	Response *DescribeLicenseBindListResponseParams `json:"Response"`
}

func (r *DescribeLicenseBindListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeLicenseBindListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeLicenseBindScheduleRequestParams struct {
	// 任务ID
	TaskId *uint64 `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// 限制条数,默认10.
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量,默认0
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 过滤参数
	// Status 绑定进度状态 0 进行中 1 已完成 2 失败
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`
}

type DescribeLicenseBindScheduleRequest struct {
	*tchttp.BaseRequest
	
	// 任务ID
	TaskId *uint64 `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// 限制条数,默认10.
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量,默认0
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 过滤参数
	// Status 绑定进度状态 0 进行中 1 已完成 2 失败
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`
}

func (r *DescribeLicenseBindScheduleRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeLicenseBindScheduleRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "TaskId")
	delete(f, "Limit")
	delete(f, "Offset")
	delete(f, "Filters")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeLicenseBindScheduleRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeLicenseBindScheduleResponseParams struct {
	// 进度
	Schedule *uint64 `json:"Schedule,omitnil,omitempty" name:"Schedule"`

	// 绑定任务详情
	List []*LicenseBindTaskDetail `json:"List,omitnil,omitempty" name:"List"`

	// 总条数
	TotalCount *uint64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeLicenseBindScheduleResponse struct {
	*tchttp.BaseResponse
	Response *DescribeLicenseBindScheduleResponseParams `json:"Response"`
}

func (r *DescribeLicenseBindScheduleResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeLicenseBindScheduleResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeLicenseGeneralRequestParams struct {

}

type DescribeLicenseGeneralRequest struct {
	*tchttp.BaseRequest
	
}

func (r *DescribeLicenseGeneralRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeLicenseGeneralRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeLicenseGeneralRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeLicenseGeneralResponseParams struct {
	// 总授权数 (包含隔离,过期等不可用状态)
	LicenseCnt *uint64 `json:"LicenseCnt,omitnil,omitempty" name:"LicenseCnt"`

	// 可用授权数
	AvailableLicenseCnt *uint64 `json:"AvailableLicenseCnt,omitnil,omitempty" name:"AvailableLicenseCnt"`

	// 可用专业版授权数(包含后付费).
	AvailableProVersionLicenseCnt *uint64 `json:"AvailableProVersionLicenseCnt,omitnil,omitempty" name:"AvailableProVersionLicenseCnt"`

	// 可用旗舰版授权数
	AvailableFlagshipVersionLicenseCnt *uint64 `json:"AvailableFlagshipVersionLicenseCnt,omitnil,omitempty" name:"AvailableFlagshipVersionLicenseCnt"`

	// 即将到期授权数 (15天内到期的)
	NearExpiryLicenseCnt *uint64 `json:"NearExpiryLicenseCnt,omitnil,omitempty" name:"NearExpiryLicenseCnt"`

	// 已到期授权数(不包含已删除的记录)
	ExpireLicenseCnt *uint64 `json:"ExpireLicenseCnt,omitnil,omitempty" name:"ExpireLicenseCnt"`

	// 自动升级开关状态,默认 false,  true 开启, false 关闭
	AutoOpenStatus *bool `json:"AutoOpenStatus,omitnil,omitempty" name:"AutoOpenStatus"`

	// PROVERSION_POSTPAY 专业版-后付费, PROVERSION_PREPAY 专业版-预付费, FLAGSHIP_PREPAY 旗舰版-预付费
	ProtectType *string `json:"ProtectType,omitnil,omitempty" name:"ProtectType"`

	// 历史是否开通过自动升级开关
	IsOpenStatusHistory *bool `json:"IsOpenStatusHistory,omitnil,omitempty" name:"IsOpenStatusHistory"`

	// 已使用授权数
	UsedLicenseCnt *uint64 `json:"UsedLicenseCnt,omitnil,omitempty" name:"UsedLicenseCnt"`

	// 未到期授权数
	NotExpiredLicenseCnt *uint64 `json:"NotExpiredLicenseCnt,omitnil,omitempty" name:"NotExpiredLicenseCnt"`

	// 旗舰版总授权数(有效订单)
	FlagshipVersionLicenseCnt *uint64 `json:"FlagshipVersionLicenseCnt,omitnil,omitempty" name:"FlagshipVersionLicenseCnt"`

	// 专业版总授权数(有效订单)
	ProVersionLicenseCnt *uint64 `json:"ProVersionLicenseCnt,omitnil,omitempty" name:"ProVersionLicenseCnt"`

	// 普惠版总授权数(有效订单的授权数)
	CwpVersionLicenseCnt *uint64 `json:"CwpVersionLicenseCnt,omitnil,omitempty" name:"CwpVersionLicenseCnt"`

	// 可用惠普版授权数
	AvailableLHLicenseCnt *uint64 `json:"AvailableLHLicenseCnt,omitnil,omitempty" name:"AvailableLHLicenseCnt"`

	// 自动加购开关, true 开启, false 关闭
	AutoRepurchaseSwitch *bool `json:"AutoRepurchaseSwitch,omitnil,omitempty" name:"AutoRepurchaseSwitch"`

	// 自动加购订单是否自动续费 ,true 开启, false 关闭
	AutoRepurchaseRenewSwitch *bool `json:"AutoRepurchaseRenewSwitch,omitnil,omitempty" name:"AutoRepurchaseRenewSwitch"`

	// 已销毁订单数
	DestroyOrderNum *uint64 `json:"DestroyOrderNum,omitnil,omitempty" name:"DestroyOrderNum"`

	// 是否自动续费开关,true 开启,false 关闭
	RepurchaseRenewSwitch *bool `json:"RepurchaseRenewSwitch,omitnil,omitempty" name:"RepurchaseRenewSwitch"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeLicenseGeneralResponse struct {
	*tchttp.BaseResponse
	Response *DescribeLicenseGeneralResponseParams `json:"Response"`
}

func (r *DescribeLicenseGeneralResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeLicenseGeneralResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeLicenseListRequestParams struct {
	// 多个条件筛选时取交集
	// <li> LicenseStatus 授权状态信息,0 未使用,1 部分使用, 2 已用完, 3 不可用  4 可使用</li>
	// <li> BuyTime 购买时间</li>
	// <li> LicenseType  授权类型, 0 专业版-按量计费, 1专业版-包年包月 , 2 旗舰版-包年包月</li>
	// <li>DeadlineStatus 到期状态 NotExpired 未过期, Expire 已过期(包含已销毁) NearExpiry 即将到期</li>
	// <li>ResourceId 资源ID</li>
	// <li>Keywords IP筛选</li>
	// <li>PayMode 付费模式 0 按量计费 , 1 包年包月</li>
	// <li>OrderStatus 订单状态 1 正常 2 隔离 3 销毁</li>
	// <li>DealNames 子订单号,最大长度10个,超出会失败</li>
	Filters []*Filters `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 限制条数,默认10.
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量,默认0.
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 标签筛选,平台标签能力,这里传入 标签键,标签值作为一个对象
	Tags []*Tags `json:"Tags,omitnil,omitempty" name:"Tags"`
}

type DescribeLicenseListRequest struct {
	*tchttp.BaseRequest
	
	// 多个条件筛选时取交集
	// <li> LicenseStatus 授权状态信息,0 未使用,1 部分使用, 2 已用完, 3 不可用  4 可使用</li>
	// <li> BuyTime 购买时间</li>
	// <li> LicenseType  授权类型, 0 专业版-按量计费, 1专业版-包年包月 , 2 旗舰版-包年包月</li>
	// <li>DeadlineStatus 到期状态 NotExpired 未过期, Expire 已过期(包含已销毁) NearExpiry 即将到期</li>
	// <li>ResourceId 资源ID</li>
	// <li>Keywords IP筛选</li>
	// <li>PayMode 付费模式 0 按量计费 , 1 包年包月</li>
	// <li>OrderStatus 订单状态 1 正常 2 隔离 3 销毁</li>
	// <li>DealNames 子订单号,最大长度10个,超出会失败</li>
	Filters []*Filters `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 限制条数,默认10.
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量,默认0.
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 标签筛选,平台标签能力,这里传入 标签键,标签值作为一个对象
	Tags []*Tags `json:"Tags,omitnil,omitempty" name:"Tags"`
}

func (r *DescribeLicenseListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeLicenseListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Filters")
	delete(f, "Limit")
	delete(f, "Offset")
	delete(f, "Tags")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeLicenseListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeLicenseListResponseParams struct {
	// 总条数
	TotalCount *uint64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// 授权数列表信息
	List []*LicenseDetail `json:"List,omitnil,omitempty" name:"List"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeLicenseListResponse struct {
	*tchttp.BaseResponse
	Response *DescribeLicenseListResponseParams `json:"Response"`
}

func (r *DescribeLicenseListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeLicenseListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeLicenseRequestParams struct {

}

type DescribeLicenseRequest struct {
	*tchttp.BaseRequest
	
}

func (r *DescribeLicenseRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeLicenseRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeLicenseRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeLicenseResponseParams struct {
	// 支持功能
	FunctionsEn []*string `json:"FunctionsEn,omitnil,omitempty" name:"FunctionsEn"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeLicenseResponse struct {
	*tchttp.BaseResponse
	Response *DescribeLicenseResponseParams `json:"Response"`
}

func (r *DescribeLicenseResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeLicenseResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeLicenseWhiteConfigRequestParams struct {
	// 规则名称,例如: cwp
	RuleName *string `json:"RuleName,omitnil,omitempty" name:"RuleName"`
}

type DescribeLicenseWhiteConfigRequest struct {
	*tchttp.BaseRequest
	
	// 规则名称,例如: cwp
	RuleName *string `json:"RuleName,omitnil,omitempty" name:"RuleName"`
}

func (r *DescribeLicenseWhiteConfigRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeLicenseWhiteConfigRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "RuleName")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeLicenseWhiteConfigRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeLicenseWhiteConfigResponseParams struct {
	// 旗舰版 配置信息
	FlagShip *VersionWhiteConfig `json:"FlagShip,omitnil,omitempty" name:"FlagShip"`

	// 专业版 配置信息
	Professional *VersionWhiteConfig `json:"Professional,omitnil,omitempty" name:"Professional"`

	// 普惠版 配置信息
	PrattWhitney *VersionWhiteConfig `json:"PrattWhitney,omitnil,omitempty" name:"PrattWhitney"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeLicenseWhiteConfigResponse struct {
	*tchttp.BaseResponse
	Response *DescribeLicenseWhiteConfigResponseParams `json:"Response"`
}

func (r *DescribeLicenseWhiteConfigResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeLicenseWhiteConfigResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeLogDeliveryKafkaOptionsRequestParams struct {
	// kafka实例id
	InstanceID *string `json:"InstanceID,omitnil,omitempty" name:"InstanceID"`
}

type DescribeLogDeliveryKafkaOptionsRequest struct {
	*tchttp.BaseRequest
	
	// kafka实例id
	InstanceID *string `json:"InstanceID,omitnil,omitempty" name:"InstanceID"`
}

func (r *DescribeLogDeliveryKafkaOptionsRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeLogDeliveryKafkaOptionsRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "InstanceID")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeLogDeliveryKafkaOptionsRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeLogDeliveryKafkaOptionsResponseParams struct {
	// 实例列表
	InstanceList []*CKafkaInstanceInfo `json:"InstanceList,omitnil,omitempty" name:"InstanceList"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeLogDeliveryKafkaOptionsResponse struct {
	*tchttp.BaseResponse
	Response *DescribeLogDeliveryKafkaOptionsResponseParams `json:"Response"`
}

func (r *DescribeLogDeliveryKafkaOptionsResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeLogDeliveryKafkaOptionsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeLogExportsRequestParams struct {
	// 分页的偏移量，默认值为0
	Offset *int64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 分页单页限制数目，默认值为20，最大值100
	Limit *int64 `json:"Limit,omitnil,omitempty" name:"Limit"`
}

type DescribeLogExportsRequest struct {
	*tchttp.BaseRequest
	
	// 分页的偏移量，默认值为0
	Offset *int64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 分页单页限制数目，默认值为20，最大值100
	Limit *int64 `json:"Limit,omitnil,omitempty" name:"Limit"`
}

func (r *DescribeLogExportsRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeLogExportsRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Offset")
	delete(f, "Limit")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeLogExportsRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeLogExportsResponseParams struct {
	// 总数目
	TotalCount *int64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// 日志导出列表
	Exports []*ExportInfo `json:"Exports,omitnil,omitempty" name:"Exports"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeLogExportsResponse struct {
	*tchttp.BaseResponse
	Response *DescribeLogExportsResponseParams `json:"Response"`
}

func (r *DescribeLogExportsResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeLogExportsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeLogHistogramRequestParams struct {
	// 要查询的日志的起始时间，Unix时间戳，单位ms
	StartTime *int64 `json:"StartTime,omitnil,omitempty" name:"StartTime"`

	// 要查询的日志的结束时间，Unix时间戳，单位ms
	EndTime *int64 `json:"EndTime,omitnil,omitempty" name:"EndTime"`

	// 查询语句
	QueryString *string `json:"QueryString,omitnil,omitempty" name:"QueryString"`

	// 时间间隔: 单位ms
	Interval *int64 `json:"Interval,omitnil,omitempty" name:"Interval"`
}

type DescribeLogHistogramRequest struct {
	*tchttp.BaseRequest
	
	// 要查询的日志的起始时间，Unix时间戳，单位ms
	StartTime *int64 `json:"StartTime,omitnil,omitempty" name:"StartTime"`

	// 要查询的日志的结束时间，Unix时间戳，单位ms
	EndTime *int64 `json:"EndTime,omitnil,omitempty" name:"EndTime"`

	// 查询语句
	QueryString *string `json:"QueryString,omitnil,omitempty" name:"QueryString"`

	// 时间间隔: 单位ms
	Interval *int64 `json:"Interval,omitnil,omitempty" name:"Interval"`
}

func (r *DescribeLogHistogramRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeLogHistogramRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "StartTime")
	delete(f, "EndTime")
	delete(f, "QueryString")
	delete(f, "Interval")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeLogHistogramRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeLogHistogramResponseParams struct {
	// 周期内统计结果详情
	Data []*LogHistogram `json:"Data,omitnil,omitempty" name:"Data"`

	// 统计周期： 单位ms
	Period *int64 `json:"Period,omitnil,omitempty" name:"Period"`

	// 命中关键字的日志总条数
	TotalCount *int64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeLogHistogramResponse struct {
	*tchttp.BaseResponse
	Response *DescribeLogHistogramResponseParams `json:"Response"`
}

func (r *DescribeLogHistogramResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeLogHistogramResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeLogIndexRequestParams struct {

}

type DescribeLogIndexRequest struct {
	*tchttp.BaseRequest
	
}

func (r *DescribeLogIndexRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeLogIndexRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeLogIndexRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeLogIndexResponseParams struct {
	// 是否生效
	Status *bool `json:"Status,omitnil,omitempty" name:"Status"`

	// 索引规则
	Rule *RuleInfo `json:"Rule,omitnil,omitempty" name:"Rule"`

	// 索引修改时间，初始值为索引创建时间
	ModifyTime *string `json:"ModifyTime,omitnil,omitempty" name:"ModifyTime"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeLogIndexResponse struct {
	*tchttp.BaseResponse
	Response *DescribeLogIndexResponseParams `json:"Response"`
}

func (r *DescribeLogIndexResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeLogIndexResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeLogKafkaDeliverInfoRequestParams struct {

}

type DescribeLogKafkaDeliverInfoRequest struct {
	*tchttp.BaseRequest
	
}

func (r *DescribeLogKafkaDeliverInfoRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeLogKafkaDeliverInfoRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeLogKafkaDeliverInfoRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeLogKafkaDeliverInfoResponseParams struct {
	// 实例环境
	KafkaEnvName *string `json:"KafkaEnvName,omitnil,omitempty" name:"KafkaEnvName"`

	// 实例id
	KafkaId *string `json:"KafkaId,omitnil,omitempty" name:"KafkaId"`

	// 地域
	Zone *string `json:"Zone,omitnil,omitempty" name:"Zone"`

	// 可用区
	Az *string `json:"Az,omitnil,omitempty" name:"Az"`

	// 所属网络
	VpcId *string `json:"VpcId,omitnil,omitempty" name:"VpcId"`

	// 所在子网
	SubnetId *string `json:"SubnetId,omitnil,omitempty" name:"SubnetId"`

	// 接入方式，1公网域名接入，2支撑环境接入
	AccessType *uint64 `json:"AccessType,omitnil,omitempty" name:"AccessType"`

	// 接入地址
	AccessAddr *string `json:"AccessAddr,omitnil,omitempty" name:"AccessAddr"`

	// 投递状态，1：健康，2：告警，3：异常
	DeliverStatus *uint64 `json:"DeliverStatus,omitnil,omitempty" name:"DeliverStatus"`

	// kafka版本
	InsVersion *string `json:"InsVersion,omitnil,omitempty" name:"InsVersion"`

	// 峰值带宽
	BandWidth *int64 `json:"BandWidth,omitnil,omitempty" name:"BandWidth"`

	// 磁盘容量
	DiskSize *int64 `json:"DiskSize,omitnil,omitempty" name:"DiskSize"`

	// 用户名
	Username *string `json:"Username,omitnil,omitempty" name:"Username"`

	// 投递类型细节
	DeliverTypeDetails []*DeliverTypeDetails `json:"DeliverTypeDetails,omitnil,omitempty" name:"DeliverTypeDetails"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeLogKafkaDeliverInfoResponse struct {
	*tchttp.BaseResponse
	Response *DescribeLogKafkaDeliverInfoResponseParams `json:"Response"`
}

func (r *DescribeLogKafkaDeliverInfoResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeLogKafkaDeliverInfoResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeLogStorageConfigRequestParams struct {

}

type DescribeLogStorageConfigRequest struct {
	*tchttp.BaseRequest
	
}

func (r *DescribeLogStorageConfigRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeLogStorageConfigRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeLogStorageConfigRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeLogStorageConfigResponseParams struct {
	// 存储类型，string数组
	// 注意：此字段可能返回 null，表示取不到有效值。
	Type []*string `json:"Type,omitnil,omitempty" name:"Type"`

	// 日志存储天数，3640表示不限
	// 注意：此字段可能返回 null，表示取不到有效值。
	Period *int64 `json:"Period,omitnil,omitempty" name:"Period"`

	// 本月Period的修改次数
	// 注意：此字段可能返回 null，表示取不到有效值。
	PeriodModifyCount *int64 `json:"PeriodModifyCount,omitnil,omitempty" name:"PeriodModifyCount"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeLogStorageConfigResponse struct {
	*tchttp.BaseResponse
	Response *DescribeLogStorageConfigResponseParams `json:"Response"`
}

func (r *DescribeLogStorageConfigResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeLogStorageConfigResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeLogStorageRecordRequestParams struct {

}

type DescribeLogStorageRecordRequest struct {
	*tchttp.BaseRequest
	
}

func (r *DescribeLogStorageRecordRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeLogStorageRecordRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeLogStorageRecordRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeLogStorageRecordResponseParams struct {
	// 存储量记录
	// 注意：此字段可能返回 null，表示取不到有效值。
	Records []*LogStorageRecord `json:"Records,omitnil,omitempty" name:"Records"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeLogStorageRecordResponse struct {
	*tchttp.BaseResponse
	Response *DescribeLogStorageRecordResponseParams `json:"Response"`
}

func (r *DescribeLogStorageRecordResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeLogStorageRecordResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeLogStorageStatisticRequestParams struct {

}

type DescribeLogStorageStatisticRequest struct {
	*tchttp.BaseRequest
	
}

func (r *DescribeLogStorageStatisticRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeLogStorageStatisticRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeLogStorageStatisticRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeLogStorageStatisticResponseParams struct {
	// 总容量（单位：GB）
	TotalSize *uint64 `json:"TotalSize,omitnil,omitempty" name:"TotalSize"`

	// 已使用容量（单位：GB）
	UsedSize *uint64 `json:"UsedSize,omitnil,omitempty" name:"UsedSize"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeLogStorageStatisticResponse struct {
	*tchttp.BaseResponse
	Response *DescribeLogStorageStatisticResponseParams `json:"Response"`
}

func (r *DescribeLogStorageStatisticResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeLogStorageStatisticResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeLogTypeRequestParams struct {

}

type DescribeLogTypeRequest struct {
	*tchttp.BaseRequest
	
}

func (r *DescribeLogTypeRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeLogTypeRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeLogTypeRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeLogTypeResponseParams struct {
	// cls日志类型信息
	Data *string `json:"Data,omitnil,omitempty" name:"Data"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeLogTypeResponse struct {
	*tchttp.BaseResponse
	Response *DescribeLogTypeResponseParams `json:"Response"`
}

func (r *DescribeLogTypeResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeLogTypeResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeLoginWhiteCombinedListRequestParams struct {
	// 需要返回的数量，默认为10，最大值为100
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 过滤条件。<li>IpOrAlias - String - 是否必填：否 - 主机ip或别名筛选</li><li>UserName - String - 是否必填：否 - 用户名筛选</li><li>SrcIP - String - 是否必填：否 - 来源IP筛选</li><li>Location - String - 是否必填：否 - 登录地筛选</li><li>ModifyBeginTime - String - 是否必填：否 - 按照修改时间段筛选，开始时间</li><li>ModifyEndTime - String - 是否必填：否 - 按照修改时间段筛选，结束时间</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`
}

type DescribeLoginWhiteCombinedListRequest struct {
	*tchttp.BaseRequest
	
	// 需要返回的数量，默认为10，最大值为100
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 过滤条件。<li>IpOrAlias - String - 是否必填：否 - 主机ip或别名筛选</li><li>UserName - String - 是否必填：否 - 用户名筛选</li><li>SrcIP - String - 是否必填：否 - 来源IP筛选</li><li>Location - String - 是否必填：否 - 登录地筛选</li><li>ModifyBeginTime - String - 是否必填：否 - 按照修改时间段筛选，开始时间</li><li>ModifyEndTime - String - 是否必填：否 - 按照修改时间段筛选，结束时间</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`
}

func (r *DescribeLoginWhiteCombinedListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeLoginWhiteCombinedListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Limit")
	delete(f, "Offset")
	delete(f, "Filters")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeLoginWhiteCombinedListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeLoginWhiteCombinedListResponseParams struct {
	// 总数量
	TotalCount *uint64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// 合并后的白名单列表
	// 注意：此字段可能返回 null，表示取不到有效值。
	LoginWhiteCombinedInfos []*LoginWhiteCombinedInfo `json:"LoginWhiteCombinedInfos,omitnil,omitempty" name:"LoginWhiteCombinedInfos"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeLoginWhiteCombinedListResponse struct {
	*tchttp.BaseResponse
	Response *DescribeLoginWhiteCombinedListResponseParams `json:"Response"`
}

func (r *DescribeLoginWhiteCombinedListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeLoginWhiteCombinedListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeLoginWhiteHostListRequestParams struct {
	// 白名单ID
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`

	// 需要返回的数量，最大值为1000
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 过滤条件 <li>IpOrAlias - String - 是否必填：否 - 主机ip或别名筛选</li>
	Filters []*AssetFilters `json:"Filters,omitnil,omitempty" name:"Filters"`
}

type DescribeLoginWhiteHostListRequest struct {
	*tchttp.BaseRequest
	
	// 白名单ID
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`

	// 需要返回的数量，最大值为1000
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 过滤条件 <li>IpOrAlias - String - 是否必填：否 - 主机ip或别名筛选</li>
	Filters []*AssetFilters `json:"Filters,omitnil,omitempty" name:"Filters"`
}

func (r *DescribeLoginWhiteHostListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeLoginWhiteHostListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Id")
	delete(f, "Limit")
	delete(f, "Offset")
	delete(f, "Filters")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeLoginWhiteHostListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeLoginWhiteHostListResponseParams struct {
	// 总数
	TotalCount *uint64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// 服务器列表
	Hosts []*HostDesc `json:"Hosts,omitnil,omitempty" name:"Hosts"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeLoginWhiteHostListResponse struct {
	*tchttp.BaseResponse
	Response *DescribeLoginWhiteHostListResponseParams `json:"Response"`
}

func (r *DescribeLoginWhiteHostListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeLoginWhiteHostListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeLoginWhiteListRequestParams struct {
	// 返回数量，最大值为100。
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 过滤条件。
	// <li>IpOrAlias - String - 是否必填：否 - 查询关键字 </li>
	// <li>UserName - String - 是否必填：否 - 用户名筛选 </li>
	// <li>ModifyBeginTime - String - 是否必填：否 - 按照修改时间段筛选，开始时间 </li>
	// <li>ModifyEndTime - String - 是否必填：否 - 按照修改时间段筛选，结束时间 </li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`
}

type DescribeLoginWhiteListRequest struct {
	*tchttp.BaseRequest
	
	// 返回数量，最大值为100。
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 过滤条件。
	// <li>IpOrAlias - String - 是否必填：否 - 查询关键字 </li>
	// <li>UserName - String - 是否必填：否 - 用户名筛选 </li>
	// <li>ModifyBeginTime - String - 是否必填：否 - 按照修改时间段筛选，开始时间 </li>
	// <li>ModifyEndTime - String - 是否必填：否 - 按照修改时间段筛选，结束时间 </li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`
}

func (r *DescribeLoginWhiteListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeLoginWhiteListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Limit")
	delete(f, "Offset")
	delete(f, "Filters")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeLoginWhiteListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeLoginWhiteListResponseParams struct {
	// 记录总数
	TotalCount *uint64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// 异地登录白名单数组
	LoginWhiteLists []*LoginWhiteLists `json:"LoginWhiteLists,omitnil,omitempty" name:"LoginWhiteLists"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeLoginWhiteListResponse struct {
	*tchttp.BaseResponse
	Response *DescribeLoginWhiteListResponseParams `json:"Response"`
}

func (r *DescribeLoginWhiteListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeLoginWhiteListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeMachineClearHistoryRequestParams struct {
	// 筛选条件
	// 多个条件筛选时 Keywords,TimeBetween,取交集
	// <li> Keywords 实例名称/内网/公网IP</li>
	// <li> TimeBetween 时间区间</li>
	Filters []*Filters `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 限制条数,默认10 ,最大100
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量,默认0
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 正序, ASC , 倒序 DESC , 默认ASC
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// AgentLastOfflineTime 客户端最后离线时间
	// AutoClearTime 清理时间
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

type DescribeMachineClearHistoryRequest struct {
	*tchttp.BaseRequest
	
	// 筛选条件
	// 多个条件筛选时 Keywords,TimeBetween,取交集
	// <li> Keywords 实例名称/内网/公网IP</li>
	// <li> TimeBetween 时间区间</li>
	Filters []*Filters `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 限制条数,默认10 ,最大100
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量,默认0
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 正序, ASC , 倒序 DESC , 默认ASC
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// AgentLastOfflineTime 客户端最后离线时间
	// AutoClearTime 清理时间
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

func (r *DescribeMachineClearHistoryRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeMachineClearHistoryRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Filters")
	delete(f, "Limit")
	delete(f, "Offset")
	delete(f, "Order")
	delete(f, "By")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeMachineClearHistoryRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeMachineClearHistoryResponseParams struct {
	// 总条数
	TotalCount *uint64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// 列表数据
	List []*MachineClearHistory `json:"List,omitnil,omitempty" name:"List"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeMachineClearHistoryResponse struct {
	*tchttp.BaseResponse
	Response *DescribeMachineClearHistoryResponseParams `json:"Response"`
}

func (r *DescribeMachineClearHistoryResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeMachineClearHistoryResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeMachineDefenseCntRequestParams struct {
	// 过滤条件。
	// <li>Uuids- String - 是否必填：否 - 主机uuid</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`
}

type DescribeMachineDefenseCntRequest struct {
	*tchttp.BaseRequest
	
	// 过滤条件。
	// <li>Uuids- String - 是否必填：否 - 主机uuid</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`
}

func (r *DescribeMachineDefenseCntRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeMachineDefenseCntRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Filters")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeMachineDefenseCntRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeMachineDefenseCntResponseParams struct {
	// 攻击检测统计
	AttackLogs *uint64 `json:"AttackLogs,omitnil,omitempty" name:"AttackLogs"`

	// 核心文件监控统计
	FileTamper *uint64 `json:"FileTamper,omitnil,omitempty" name:"FileTamper"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeMachineDefenseCntResponse struct {
	*tchttp.BaseResponse
	Response *DescribeMachineDefenseCntResponseParams `json:"Response"`
}

func (r *DescribeMachineDefenseCntResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeMachineDefenseCntResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeMachineFileTamperRulesRequestParams struct {
	// 主机uuid
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 需要返回的数量，默认为10，最大值为100
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`
}

type DescribeMachineFileTamperRulesRequest struct {
	*tchttp.BaseRequest
	
	// 主机uuid
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 需要返回的数量，默认为10，最大值为100
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`
}

func (r *DescribeMachineFileTamperRulesRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeMachineFileTamperRulesRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Uuid")
	delete(f, "Offset")
	delete(f, "Limit")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeMachineFileTamperRulesRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeMachineFileTamperRulesResponseParams struct {
	// 总数
	TotalCount *uint64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// 查询主机相关核心文件监控规则详情
	List []*MachineFileTamperRule `json:"List,omitnil,omitempty" name:"List"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeMachineFileTamperRulesResponse struct {
	*tchttp.BaseResponse
	Response *DescribeMachineFileTamperRulesResponseParams `json:"Response"`
}

func (r *DescribeMachineFileTamperRulesResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeMachineFileTamperRulesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeMachineGeneralRequestParams struct {

}

type DescribeMachineGeneralRequest struct {
	*tchttp.BaseRequest
	
}

func (r *DescribeMachineGeneralRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeMachineGeneralRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeMachineGeneralRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeMachineGeneralResponseParams struct {
	// 资产总数
	MachineCnt *uint64 `json:"MachineCnt,omitnil,omitempty" name:"MachineCnt"`

	// 腾讯云服务商机器数
	TencentCloudMachineCnt *uint64 `json:"TencentCloudMachineCnt,omitnil,omitempty" name:"TencentCloudMachineCnt"`

	// 阿里云服务商机器数
	AliCloudMachineCnt *uint64 `json:"AliCloudMachineCnt,omitnil,omitempty" name:"AliCloudMachineCnt"`

	// 百度云服务商机器数
	BaiduCloudMachineCnt *uint64 `json:"BaiduCloudMachineCnt,omitnil,omitempty" name:"BaiduCloudMachineCnt"`

	// IDC机器数
	IDCMachineCnt *uint64 `json:"IDCMachineCnt,omitnil,omitempty" name:"IDCMachineCnt"`

	// 其他云服务商机器数
	OtherCloudMachineCnt *uint64 `json:"OtherCloudMachineCnt,omitnil,omitempty" name:"OtherCloudMachineCnt"`

	// 已防护机器数
	ProtectMachineCnt *uint64 `json:"ProtectMachineCnt,omitnil,omitempty" name:"ProtectMachineCnt"`

	// 已防护基础版机器数
	BaseMachineCnt *uint64 `json:"BaseMachineCnt,omitnil,omitempty" name:"BaseMachineCnt"`

	// 已防护专业版机器数
	SpecialtyMachineCnt *uint64 `json:"SpecialtyMachineCnt,omitnil,omitempty" name:"SpecialtyMachineCnt"`

	// 已防护旗舰版机器数
	FlagshipMachineCnt *uint64 `json:"FlagshipMachineCnt,omitnil,omitempty" name:"FlagshipMachineCnt"`

	// 存在风险的机器数
	RiskMachineCnt *uint64 `json:"RiskMachineCnt,omitnil,omitempty" name:"RiskMachineCnt"`

	// 比较昨日风险机器数
	CompareYesterdayRiskMachineCnt *int64 `json:"CompareYesterdayRiskMachineCnt,omitnil,omitempty" name:"CompareYesterdayRiskMachineCnt"`

	// 比较昨日未防护机器数
	CompareYesterdayNotProtectMachineCnt *int64 `json:"CompareYesterdayNotProtectMachineCnt,omitnil,omitempty" name:"CompareYesterdayNotProtectMachineCnt"`

	// 比较昨日即将到期的机器数
	CompareYesterdayDeadlineMachineCnt *int64 `json:"CompareYesterdayDeadlineMachineCnt,omitnil,omitempty" name:"CompareYesterdayDeadlineMachineCnt"`

	// 即将到期的机器数
	DeadlineMachineCnt *uint64 `json:"DeadlineMachineCnt,omitnil,omitempty" name:"DeadlineMachineCnt"`

	// 未防护机器数
	NotProtectMachineCnt *uint64 `json:"NotProtectMachineCnt,omitnil,omitempty" name:"NotProtectMachineCnt"`

	// 已防护普惠版机器数（Lighthouse机器）
	LHGeneralDiscountCnt *uint64 `json:"LHGeneralDiscountCnt,omitnil,omitempty" name:"LHGeneralDiscountCnt"`

	// 比较昨日新增的主机数
	CompareYesterdayMachineCnt *int64 `json:"CompareYesterdayMachineCnt,omitnil,omitempty" name:"CompareYesterdayMachineCnt"`

	// 自动清理时间,最大720小时,最小0, 默认0 ,0=关闭
	MachineDestroyAfterOfflineHours *uint64 `json:"MachineDestroyAfterOfflineHours,omitnil,omitempty" name:"MachineDestroyAfterOfflineHours"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeMachineGeneralResponse struct {
	*tchttp.BaseResponse
	Response *DescribeMachineGeneralResponseParams `json:"Response"`
}

func (r *DescribeMachineGeneralResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeMachineGeneralResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeMachineInfoRequestParams struct {
	// 主机安全客户端唯一Uuid。
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// Quuid , Uuid 必填一项
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`
}

type DescribeMachineInfoRequest struct {
	*tchttp.BaseRequest
	
	// 主机安全客户端唯一Uuid。
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// Quuid , Uuid 必填一项
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`
}

func (r *DescribeMachineInfoRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeMachineInfoRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Uuid")
	delete(f, "Quuid")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeMachineInfoRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeMachineInfoResponseParams struct {
	// 机器ip。
	MachineIp *string `json:"MachineIp,omitnil,omitempty" name:"MachineIp"`

	// 受主机安全保护天数。
	ProtectDays *uint64 `json:"ProtectDays,omitnil,omitempty" name:"ProtectDays"`

	// 操作系统。
	MachineOs *string `json:"MachineOs,omitnil,omitempty" name:"MachineOs"`

	// 主机名称。
	MachineName *string `json:"MachineName,omitnil,omitempty" name:"MachineName"`

	// 在线状态。
	// <li>ONLINE： 在线</li>
	// <li>OFFLINE：离线</li>
	MachineStatus *string `json:"MachineStatus,omitnil,omitempty" name:"MachineStatus"`

	// CVM或BM主机唯一标识。
	InstanceId *string `json:"InstanceId,omitnil,omitempty" name:"InstanceId"`

	// 主机外网IP。
	MachineWanIp *string `json:"MachineWanIp,omitnil,omitempty" name:"MachineWanIp"`

	// CVM或BM主机唯一Uuid。
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 主机安全客户端唯一Uuid。
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 是否开通专业版。
	// <li>true：是</li>
	// <li>false：否</li>
	IsProVersion *bool `json:"IsProVersion,omitnil,omitempty" name:"IsProVersion"`

	// 专业版开通时间。
	ProVersionOpenDate *string `json:"ProVersionOpenDate,omitnil,omitempty" name:"ProVersionOpenDate"`

	// 云服务器类型。
	// <li>CVM: 腾讯云服务器</li>
	// <li>BM: 黑石物理机</li>
	// <li>ECM: 边缘计算服务器</li>
	// <li>LH: 轻量应用服务器</li>
	// <li>Other: 混合云机器</li>
	MachineType *string `json:"MachineType,omitnil,omitempty" name:"MachineType"`

	// 机器所属地域。如：ap-guangzhou，ap-shanghai
	MachineRegion *string `json:"MachineRegion,omitnil,omitempty" name:"MachineRegion"`

	// 主机状态。
	// <li>POSTPAY: 表示后付费，即按量计费  </li>
	// <li>PREPAY: 表示预付费，即包年包月</li>
	PayMode *string `json:"PayMode,omitnil,omitempty" name:"PayMode"`

	// 免费木马剩余检测数量。
	FreeMalwaresLeft *uint64 `json:"FreeMalwaresLeft,omitnil,omitempty" name:"FreeMalwaresLeft"`

	// 免费漏洞剩余检测数量。
	FreeVulsLeft *uint64 `json:"FreeVulsLeft,omitnil,omitempty" name:"FreeVulsLeft"`

	// agent版本号
	AgentVersion *string `json:"AgentVersion,omitnil,omitempty" name:"AgentVersion"`

	// 专业版到期时间(仅预付费)
	ProVersionDeadline *string `json:"ProVersionDeadline,omitnil,omitempty" name:"ProVersionDeadline"`

	// 是否有资产扫描记录，0无，1有
	HasAssetScan *uint64 `json:"HasAssetScan,omitnil,omitempty" name:"HasAssetScan"`

	// 防护版本：BASIC_VERSION 基础版，PRO_VERSION 专业版，Flagship 旗舰版，GENERAL_DISCOUNT 普惠版
	ProtectType *string `json:"ProtectType,omitnil,omitempty" name:"ProtectType"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeMachineInfoResponse struct {
	*tchttp.BaseResponse
	Response *DescribeMachineInfoResponseParams `json:"Response"`
}

func (r *DescribeMachineInfoResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeMachineInfoResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeMachineLicenseDetailRequestParams struct {
	// 主机quuid
	Quuids []*string `json:"Quuids,omitnil,omitempty" name:"Quuids"`
}

type DescribeMachineLicenseDetailRequest struct {
	*tchttp.BaseRequest
	
	// 主机quuid
	Quuids []*string `json:"Quuids,omitnil,omitempty" name:"Quuids"`
}

func (r *DescribeMachineLicenseDetailRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeMachineLicenseDetailRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Quuids")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeMachineLicenseDetailRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeMachineLicenseDetailResponseParams struct {
	// 授权信息
	// 注意：此字段可能返回 null，表示取不到有效值。
	MachineLicense []*MachineLicenseDetail `json:"MachineLicense,omitnil,omitempty" name:"MachineLicense"`

	// 总数
	// 注意：此字段可能返回 null，表示取不到有效值。
	TotalCount *int64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeMachineLicenseDetailResponse struct {
	*tchttp.BaseResponse
	Response *DescribeMachineLicenseDetailResponseParams `json:"Response"`
}

func (r *DescribeMachineLicenseDetailResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeMachineLicenseDetailResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeMachineListRequestParams struct {
	// 云主机类型。
	// <li>CVM：表示虚拟主机</li>
	// <li>BM:  表示黑石物理机</li>
	// <li>ECM:  表示边缘计算服务器</li>
	// <li>LH:  表示轻量应用服务器</li>
	// <li>Other:  表示混合云机器</li>
	MachineType *string `json:"MachineType,omitnil,omitempty" name:"MachineType"`

	// 机器所属地域。如：ap-guangzhou，ap-shanghai
	MachineRegion *string `json:"MachineRegion,omitnil,omitempty" name:"MachineRegion"`

	// 返回数量，默认为10，最大值为100。
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 过滤条件。
	// <li>Keywords - String - 是否必填：否 - 查询关键字 </li>
	// <li>Status - String - 是否必填：否 - 客户端在线状态（OFFLINE: 离线 | ONLINE: 在线 | UNINSTALLED：未安装）</li>
	// <li>Version - String  是否必填：否 - 当前防护版本（ PRO_VERSION：专业版 | BASIC_VERSION：基础版）</li>
	// 每个过滤条件只支持一个值，暂不支持多个值“或”关系查询
	Filters []*AssetFilters `json:"Filters,omitnil,omitempty" name:"Filters"`
}

type DescribeMachineListRequest struct {
	*tchttp.BaseRequest
	
	// 云主机类型。
	// <li>CVM：表示虚拟主机</li>
	// <li>BM:  表示黑石物理机</li>
	// <li>ECM:  表示边缘计算服务器</li>
	// <li>LH:  表示轻量应用服务器</li>
	// <li>Other:  表示混合云机器</li>
	MachineType *string `json:"MachineType,omitnil,omitempty" name:"MachineType"`

	// 机器所属地域。如：ap-guangzhou，ap-shanghai
	MachineRegion *string `json:"MachineRegion,omitnil,omitempty" name:"MachineRegion"`

	// 返回数量，默认为10，最大值为100。
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 过滤条件。
	// <li>Keywords - String - 是否必填：否 - 查询关键字 </li>
	// <li>Status - String - 是否必填：否 - 客户端在线状态（OFFLINE: 离线 | ONLINE: 在线 | UNINSTALLED：未安装）</li>
	// <li>Version - String  是否必填：否 - 当前防护版本（ PRO_VERSION：专业版 | BASIC_VERSION：基础版）</li>
	// 每个过滤条件只支持一个值，暂不支持多个值“或”关系查询
	Filters []*AssetFilters `json:"Filters,omitnil,omitempty" name:"Filters"`
}

func (r *DescribeMachineListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeMachineListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "MachineType")
	delete(f, "MachineRegion")
	delete(f, "Limit")
	delete(f, "Offset")
	delete(f, "Filters")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeMachineListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeMachineListResponseParams struct {
	// 主机列表
	Machines []*Machine `json:"Machines,omitnil,omitempty" name:"Machines"`

	// 主机数量
	TotalCount *uint64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeMachineListResponse struct {
	*tchttp.BaseResponse
	Response *DescribeMachineListResponseParams `json:"Response"`
}

func (r *DescribeMachineListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeMachineListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeMachineOsListRequestParams struct {

}

type DescribeMachineOsListRequest struct {
	*tchttp.BaseRequest
	
}

func (r *DescribeMachineOsListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeMachineOsListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeMachineOsListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeMachineOsListResponseParams struct {
	// 操作系统列表
	List []*OsName `json:"List,omitnil,omitempty" name:"List"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeMachineOsListResponse struct {
	*tchttp.BaseResponse
	Response *DescribeMachineOsListResponseParams `json:"Response"`
}

func (r *DescribeMachineOsListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeMachineOsListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeMachineRegionListRequestParams struct {

}

type DescribeMachineRegionListRequest struct {
	*tchttp.BaseRequest
	
}

func (r *DescribeMachineRegionListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeMachineRegionListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeMachineRegionListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeMachineRegionListResponseParams struct {
	// 云服务器类型地域列表
	RegionList []*RegionListDetail `json:"RegionList,omitnil,omitempty" name:"RegionList"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeMachineRegionListResponse struct {
	*tchttp.BaseResponse
	Response *DescribeMachineRegionListResponseParams `json:"Response"`
}

func (r *DescribeMachineRegionListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeMachineRegionListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeMachineRegionsRequestParams struct {

}

type DescribeMachineRegionsRequest struct {
	*tchttp.BaseRequest
	
}

func (r *DescribeMachineRegionsRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeMachineRegionsRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeMachineRegionsRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeMachineRegionsResponseParams struct {
	// CVM 云服务器地域列表
	CVM []*RegionInfo `json:"CVM,omitnil,omitempty" name:"CVM"`

	// BM 黑石机器地域列表
	BM []*RegionInfo `json:"BM,omitnil,omitempty" name:"BM"`

	// LH 轻量应用服务器地域列表
	LH []*RegionInfo `json:"LH,omitnil,omitempty" name:"LH"`

	// ECM 边缘计算服务器地域列表
	ECM []*RegionInfo `json:"ECM,omitnil,omitempty" name:"ECM"`

	// Other 混合云地域列表
	Other []*RegionInfo `json:"Other,omitnil,omitempty" name:"Other"`

	// 所有地域列表(包含以上所有地域)
	ALL []*RegionInfo `json:"ALL,omitnil,omitempty" name:"ALL"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeMachineRegionsResponse struct {
	*tchttp.BaseResponse
	Response *DescribeMachineRegionsResponseParams `json:"Response"`
}

func (r *DescribeMachineRegionsResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeMachineRegionsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeMachineRiskCntRequestParams struct {
	// 过滤条件。
	// <li>Uuids- String - 是否必填：否 - 主机uuid</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`
}

type DescribeMachineRiskCntRequest struct {
	*tchttp.BaseRequest
	
	// 过滤条件。
	// <li>Uuids- String - 是否必填：否 - 主机uuid</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`
}

func (r *DescribeMachineRiskCntRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeMachineRiskCntRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Filters")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeMachineRiskCntRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeMachineRiskCntResponseParams struct {
	// 异地登录
	HostLogin *uint64 `json:"HostLogin,omitnil,omitempty" name:"HostLogin"`

	// 密码破解
	BruteAttack *uint64 `json:"BruteAttack,omitnil,omitempty" name:"BruteAttack"`

	// 恶意请求
	MaliciousRequest *uint64 `json:"MaliciousRequest,omitnil,omitempty" name:"MaliciousRequest"`

	// 反弹shell
	ReverseShell *uint64 `json:"ReverseShell,omitnil,omitempty" name:"ReverseShell"`

	// 高危命令
	Bash *uint64 `json:"Bash,omitnil,omitempty" name:"Bash"`

	// 本地提权
	PrivilegeEscalation *uint64 `json:"PrivilegeEscalation,omitnil,omitempty" name:"PrivilegeEscalation"`

	// 木马
	Malware *uint64 `json:"Malware,omitnil,omitempty" name:"Malware"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeMachineRiskCntResponse struct {
	*tchttp.BaseResponse
	Response *DescribeMachineRiskCntResponseParams `json:"Response"`
}

func (r *DescribeMachineRiskCntResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeMachineRiskCntResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeMachineSnapshotRequestParams struct {
	// cvm id 集合
	Quuids []*string `json:"Quuids,omitnil,omitempty" name:"Quuids"`

	// 查询快照类型0 最近一个 1所有
	Type *uint64 `json:"Type,omitnil,omitempty" name:"Type"`

	// 分页个数
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 分页步长
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`
}

type DescribeMachineSnapshotRequest struct {
	*tchttp.BaseRequest
	
	// cvm id 集合
	Quuids []*string `json:"Quuids,omitnil,omitempty" name:"Quuids"`

	// 查询快照类型0 最近一个 1所有
	Type *uint64 `json:"Type,omitnil,omitempty" name:"Type"`

	// 分页个数
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 分页步长
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`
}

func (r *DescribeMachineSnapshotRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeMachineSnapshotRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Quuids")
	delete(f, "Type")
	delete(f, "Limit")
	delete(f, "Offset")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeMachineSnapshotRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeMachineSnapshotResponseParams struct {
	// 主机快照列表
	List []*MachineSnapshotInfo `json:"List,omitnil,omitempty" name:"List"`

	// 总个数
	TotalCount *uint64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// 是否都有24小时内创建的快照
	SnapshotCheck *bool `json:"SnapshotCheck,omitnil,omitempty" name:"SnapshotCheck"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeMachineSnapshotResponse struct {
	*tchttp.BaseResponse
	Response *DescribeMachineSnapshotResponseParams `json:"Response"`
}

func (r *DescribeMachineSnapshotResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeMachineSnapshotResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeMachinesRequestParams struct {
	// 机器所属专区类型 
	// CVM 云服务器
	// BM 黑石
	// ECM 边缘计算
	// LH 轻量应用服务器
	// Other 混合云专区
	MachineType *string `json:"MachineType,omitnil,omitempty" name:"MachineType"`

	// 机器所属地域。如：ap-guangzhou，ap-shanghai
	MachineRegion *string `json:"MachineRegion,omitnil,omitempty" name:"MachineRegion"`

	// 返回数量，默认为10，最大值为100。
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 过滤条件。
	// <li>Ips - String - 是否必填：否 - 通过ip查询 </li>
	// <li>Names - String - 是否必填：否 - 通过实例名查询 </li>
	// <li>InstanceIds - String - 是否必填：否 - 通过实例id查询 </li>
	// <li>Status - String - 是否必填：否 - 客户端在线状态（OFFLINE: 离线/关机 | ONLINE: 在线 | UNINSTALLED：未安装 | AGENT_OFFLINE 离线| AGENT_SHUTDOWN 已关机）</li>
	// <li>Version - String  是否必填：否 - 当前防护版本（ PRO_VERSION：专业版 | BASIC_VERSION：基础版 | Flagship : 旗舰版 | ProtectedMachines: 专业版+旗舰版）</li>
	// <li>Risk - String 是否必填: 否 - 风险主机( yes ) </li>
	// <li>Os -String 是否必填: 否 - 操作系统( DescribeMachineOsList 接口 值 )
	// 每个过滤条件只支持一个值，暂不支持多个值“或”关系查询
	// <li>Quuid - String - 是否必填: 否 - 云服务器uuid  最大100条.</li>
	// <li>AddedOnTheFifteen- String 是否必填: 否 - 是否只查询15天内新增的主机( 1：是) </li>
	// <li> TagId- String 是否必填: 否 - 查询指定标签关联的主机列表 </li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 机器所属业务ID列表
	ProjectIds []*uint64 `json:"ProjectIds,omitnil,omitempty" name:"ProjectIds"`
}

type DescribeMachinesRequest struct {
	*tchttp.BaseRequest
	
	// 机器所属专区类型 
	// CVM 云服务器
	// BM 黑石
	// ECM 边缘计算
	// LH 轻量应用服务器
	// Other 混合云专区
	MachineType *string `json:"MachineType,omitnil,omitempty" name:"MachineType"`

	// 机器所属地域。如：ap-guangzhou，ap-shanghai
	MachineRegion *string `json:"MachineRegion,omitnil,omitempty" name:"MachineRegion"`

	// 返回数量，默认为10，最大值为100。
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 过滤条件。
	// <li>Ips - String - 是否必填：否 - 通过ip查询 </li>
	// <li>Names - String - 是否必填：否 - 通过实例名查询 </li>
	// <li>InstanceIds - String - 是否必填：否 - 通过实例id查询 </li>
	// <li>Status - String - 是否必填：否 - 客户端在线状态（OFFLINE: 离线/关机 | ONLINE: 在线 | UNINSTALLED：未安装 | AGENT_OFFLINE 离线| AGENT_SHUTDOWN 已关机）</li>
	// <li>Version - String  是否必填：否 - 当前防护版本（ PRO_VERSION：专业版 | BASIC_VERSION：基础版 | Flagship : 旗舰版 | ProtectedMachines: 专业版+旗舰版）</li>
	// <li>Risk - String 是否必填: 否 - 风险主机( yes ) </li>
	// <li>Os -String 是否必填: 否 - 操作系统( DescribeMachineOsList 接口 值 )
	// 每个过滤条件只支持一个值，暂不支持多个值“或”关系查询
	// <li>Quuid - String - 是否必填: 否 - 云服务器uuid  最大100条.</li>
	// <li>AddedOnTheFifteen- String 是否必填: 否 - 是否只查询15天内新增的主机( 1：是) </li>
	// <li> TagId- String 是否必填: 否 - 查询指定标签关联的主机列表 </li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 机器所属业务ID列表
	ProjectIds []*uint64 `json:"ProjectIds,omitnil,omitempty" name:"ProjectIds"`
}

func (r *DescribeMachinesRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeMachinesRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "MachineType")
	delete(f, "MachineRegion")
	delete(f, "Limit")
	delete(f, "Offset")
	delete(f, "Filters")
	delete(f, "ProjectIds")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeMachinesRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeMachinesResponseParams struct {
	// 主机列表
	Machines []*Machine `json:"Machines,omitnil,omitempty" name:"Machines"`

	// 主机数量
	TotalCount *uint64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeMachinesResponse struct {
	*tchttp.BaseResponse
	Response *DescribeMachinesResponseParams `json:"Response"`
}

func (r *DescribeMachinesResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeMachinesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeMachinesSimpleRequestParams struct {
	// 机器所属专区类型 
	// CVM 云服务器
	// BM 黑石
	// ECM 边缘计算
	// LH 轻量应用服务器
	// Other 混合云专区
	MachineType *string `json:"MachineType,omitnil,omitempty" name:"MachineType"`

	// 机器所属地域。如：ap-guangzhou，ap-shanghai
	MachineRegion *string `json:"MachineRegion,omitnil,omitempty" name:"MachineRegion"`

	// 返回数量，默认为10，最大值为100。
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 过滤条件。
	// <li>Keywords - String - 是否必填：否 - 查询关键字 </li>
	// <li>Version - String  是否必填：否 - 当前防护版本（ PRO_VERSION：专业版 | BASIC_VERSION：基础版 | Flagship : 旗舰版 | ProtectedMachines: 专业版+旗舰版 | UnFlagship : 非旗舰版 | PRO_POST_PAY：专业版按量计费 | PRO_PRE_PAY：专业版包年包月）</li>
	// <li>TagId - String - 是否必填：否 - 标签ID </li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 机器所属业务ID列表
	ProjectIds []*uint64 `json:"ProjectIds,omitnil,omitempty" name:"ProjectIds"`
}

type DescribeMachinesSimpleRequest struct {
	*tchttp.BaseRequest
	
	// 机器所属专区类型 
	// CVM 云服务器
	// BM 黑石
	// ECM 边缘计算
	// LH 轻量应用服务器
	// Other 混合云专区
	MachineType *string `json:"MachineType,omitnil,omitempty" name:"MachineType"`

	// 机器所属地域。如：ap-guangzhou，ap-shanghai
	MachineRegion *string `json:"MachineRegion,omitnil,omitempty" name:"MachineRegion"`

	// 返回数量，默认为10，最大值为100。
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 过滤条件。
	// <li>Keywords - String - 是否必填：否 - 查询关键字 </li>
	// <li>Version - String  是否必填：否 - 当前防护版本（ PRO_VERSION：专业版 | BASIC_VERSION：基础版 | Flagship : 旗舰版 | ProtectedMachines: 专业版+旗舰版 | UnFlagship : 非旗舰版 | PRO_POST_PAY：专业版按量计费 | PRO_PRE_PAY：专业版包年包月）</li>
	// <li>TagId - String - 是否必填：否 - 标签ID </li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 机器所属业务ID列表
	ProjectIds []*uint64 `json:"ProjectIds,omitnil,omitempty" name:"ProjectIds"`
}

func (r *DescribeMachinesSimpleRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeMachinesSimpleRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "MachineType")
	delete(f, "MachineRegion")
	delete(f, "Limit")
	delete(f, "Offset")
	delete(f, "Filters")
	delete(f, "ProjectIds")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeMachinesSimpleRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeMachinesSimpleResponseParams struct {
	// 主机列表
	Machines []*MachineSimple `json:"Machines,omitnil,omitempty" name:"Machines"`

	// 主机数量
	TotalCount *uint64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeMachinesSimpleResponse struct {
	*tchttp.BaseResponse
	Response *DescribeMachinesSimpleResponseParams `json:"Response"`
}

func (r *DescribeMachinesSimpleResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeMachinesSimpleResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeMalWareListRequestParams struct {
	// 需要返回的数量，默认为10，最大值为100
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 过滤条件。
	// <li>IpOrAlias - String - 是否必填：否 - 主机ip或别名筛选</li>
	// <li>FilePath - String - 是否必填：否 - 路径筛选</li>
	// <li>VirusName - String - 是否必填：否 - 描述筛选</li>
	// <li>CreateBeginTime - String - 是否必填：否 - 创建时间筛选-开始时间</li>
	// <li>CreateEndTime - String - 是否必填：否 - 创建时间筛选-结束时间</li>
	// <li>Status - String - 是否必填：否 - 状态筛选 4待处理,5信任,6已隔离,10隔离中,11恢复隔离中,14 已处理</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 检测排序 CreateTime
	By *string `json:"By,omitnil,omitempty" name:"By"`

	// 排序方式 ASC,DESC
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`
}

type DescribeMalWareListRequest struct {
	*tchttp.BaseRequest
	
	// 需要返回的数量，默认为10，最大值为100
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 过滤条件。
	// <li>IpOrAlias - String - 是否必填：否 - 主机ip或别名筛选</li>
	// <li>FilePath - String - 是否必填：否 - 路径筛选</li>
	// <li>VirusName - String - 是否必填：否 - 描述筛选</li>
	// <li>CreateBeginTime - String - 是否必填：否 - 创建时间筛选-开始时间</li>
	// <li>CreateEndTime - String - 是否必填：否 - 创建时间筛选-结束时间</li>
	// <li>Status - String - 是否必填：否 - 状态筛选 4待处理,5信任,6已隔离,10隔离中,11恢复隔离中,14 已处理</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 检测排序 CreateTime
	By *string `json:"By,omitnil,omitempty" name:"By"`

	// 排序方式 ASC,DESC
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`
}

func (r *DescribeMalWareListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeMalWareListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Limit")
	delete(f, "Offset")
	delete(f, "Filters")
	delete(f, "By")
	delete(f, "Order")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeMalWareListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeMalWareListResponseParams struct {
	// 木马列表
	// 注意：此字段可能返回 null，表示取不到有效值。
	MalWareList []*MalWareList `json:"MalWareList,omitnil,omitempty" name:"MalWareList"`

	// 总数量
	TotalCount *uint64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeMalWareListResponse struct {
	*tchttp.BaseResponse
	Response *DescribeMalWareListResponseParams `json:"Response"`
}

func (r *DescribeMalWareListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeMalWareListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeMaliciousRequestWhiteListRequestParams struct {
	// 返回数量，默认为10，最大值为100。
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 过滤条件。
	// 
	// <li>Domain  - String - 基线名称</li>
	Filters []*Filters `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 排序方式 [asc:升序|desc:降序]
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 排序字段
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

type DescribeMaliciousRequestWhiteListRequest struct {
	*tchttp.BaseRequest
	
	// 返回数量，默认为10，最大值为100。
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 过滤条件。
	// 
	// <li>Domain  - String - 基线名称</li>
	Filters []*Filters `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 排序方式 [asc:升序|desc:降序]
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 排序字段
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

func (r *DescribeMaliciousRequestWhiteListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeMaliciousRequestWhiteListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Limit")
	delete(f, "Offset")
	delete(f, "Filters")
	delete(f, "Order")
	delete(f, "By")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeMaliciousRequestWhiteListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeMaliciousRequestWhiteListResponseParams struct {
	// 白名单信息列表
	// 注意：此字段可能返回 null，表示取不到有效值。
	List []*MaliciousRequestWhiteListInfo `json:"List,omitnil,omitempty" name:"List"`

	// 分页查询记录总数
	// 注意：此字段可能返回 null，表示取不到有效值。
	TotalCount *uint64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeMaliciousRequestWhiteListResponse struct {
	*tchttp.BaseResponse
	Response *DescribeMaliciousRequestWhiteListResponseParams `json:"Response"`
}

func (r *DescribeMaliciousRequestWhiteListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeMaliciousRequestWhiteListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeMalwareFileRequestParams struct {
	// 木马记录ID
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`
}

type DescribeMalwareFileRequest struct {
	*tchttp.BaseRequest
	
	// 木马记录ID
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`
}

func (r *DescribeMalwareFileRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeMalwareFileRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Id")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeMalwareFileRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeMalwareFileResponseParams struct {
	// 木马文件下载地址
	FileUrl *string `json:"FileUrl,omitnil,omitempty" name:"FileUrl"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeMalwareFileResponse struct {
	*tchttp.BaseResponse
	Response *DescribeMalwareFileResponseParams `json:"Response"`
}

func (r *DescribeMalwareFileResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeMalwareFileResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeMalwareInfoRequestParams struct {
	// 唯一ID
	Id *int64 `json:"Id,omitnil,omitempty" name:"Id"`
}

type DescribeMalwareInfoRequest struct {
	*tchttp.BaseRequest
	
	// 唯一ID
	Id *int64 `json:"Id,omitnil,omitempty" name:"Id"`
}

func (r *DescribeMalwareInfoRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeMalwareInfoRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Id")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeMalwareInfoRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeMalwareInfoResponseParams struct {
	// 恶意文件详情信息
	MalwareInfo *MalwareInfo `json:"MalwareInfo,omitnil,omitempty" name:"MalwareInfo"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeMalwareInfoResponse struct {
	*tchttp.BaseResponse
	Response *DescribeMalwareInfoResponseParams `json:"Response"`
}

func (r *DescribeMalwareInfoResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeMalwareInfoResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeMalwareRiskOverviewRequestParams struct {

}

type DescribeMalwareRiskOverviewRequest struct {
	*tchttp.BaseRequest
	
}

func (r *DescribeMalwareRiskOverviewRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeMalwareRiskOverviewRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeMalwareRiskOverviewRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeMalwareRiskOverviewResponseParams struct {
	// 无
	Data *MalwareRiskOverview `json:"Data,omitnil,omitempty" name:"Data"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeMalwareRiskOverviewResponse struct {
	*tchttp.BaseResponse
	Response *DescribeMalwareRiskOverviewResponseParams `json:"Response"`
}

func (r *DescribeMalwareRiskOverviewResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeMalwareRiskOverviewResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeMalwareRiskWarningRequestParams struct {

}

type DescribeMalwareRiskWarningRequest struct {
	*tchttp.BaseRequest
	
}

func (r *DescribeMalwareRiskWarningRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeMalwareRiskWarningRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeMalwareRiskWarningRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeMalwareRiskWarningResponseParams struct {
	// 是否开启自动扫描：true-开启，false-未开启
	IsCheckRisk *bool `json:"IsCheckRisk,omitnil,omitempty" name:"IsCheckRisk"`

	// 风险文件列表信息
	// 注意：此字段可能返回 null，表示取不到有效值。
	List []*MalwareRisk `json:"List,omitnil,omitempty" name:"List"`

	// 是否弹出提示 true 弹出, false不弹
	IsPop *bool `json:"IsPop,omitnil,omitempty" name:"IsPop"`

	// 异常进程列表信息
	// 注意：此字段可能返回 null，表示取不到有效值。
	ProcessList []*MalwareRisk `json:"ProcessList,omitnil,omitempty" name:"ProcessList"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeMalwareRiskWarningResponse struct {
	*tchttp.BaseResponse
	Response *DescribeMalwareRiskWarningResponseParams `json:"Response"`
}

func (r *DescribeMalwareRiskWarningResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeMalwareRiskWarningResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeMalwareTimingScanSettingRequestParams struct {

}

type DescribeMalwareTimingScanSettingRequest struct {
	*tchttp.BaseRequest
	
}

func (r *DescribeMalwareTimingScanSettingRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeMalwareTimingScanSettingRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeMalwareTimingScanSettingRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeMalwareTimingScanSettingResponseParams struct {
	// 检测模式 0 全盘检测  1快速检测
	CheckPattern *uint64 `json:"CheckPattern,omitnil,omitempty" name:"CheckPattern"`

	// 检测周期 开始时间
	StartTime *string `json:"StartTime,omitnil,omitempty" name:"StartTime"`

	// 检测周期 超时结束时间
	EndTime *string `json:"EndTime,omitnil,omitempty" name:"EndTime"`

	// 是否全部服务器 1 全部 2 自选
	IsGlobal *uint64 `json:"IsGlobal,omitnil,omitempty" name:"IsGlobal"`

	// 自选服务器时必须 主机quuid的string数组
	// 注意：此字段可能返回 null，表示取不到有效值。
	QuuidList []*string `json:"QuuidList,omitnil,omitempty" name:"QuuidList"`

	// 监控模式 0 标准 1深度
	MonitoringPattern *uint64 `json:"MonitoringPattern,omitnil,omitempty" name:"MonitoringPattern"`

	// 周期 1每天
	Cycle *uint64 `json:"Cycle,omitnil,omitempty" name:"Cycle"`

	// 定时检测开关 0 关闭1 开启
	EnableScan *int64 `json:"EnableScan,omitnil,omitempty" name:"EnableScan"`

	// 唯一ID
	Id *int64 `json:"Id,omitnil,omitempty" name:"Id"`

	// 实时监控0 关闭 1开启
	RealTimeMonitoring *int64 `json:"RealTimeMonitoring,omitnil,omitempty" name:"RealTimeMonitoring"`

	// 是否自动隔离：1-是，0-否
	AutoIsolation *uint64 `json:"AutoIsolation,omitnil,omitempty" name:"AutoIsolation"`

	// 一键扫描超时时长，如：1800秒（s）
	ClickTimeout *uint64 `json:"ClickTimeout,omitnil,omitempty" name:"ClickTimeout"`

	// 是否杀掉进程 1杀掉 0不杀掉 只有开启自动隔离才生效
	KillProcess *uint64 `json:"KillProcess,omitnil,omitempty" name:"KillProcess"`

	// 1标准模式（只报严重、高危）、2增强模式（报严重、高危、中危）、3严格模式（报严重、高、中、低、提示）
	EngineType *uint64 `json:"EngineType,omitnil,omitempty" name:"EngineType"`

	// 启发引擎 0 关闭 1开启
	EnableInspiredEngine *uint64 `json:"EnableInspiredEngine,omitnil,omitempty" name:"EnableInspiredEngine"`

	// 是否开启恶意进程查杀[0:未开启,1:开启]
	EnableMemShellScan *uint64 `json:"EnableMemShellScan,omitnil,omitempty" name:"EnableMemShellScan"`

	// 防护模式 0 标准 1 重保
	ProtectMode *uint64 `json:"ProtectMode,omitnil,omitempty" name:"ProtectMode"`

	// 查杀范围 0 脚本类之外的恶意文件，1全部恶意文件
	ProtectFileScope *uint64 `json:"ProtectFileScope,omitnil,omitempty" name:"ProtectFileScope"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeMalwareTimingScanSettingResponse struct {
	*tchttp.BaseResponse
	Response *DescribeMalwareTimingScanSettingResponseParams `json:"Response"`
}

func (r *DescribeMalwareTimingScanSettingResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeMalwareTimingScanSettingResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeMalwareWhiteListAffectListRequestParams struct {
	// 白名单规则id
	WhiteListId *uint64 `json:"WhiteListId,omitnil,omitempty" name:"WhiteListId"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 返回数量，最大值为100。
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 过滤条件。
	// <li>HostIp - String - 是否必填：否 - 主机ip查询 </li>
	// <li>FileName - String - 是否必填：否 - 文件名称查询 </li>
	// <li>FileDirectory - String - 是否必填：否 - 文件目录查询 </li>
	// <li>FileExtension - String - 是否必填：否 - 文件后缀查询 </li>
	// <li>Mode - String - 是否必填：否 - 规则类型 0 MD5,1自定义</li>
	// <li>Md5 - String - 是否必填：否 - MD5查询 </li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 排序方式: [ASC:升序|DESC:降序]
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 可选排序列: [CreateTime]
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

type DescribeMalwareWhiteListAffectListRequest struct {
	*tchttp.BaseRequest
	
	// 白名单规则id
	WhiteListId *uint64 `json:"WhiteListId,omitnil,omitempty" name:"WhiteListId"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 返回数量，最大值为100。
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 过滤条件。
	// <li>HostIp - String - 是否必填：否 - 主机ip查询 </li>
	// <li>FileName - String - 是否必填：否 - 文件名称查询 </li>
	// <li>FileDirectory - String - 是否必填：否 - 文件目录查询 </li>
	// <li>FileExtension - String - 是否必填：否 - 文件后缀查询 </li>
	// <li>Mode - String - 是否必填：否 - 规则类型 0 MD5,1自定义</li>
	// <li>Md5 - String - 是否必填：否 - MD5查询 </li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 排序方式: [ASC:升序|DESC:降序]
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 可选排序列: [CreateTime]
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

func (r *DescribeMalwareWhiteListAffectListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeMalwareWhiteListAffectListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "WhiteListId")
	delete(f, "Offset")
	delete(f, "Limit")
	delete(f, "Filters")
	delete(f, "Order")
	delete(f, "By")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeMalwareWhiteListAffectListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeMalwareWhiteListAffectListResponseParams struct {
	// 总记录数
	TotalCount *uint64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// 白名单规则影响事件列表
	// 注意：此字段可能返回 null，表示取不到有效值。
	AffectList []*MalwareWhiteListAffectEvent `json:"AffectList,omitnil,omitempty" name:"AffectList"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeMalwareWhiteListAffectListResponse struct {
	*tchttp.BaseResponse
	Response *DescribeMalwareWhiteListAffectListResponseParams `json:"Response"`
}

func (r *DescribeMalwareWhiteListAffectListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeMalwareWhiteListAffectListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeMalwareWhiteListRequestParams struct {
	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 返回数量，最大值为100。
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 过滤条件。
	// <li>HostIp - String - 是否必填：否 - 主机ip查询 </li>
	// <li>FileName - String - 是否必填：否 - 文件名称查询 </li>
	// <li>FileDirectory - String - 是否必填：否 - 文件目录查询 </li>
	// <li>FileExtension - String - 是否必填：否 - 文件后缀查询 </li>
	// <li>Mode - String - 是否必填：否 - 规则类型 0 MD5,1自定义</li>
	// <li>Md5 - String - 是否必填：否 - MD5查询 </li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 排序方式: [ASC:升序|DESC:降序]
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 可选排序列: [EventsCount|CreateTime|ModifyTime]
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

type DescribeMalwareWhiteListRequest struct {
	*tchttp.BaseRequest
	
	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 返回数量，最大值为100。
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 过滤条件。
	// <li>HostIp - String - 是否必填：否 - 主机ip查询 </li>
	// <li>FileName - String - 是否必填：否 - 文件名称查询 </li>
	// <li>FileDirectory - String - 是否必填：否 - 文件目录查询 </li>
	// <li>FileExtension - String - 是否必填：否 - 文件后缀查询 </li>
	// <li>Mode - String - 是否必填：否 - 规则类型 0 MD5,1自定义</li>
	// <li>Md5 - String - 是否必填：否 - MD5查询 </li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 排序方式: [ASC:升序|DESC:降序]
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 可选排序列: [EventsCount|CreateTime|ModifyTime]
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

func (r *DescribeMalwareWhiteListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeMalwareWhiteListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Offset")
	delete(f, "Limit")
	delete(f, "Filters")
	delete(f, "Order")
	delete(f, "By")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeMalwareWhiteListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeMalwareWhiteListResponseParams struct {
	// 总记录数
	TotalCount *uint64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// 白名单列表
	WhiteList []*MalwareWhiteListInfo `json:"WhiteList,omitnil,omitempty" name:"WhiteList"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeMalwareWhiteListResponse struct {
	*tchttp.BaseResponse
	Response *DescribeMalwareWhiteListResponseParams `json:"Response"`
}

func (r *DescribeMalwareWhiteListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeMalwareWhiteListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeMonthInspectionReportRequestParams struct {
	// 分页大小
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 分页步长
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`
}

type DescribeMonthInspectionReportRequest struct {
	*tchttp.BaseRequest
	
	// 分页大小
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 分页步长
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`
}

func (r *DescribeMonthInspectionReportRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeMonthInspectionReportRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Limit")
	delete(f, "Offset")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeMonthInspectionReportRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeMonthInspectionReportResponseParams struct {
	// 总条数
	TotalCount *uint64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// 巡检报告列表
	List []*MonthInspectionReport `json:"List,omitnil,omitempty" name:"List"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeMonthInspectionReportResponse struct {
	*tchttp.BaseResponse
	Response *DescribeMonthInspectionReportResponseParams `json:"Response"`
}

func (r *DescribeMonthInspectionReportResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeMonthInspectionReportResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeNetAttackSettingRequestParams struct {

}

type DescribeNetAttackSettingRequest struct {
	*tchttp.BaseRequest
	
}

func (r *DescribeNetAttackSettingRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeNetAttackSettingRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeNetAttackSettingRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeNetAttackSettingResponseParams struct {
	// 0 关闭网络攻击检测，1开启网络攻击检测
	NetAttackEnable *uint64 `json:"NetAttackEnable,omitnil,omitempty" name:"NetAttackEnable"`

	// 0 新增告警事件默认待处理，1新增告警事件默认已处理，3新增告警事件默认忽略
	NetAttackAlarmStatus *uint64 `json:"NetAttackAlarmStatus,omitnil,omitempty" name:"NetAttackAlarmStatus"`

	// 1 全部旗舰版主机，0 InstanceIds列表主机
	Scope *uint64 `json:"Scope,omitnil,omitempty" name:"Scope"`

	// 自选主机
	// 注意：此字段可能返回 null，表示取不到有效值。
	InstanceIds []*string `json:"InstanceIds,omitnil,omitempty" name:"InstanceIds"`

	// 自选排除主机
	// 注意：此字段可能返回 null，表示取不到有效值。
	ExcludeInstanceIds []*string `json:"ExcludeInstanceIds,omitnil,omitempty" name:"ExcludeInstanceIds"`

	// 新增资产自动包含 0 不包含 1包含
	AutoInclude *uint64 `json:"AutoInclude,omitnil,omitempty" name:"AutoInclude"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeNetAttackSettingResponse struct {
	*tchttp.BaseResponse
	Response *DescribeNetAttackSettingResponseParams `json:"Response"`
}

func (r *DescribeNetAttackSettingResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeNetAttackSettingResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeNetAttackWhiteListRequestParams struct {
	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 返回数量，最大值为100。
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 过滤条件。
	// <li>IP - String - 是否必填：否 - 主机ip查询 </li>
	// <li>SrcIP- String - 是否必填：否 - 白名单ip查询 </li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 排序方式: [ASC:升序|DESC:降序]
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 可选排序列: [CreateTime]
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

type DescribeNetAttackWhiteListRequest struct {
	*tchttp.BaseRequest
	
	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 返回数量，最大值为100。
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 过滤条件。
	// <li>IP - String - 是否必填：否 - 主机ip查询 </li>
	// <li>SrcIP- String - 是否必填：否 - 白名单ip查询 </li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 排序方式: [ASC:升序|DESC:降序]
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 可选排序列: [CreateTime]
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

func (r *DescribeNetAttackWhiteListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeNetAttackWhiteListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Offset")
	delete(f, "Limit")
	delete(f, "Filters")
	delete(f, "Order")
	delete(f, "By")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeNetAttackWhiteListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeNetAttackWhiteListResponseParams struct {
	// 总记录数
	TotalCount *uint64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// 白名单列表
	WhiteList []*NetAttackWhiteRule `json:"WhiteList,omitnil,omitempty" name:"WhiteList"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeNetAttackWhiteListResponse struct {
	*tchttp.BaseResponse
	Response *DescribeNetAttackWhiteListResponseParams `json:"Response"`
}

func (r *DescribeNetAttackWhiteListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeNetAttackWhiteListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeOpenPortStatisticsRequestParams struct {
	// 返回数量，默认为10，最大值为100。
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 过滤条件。
	// <li>Port - Uint64 - 是否必填：否 - 端口号</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`
}

type DescribeOpenPortStatisticsRequest struct {
	*tchttp.BaseRequest
	
	// 返回数量，默认为10，最大值为100。
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 过滤条件。
	// <li>Port - Uint64 - 是否必填：否 - 端口号</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`
}

func (r *DescribeOpenPortStatisticsRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeOpenPortStatisticsRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Limit")
	delete(f, "Offset")
	delete(f, "Filters")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeOpenPortStatisticsRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeOpenPortStatisticsResponseParams struct {
	// 端口统计列表总数
	TotalCount *uint64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// 端口统计数据列表
	OpenPortStatistics []*OpenPortStatistics `json:"OpenPortStatistics,omitnil,omitempty" name:"OpenPortStatistics"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeOpenPortStatisticsResponse struct {
	*tchttp.BaseResponse
	Response *DescribeOpenPortStatisticsResponseParams `json:"Response"`
}

func (r *DescribeOpenPortStatisticsResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeOpenPortStatisticsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeOverviewStatisticsRequestParams struct {

}

type DescribeOverviewStatisticsRequest struct {
	*tchttp.BaseRequest
	
}

func (r *DescribeOverviewStatisticsRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeOverviewStatisticsRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeOverviewStatisticsRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeOverviewStatisticsResponseParams struct {
	// 服务器在线数。
	OnlineMachineNum *uint64 `json:"OnlineMachineNum,omitnil,omitempty" name:"OnlineMachineNum"`

	// 专业服务器数。
	ProVersionMachineNum *uint64 `json:"ProVersionMachineNum,omitnil,omitempty" name:"ProVersionMachineNum"`

	// 木马文件数。
	MalwareNum *uint64 `json:"MalwareNum,omitnil,omitempty" name:"MalwareNum"`

	// 异地登录数。
	NonlocalLoginNum *uint64 `json:"NonlocalLoginNum,omitnil,omitempty" name:"NonlocalLoginNum"`

	// 暴力破解成功数。
	BruteAttackSuccessNum *uint64 `json:"BruteAttackSuccessNum,omitnil,omitempty" name:"BruteAttackSuccessNum"`

	// 漏洞数。
	VulNum *uint64 `json:"VulNum,omitnil,omitempty" name:"VulNum"`

	// 安全基线数。
	BaseLineNum *uint64 `json:"BaseLineNum,omitnil,omitempty" name:"BaseLineNum"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeOverviewStatisticsResponse struct {
	*tchttp.BaseResponse
	Response *DescribeOverviewStatisticsResponseParams `json:"Response"`
}

func (r *DescribeOverviewStatisticsResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeOverviewStatisticsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribePrivilegeEventInfoRequestParams struct {
	// 事件id
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`
}

type DescribePrivilegeEventInfoRequest struct {
	*tchttp.BaseRequest
	
	// 事件id
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`
}

func (r *DescribePrivilegeEventInfoRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribePrivilegeEventInfoRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Id")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribePrivilegeEventInfoRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribePrivilegeEventInfoResponseParams struct {
	// 本地提权详情
	// 注意：此字段可能返回 null，表示取不到有效值。
	PrivilegeEventInfo *PrivilegeEventInfo `json:"PrivilegeEventInfo,omitnil,omitempty" name:"PrivilegeEventInfo"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribePrivilegeEventInfoResponse struct {
	*tchttp.BaseResponse
	Response *DescribePrivilegeEventInfoResponseParams `json:"Response"`
}

func (r *DescribePrivilegeEventInfoResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribePrivilegeEventInfoResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribePrivilegeEventsRequestParams struct {
	// 返回数量，最大值为100。
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 过滤条件。
	// <li>Keywords - String - 是否必填：否 - 关键词(主机IP)</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 排序方式：根据请求次数排序：asc-升序/desc-降序
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 排序字段：CreateTime-发现时间
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

type DescribePrivilegeEventsRequest struct {
	*tchttp.BaseRequest
	
	// 返回数量，最大值为100。
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 过滤条件。
	// <li>Keywords - String - 是否必填：否 - 关键词(主机IP)</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 排序方式：根据请求次数排序：asc-升序/desc-降序
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 排序字段：CreateTime-发现时间
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

func (r *DescribePrivilegeEventsRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribePrivilegeEventsRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Limit")
	delete(f, "Offset")
	delete(f, "Filters")
	delete(f, "Order")
	delete(f, "By")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribePrivilegeEventsRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribePrivilegeEventsResponseParams struct {
	// 数据列表
	List []*PrivilegeEscalationProcess `json:"List,omitnil,omitempty" name:"List"`

	// 总条数
	TotalCount *uint64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribePrivilegeEventsResponse struct {
	*tchttp.BaseResponse
	Response *DescribePrivilegeEventsResponseParams `json:"Response"`
}

func (r *DescribePrivilegeEventsResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribePrivilegeEventsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribePrivilegeRulesRequestParams struct {
	// 返回数量，最大值为100。
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 过滤条件。
	// <li>Keywords - String - 是否必填：否 - 关键字(进程名称)</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`
}

type DescribePrivilegeRulesRequest struct {
	*tchttp.BaseRequest
	
	// 返回数量，最大值为100。
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 过滤条件。
	// <li>Keywords - String - 是否必填：否 - 关键字(进程名称)</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`
}

func (r *DescribePrivilegeRulesRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribePrivilegeRulesRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Limit")
	delete(f, "Offset")
	delete(f, "Filters")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribePrivilegeRulesRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribePrivilegeRulesResponseParams struct {
	// 列表内容
	List []*PrivilegeRule `json:"List,omitnil,omitempty" name:"List"`

	// 总条数
	TotalCount *uint64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribePrivilegeRulesResponse struct {
	*tchttp.BaseResponse
	Response *DescribePrivilegeRulesResponseParams `json:"Response"`
}

func (r *DescribePrivilegeRulesResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribePrivilegeRulesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeProVersionInfoRequestParams struct {

}

type DescribeProVersionInfoRequest struct {
	*tchttp.BaseRequest
	
}

func (r *DescribeProVersionInfoRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeProVersionInfoRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeProVersionInfoRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeProVersionInfoResponseParams struct {
	// 后付费昨日扣费
	PostPayCost *uint64 `json:"PostPayCost,omitnil,omitempty" name:"PostPayCost"`

	// 新增主机是否自动开通专业版
	IsAutoOpenProVersion *bool `json:"IsAutoOpenProVersion,omitnil,omitempty" name:"IsAutoOpenProVersion"`

	// 开通专业版主机数
	ProVersionNum *uint64 `json:"ProVersionNum,omitnil,omitempty" name:"ProVersionNum"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeProVersionInfoResponse struct {
	*tchttp.BaseResponse
	Response *DescribeProVersionInfoResponseParams `json:"Response"`
}

func (r *DescribeProVersionInfoResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeProVersionInfoResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeProVersionStatusRequestParams struct {
	// 主机安全客户端UUID、填写"all"表示所有主机。
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`
}

type DescribeProVersionStatusRequest struct {
	*tchttp.BaseRequest
	
	// 主机安全客户端UUID、填写"all"表示所有主机。
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`
}

func (r *DescribeProVersionStatusRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeProVersionStatusRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Uuid")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeProVersionStatusRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeProVersionStatusResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeProVersionStatusResponse struct {
	*tchttp.BaseResponse
	Response *DescribeProVersionStatusResponseParams `json:"Response"`
}

func (r *DescribeProVersionStatusResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeProVersionStatusResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeProcessStatisticsRequestParams struct {
	// 返回数量，默认为10，最大值为100。
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 过滤条件。
	// <li>ProcessName - String - 是否必填：否 - 进程名</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`
}

type DescribeProcessStatisticsRequest struct {
	*tchttp.BaseRequest
	
	// 返回数量，默认为10，最大值为100。
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 过滤条件。
	// <li>ProcessName - String - 是否必填：否 - 进程名</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`
}

func (r *DescribeProcessStatisticsRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeProcessStatisticsRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Limit")
	delete(f, "Offset")
	delete(f, "Filters")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeProcessStatisticsRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeProcessStatisticsResponseParams struct {
	// 进程统计列表记录总数。
	TotalCount *uint64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// 进程统计列表数据数组。
	ProcessStatistics []*ProcessStatistics `json:"ProcessStatistics,omitnil,omitempty" name:"ProcessStatistics"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeProcessStatisticsResponse struct {
	*tchttp.BaseResponse
	Response *DescribeProcessStatisticsResponseParams `json:"Response"`
}

func (r *DescribeProcessStatisticsResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeProcessStatisticsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeProductStatusRequestParams struct {

}

type DescribeProductStatusRequest struct {
	*tchttp.BaseRequest
	
}

func (r *DescribeProductStatusRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeProductStatusRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeProductStatusRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeProductStatusResponseParams struct {
	// 接口调用返回状态码
	ReturnCode *uint64 `json:"ReturnCode,omitnil,omitempty" name:"ReturnCode"`

	// 接口调用返回信息
	ReturnMsg *string `json:"ReturnMsg,omitnil,omitempty" name:"ReturnMsg"`

	// 防护状态及试用信息
	Data *ProductStatusInfo `json:"Data,omitnil,omitempty" name:"Data"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeProductStatusResponse struct {
	*tchttp.BaseResponse
	Response *DescribeProductStatusResponseParams `json:"Response"`
}

func (r *DescribeProductStatusResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeProductStatusResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeProtectDirListRequestParams struct {
	// 分页条数 最大100条
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// DirName 网站名称
	// DirPath 网站防护目录地址
	Filters []*AssetFilters `json:"Filters,omitnil,omitempty" name:"Filters"`

	// asc：升序/desc：降序
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 排序字段
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

type DescribeProtectDirListRequest struct {
	*tchttp.BaseRequest
	
	// 分页条数 最大100条
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// DirName 网站名称
	// DirPath 网站防护目录地址
	Filters []*AssetFilters `json:"Filters,omitnil,omitempty" name:"Filters"`

	// asc：升序/desc：降序
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 排序字段
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

func (r *DescribeProtectDirListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeProtectDirListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Limit")
	delete(f, "Offset")
	delete(f, "Filters")
	delete(f, "Order")
	delete(f, "By")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeProtectDirListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeProtectDirListResponseParams struct {
	// 总数
	TotalCount *uint64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// 防护目录列表信息
	List []*ProtectDirInfo `json:"List,omitnil,omitempty" name:"List"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeProtectDirListResponse struct {
	*tchttp.BaseResponse
	Response *DescribeProtectDirListResponseParams `json:"Response"`
}

func (r *DescribeProtectDirListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeProtectDirListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeProtectDirRelatedServerRequestParams struct {
	// 唯一ID
	Id *string `json:"Id,omitnil,omitempty" name:"Id"`

	// 分页条数 最大100条
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 过滤参数 ProtectStatus
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 排序方式
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 排序值
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

type DescribeProtectDirRelatedServerRequest struct {
	*tchttp.BaseRequest
	
	// 唯一ID
	Id *string `json:"Id,omitnil,omitempty" name:"Id"`

	// 分页条数 最大100条
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 过滤参数 ProtectStatus
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 排序方式
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 排序值
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

func (r *DescribeProtectDirRelatedServerRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeProtectDirRelatedServerRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Id")
	delete(f, "Limit")
	delete(f, "Offset")
	delete(f, "Filters")
	delete(f, "Order")
	delete(f, "By")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeProtectDirRelatedServerRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeProtectDirRelatedServerResponseParams struct {
	// 网站关联服务器列表信息
	List []*ProtectDirRelatedServer `json:"List,omitnil,omitempty" name:"List"`

	// 总数
	TotalCount *uint64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// 已开启防护总数
	ProtectServerCount *uint64 `json:"ProtectServerCount,omitnil,omitempty" name:"ProtectServerCount"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeProtectDirRelatedServerResponse struct {
	*tchttp.BaseResponse
	Response *DescribeProtectDirRelatedServerResponseParams `json:"Response"`
}

func (r *DescribeProtectDirRelatedServerResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeProtectDirRelatedServerResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeProtectNetListRequestParams struct {
	// 过滤条件。
	// <li>Keyword- String - 是否必填：否 - 关键词过滤，</li>
	// <li>Uuids - String - 是否必填：否 - 主机id过滤</li>
	Filters []*Filters `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 需要返回的数量，最大值为100
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 排序步长
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 排序方法
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 排序字段 StartTime，EndTime
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

type DescribeProtectNetListRequest struct {
	*tchttp.BaseRequest
	
	// 过滤条件。
	// <li>Keyword- String - 是否必填：否 - 关键词过滤，</li>
	// <li>Uuids - String - 是否必填：否 - 主机id过滤</li>
	Filters []*Filters `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 需要返回的数量，最大值为100
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 排序步长
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 排序方法
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 排序字段 StartTime，EndTime
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

func (r *DescribeProtectNetListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeProtectNetListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Filters")
	delete(f, "Limit")
	delete(f, "Offset")
	delete(f, "Order")
	delete(f, "By")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeProtectNetListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeProtectNetListResponseParams struct {
	// 总条数
	TotalCount *uint64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// 安全管家数据
	List []*ProtectNetInfo `json:"List,omitnil,omitempty" name:"List"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeProtectNetListResponse struct {
	*tchttp.BaseResponse
	Response *DescribeProtectNetListResponseParams `json:"Response"`
}

func (r *DescribeProtectNetListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeProtectNetListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribePublicProxyInstallCommandRequestParams struct {
	// nginx主机IP列表，逗号分隔
	Ip *string `json:"Ip,omitnil,omitempty" name:"Ip"`
}

type DescribePublicProxyInstallCommandRequest struct {
	*tchttp.BaseRequest
	
	// nginx主机IP列表，逗号分隔
	Ip *string `json:"Ip,omitnil,omitempty" name:"Ip"`
}

func (r *DescribePublicProxyInstallCommandRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribePublicProxyInstallCommandRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Ip")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribePublicProxyInstallCommandRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribePublicProxyInstallCommandResponseParams struct {
	// Nginx安装命令
	NginxCommand *string `json:"NginxCommand,omitnil,omitempty" name:"NginxCommand"`

	// Keepalived安装命令
	// 注意：此字段可能返回 null，表示取不到有效值。
	KeepAliveCommand *string `json:"KeepAliveCommand,omitnil,omitempty" name:"KeepAliveCommand"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribePublicProxyInstallCommandResponse struct {
	*tchttp.BaseResponse
	Response *DescribePublicProxyInstallCommandResponseParams `json:"Response"`
}

func (r *DescribePublicProxyInstallCommandResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribePublicProxyInstallCommandResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeRansomDefenseBackupListRequestParams struct {
	// 分页参数 最大100条
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 分页参数
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 主机Quuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 过滤条件。
	// <li>Status - Int - 是否必填：否 - 通过勒索状态查询：0未勒索，1已勒索 </li>
	// <li>CreateTimeBegin - string - 是否必填：否 - 创建时间开始 </li>
	// <li>CreateTimeEnd - string - 是否必填：否 - 创建时间结束 </li>
	Filters []*Filters `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 排序方法 ASC DESC
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 排序字段支持CreateTime
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

type DescribeRansomDefenseBackupListRequest struct {
	*tchttp.BaseRequest
	
	// 分页参数 最大100条
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 分页参数
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 主机Quuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 过滤条件。
	// <li>Status - Int - 是否必填：否 - 通过勒索状态查询：0未勒索，1已勒索 </li>
	// <li>CreateTimeBegin - string - 是否必填：否 - 创建时间开始 </li>
	// <li>CreateTimeEnd - string - 是否必填：否 - 创建时间结束 </li>
	Filters []*Filters `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 排序方法 ASC DESC
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 排序字段支持CreateTime
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

func (r *DescribeRansomDefenseBackupListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeRansomDefenseBackupListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Limit")
	delete(f, "Offset")
	delete(f, "Quuid")
	delete(f, "Filters")
	delete(f, "Order")
	delete(f, "By")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeRansomDefenseBackupListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeRansomDefenseBackupListResponseParams struct {
	// 备份列表
	// 注意：此字段可能返回 null，表示取不到有效值。
	List []*RansomDefenseBackup `json:"List,omitnil,omitempty" name:"List"`

	// 分页查询记录总数
	// 注意：此字段可能返回 null，表示取不到有效值。
	TotalCount *uint64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeRansomDefenseBackupListResponse struct {
	*tchttp.BaseResponse
	Response *DescribeRansomDefenseBackupListResponseParams `json:"Response"`
}

func (r *DescribeRansomDefenseBackupListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeRansomDefenseBackupListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeRansomDefenseEventsListRequestParams struct {
	// 分页参数 最大100条
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 分页参数
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 过滤条件。
	// <li>HostName- string- 主机名称</li>
	// <li>Status - Uint64 - 0待处理，1已处理，2已信任</li>
	// <li>HostIp- String - 主机ip</li>
	Filters []*Filters `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 排序方法 ASC DESC
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 排序字段支持CreateTime
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

type DescribeRansomDefenseEventsListRequest struct {
	*tchttp.BaseRequest
	
	// 分页参数 最大100条
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 分页参数
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 过滤条件。
	// <li>HostName- string- 主机名称</li>
	// <li>Status - Uint64 - 0待处理，1已处理，2已信任</li>
	// <li>HostIp- String - 主机ip</li>
	Filters []*Filters `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 排序方法 ASC DESC
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 排序字段支持CreateTime
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

func (r *DescribeRansomDefenseEventsListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeRansomDefenseEventsListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Limit")
	delete(f, "Offset")
	delete(f, "Filters")
	delete(f, "Order")
	delete(f, "By")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeRansomDefenseEventsListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeRansomDefenseEventsListResponseParams struct {
	// 事件列表
	// 注意：此字段可能返回 null，表示取不到有效值。
	List []*RansomDefenseEvent `json:"List,omitnil,omitempty" name:"List"`

	// 分页查询记录总数
	// 注意：此字段可能返回 null，表示取不到有效值。
	TotalCount *uint64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeRansomDefenseEventsListResponse struct {
	*tchttp.BaseResponse
	Response *DescribeRansomDefenseEventsListResponseParams `json:"Response"`
}

func (r *DescribeRansomDefenseEventsListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeRansomDefenseEventsListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeRansomDefenseMachineListRequestParams struct {
	// 分页参数 最大100条
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 分页参数
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 过滤条件。
	// <li>Ips - String - 是否必填：否 - 通过ip查询 </li>
	// <li>MachineNames - String - 是否必填：否 - 通过实例名查询 </li>
	// <li>Names - String - 是否必填：否 - 通过策略名查询 </li>
	// <li>Status - String - 是否必填：否 - 策略状态：0备份中，1备份成功，2备份失败, 9暂无备份 </li>
	// <li>LastBackupStatus - String - 是否必填：否 - 上次备份状态：0备份中，1备份成功，2备份失败, 9暂无备份 </li>
	// <li>LastBackupTimeBegin - String - 是否必填：否 - 最近一次备份时间开始</li>
	// <li>LastBackupTimeEnd - String - 是否必填：否 - 最近一次备份时间结束</li>
	Filters []*Filters `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 排序方法 ASC DESC
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 排序字段支持CreateTime、LastBackupTime、BackupCount
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

type DescribeRansomDefenseMachineListRequest struct {
	*tchttp.BaseRequest
	
	// 分页参数 最大100条
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 分页参数
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 过滤条件。
	// <li>Ips - String - 是否必填：否 - 通过ip查询 </li>
	// <li>MachineNames - String - 是否必填：否 - 通过实例名查询 </li>
	// <li>Names - String - 是否必填：否 - 通过策略名查询 </li>
	// <li>Status - String - 是否必填：否 - 策略状态：0备份中，1备份成功，2备份失败, 9暂无备份 </li>
	// <li>LastBackupStatus - String - 是否必填：否 - 上次备份状态：0备份中，1备份成功，2备份失败, 9暂无备份 </li>
	// <li>LastBackupTimeBegin - String - 是否必填：否 - 最近一次备份时间开始</li>
	// <li>LastBackupTimeEnd - String - 是否必填：否 - 最近一次备份时间结束</li>
	Filters []*Filters `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 排序方法 ASC DESC
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 排序字段支持CreateTime、LastBackupTime、BackupCount
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

func (r *DescribeRansomDefenseMachineListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeRansomDefenseMachineListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Limit")
	delete(f, "Offset")
	delete(f, "Filters")
	delete(f, "Order")
	delete(f, "By")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeRansomDefenseMachineListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeRansomDefenseMachineListResponseParams struct {
	// 主机列表
	// 注意：此字段可能返回 null，表示取不到有效值。
	List []*RansomDefenseStrategyMachineBackupInfo `json:"List,omitnil,omitempty" name:"List"`

	// 分页查询记录总数
	// 注意：此字段可能返回 null，表示取不到有效值。
	TotalCount *uint64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeRansomDefenseMachineListResponse struct {
	*tchttp.BaseResponse
	Response *DescribeRansomDefenseMachineListResponseParams `json:"Response"`
}

func (r *DescribeRansomDefenseMachineListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeRansomDefenseMachineListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeRansomDefenseMachineStrategyInfoRequestParams struct {
	// 主机Quuid列表
	Quuids []*string `json:"Quuids,omitnil,omitempty" name:"Quuids"`
}

type DescribeRansomDefenseMachineStrategyInfoRequest struct {
	*tchttp.BaseRequest
	
	// 主机Quuid列表
	Quuids []*string `json:"Quuids,omitnil,omitempty" name:"Quuids"`
}

func (r *DescribeRansomDefenseMachineStrategyInfoRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeRansomDefenseMachineStrategyInfoRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Quuids")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeRansomDefenseMachineStrategyInfoRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeRansomDefenseMachineStrategyInfoResponseParams struct {
	// 策略ID列表,0表示未绑定任何策略
	StrategyIds []*uint64 `json:"StrategyIds,omitnil,omitempty" name:"StrategyIds"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeRansomDefenseMachineStrategyInfoResponse struct {
	*tchttp.BaseResponse
	Response *DescribeRansomDefenseMachineStrategyInfoResponseParams `json:"Response"`
}

func (r *DescribeRansomDefenseMachineStrategyInfoResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeRansomDefenseMachineStrategyInfoResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeRansomDefenseRollBackTaskListRequestParams struct {
	// 分页参数 最大100条
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 分页参数
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 过滤条件。
	// <li>Ips- string- 主机名称</li>
	// <li>Status - Uint64 - 0进行中，1成功，2失败</li>
	// <li>Names- String - 主机名称</li>
	Filters []*Filters `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 排序方法 ASC DESC
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 排序字段支持CreateTime、ModifyTime
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

type DescribeRansomDefenseRollBackTaskListRequest struct {
	*tchttp.BaseRequest
	
	// 分页参数 最大100条
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 分页参数
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 过滤条件。
	// <li>Ips- string- 主机名称</li>
	// <li>Status - Uint64 - 0进行中，1成功，2失败</li>
	// <li>Names- String - 主机名称</li>
	Filters []*Filters `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 排序方法 ASC DESC
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 排序字段支持CreateTime、ModifyTime
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

func (r *DescribeRansomDefenseRollBackTaskListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeRansomDefenseRollBackTaskListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Limit")
	delete(f, "Offset")
	delete(f, "Filters")
	delete(f, "Order")
	delete(f, "By")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeRansomDefenseRollBackTaskListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeRansomDefenseRollBackTaskListResponseParams struct {
	// 任务列表
	// 注意：此字段可能返回 null，表示取不到有效值。
	List []*RansomDefenseRollbackTask `json:"List,omitnil,omitempty" name:"List"`

	// 分页查询记录总数
	// 注意：此字段可能返回 null，表示取不到有效值。
	TotalCount *uint64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeRansomDefenseRollBackTaskListResponse struct {
	*tchttp.BaseResponse
	Response *DescribeRansomDefenseRollBackTaskListResponseParams `json:"Response"`
}

func (r *DescribeRansomDefenseRollBackTaskListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeRansomDefenseRollBackTaskListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeRansomDefenseStateRequestParams struct {

}

type DescribeRansomDefenseStateRequest struct {
	*tchttp.BaseRequest
	
}

func (r *DescribeRansomDefenseStateRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeRansomDefenseStateRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeRansomDefenseStateRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeRansomDefenseStateResponseParams struct {
	// 已开启防御策略数量
	StrategyCount *uint64 `json:"StrategyCount,omitnil,omitempty" name:"StrategyCount"`

	// 已开启防御机器数
	MachineCount *uint64 `json:"MachineCount,omitnil,omitempty" name:"MachineCount"`

	// 快照总容量
	SnapshotSize *uint64 `json:"SnapshotSize,omitnil,omitempty" name:"SnapshotSize"`

	// 恢复备份任务数量
	RollBackTaskCount *uint64 `json:"RollBackTaskCount,omitnil,omitempty" name:"RollBackTaskCount"`

	// 进行中的创建快照任务数
	ProgressingSnapshotTaskCount *uint64 `json:"ProgressingSnapshotTaskCount,omitnil,omitempty" name:"ProgressingSnapshotTaskCount"`

	// 进行中的恢复备份任务数
	ProgressingRollBackTaskCount *uint64 `json:"ProgressingRollBackTaskCount,omitnil,omitempty" name:"ProgressingRollBackTaskCount"`

	// 机器总数
	MachineTotal *uint64 `json:"MachineTotal,omitnil,omitempty" name:"MachineTotal"`

	// 策略总数
	StrategyTotal *uint64 `json:"StrategyTotal,omitnil,omitempty" name:"StrategyTotal"`

	// 账户状态：0未欠费，1已欠费
	BalanceStatus *uint64 `json:"BalanceStatus,omitnil,omitempty" name:"BalanceStatus"`

	// 已备份主机数
	BackupMachineCount *uint64 `json:"BackupMachineCount,omitnil,omitempty" name:"BackupMachineCount"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeRansomDefenseStateResponse struct {
	*tchttp.BaseResponse
	Response *DescribeRansomDefenseStateResponseParams `json:"Response"`
}

func (r *DescribeRansomDefenseStateResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeRansomDefenseStateResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeRansomDefenseStrategyDetailRequestParams struct {
	// 策略ID
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`
}

type DescribeRansomDefenseStrategyDetailRequest struct {
	*tchttp.BaseRequest
	
	// 策略ID
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`
}

func (r *DescribeRansomDefenseStrategyDetailRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeRansomDefenseStrategyDetailRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Id")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeRansomDefenseStrategyDetailRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeRansomDefenseStrategyDetailResponseParams struct {
	// 策略详情
	// 注意：此字段可能返回 null，表示取不到有效值。
	Strategy *RansomDefenseStrategyDetail `json:"Strategy,omitnil,omitempty" name:"Strategy"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeRansomDefenseStrategyDetailResponse struct {
	*tchttp.BaseResponse
	Response *DescribeRansomDefenseStrategyDetailResponseParams `json:"Response"`
}

func (r *DescribeRansomDefenseStrategyDetailResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeRansomDefenseStrategyDetailResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeRansomDefenseStrategyListRequestParams struct {
	// 分页参数 最大100条
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 分页参数
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 过滤条件。
	// <li>Ips - String - 是否必填：否 - 通过ip查询 </li>
	// <li>MachineNames - String - 是否必填：否 - 通过实例名查询 </li>
	// <li>Names - String - 是否必填：否 - 通过防勒索策略名查询 </li>
	// <li>Dirs - String - 是否必填：否 - 诱饵目录 </li>
	// <li>Status - String - 是否必填：否 - 策略状态：0关闭，1开启 </li>
	// <li>BackupType - String - 是否必填：否 - 备份模式：0-按周;1-按天 </li>
	Filters []*Filters `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 排序方法 ASC DESC
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 排序字段支持CreateTime, MachineCount
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

type DescribeRansomDefenseStrategyListRequest struct {
	*tchttp.BaseRequest
	
	// 分页参数 最大100条
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 分页参数
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 过滤条件。
	// <li>Ips - String - 是否必填：否 - 通过ip查询 </li>
	// <li>MachineNames - String - 是否必填：否 - 通过实例名查询 </li>
	// <li>Names - String - 是否必填：否 - 通过防勒索策略名查询 </li>
	// <li>Dirs - String - 是否必填：否 - 诱饵目录 </li>
	// <li>Status - String - 是否必填：否 - 策略状态：0关闭，1开启 </li>
	// <li>BackupType - String - 是否必填：否 - 备份模式：0-按周;1-按天 </li>
	Filters []*Filters `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 排序方法 ASC DESC
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 排序字段支持CreateTime, MachineCount
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

func (r *DescribeRansomDefenseStrategyListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeRansomDefenseStrategyListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Limit")
	delete(f, "Offset")
	delete(f, "Filters")
	delete(f, "Order")
	delete(f, "By")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeRansomDefenseStrategyListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeRansomDefenseStrategyListResponseParams struct {
	// 策略列表
	// 注意：此字段可能返回 null，表示取不到有效值。
	List []*RansomDefenseStrategy `json:"List,omitnil,omitempty" name:"List"`

	// 分页查询记录总数
	// 注意：此字段可能返回 null，表示取不到有效值。
	TotalCount *uint64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeRansomDefenseStrategyListResponse struct {
	*tchttp.BaseResponse
	Response *DescribeRansomDefenseStrategyListResponseParams `json:"Response"`
}

func (r *DescribeRansomDefenseStrategyListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeRansomDefenseStrategyListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeRansomDefenseStrategyMachinesRequestParams struct {
	// 分页参数 最大100条
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 分页参数
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 过滤条件。
	// <li>Ips- string- 主机名称</li>
	// <li>Status - Uint64 - 0未绑定，1已绑定</li>
	// <li>Names- String - 主机名称</li>
	Filters []*Filters `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 排序方法 ASC DESC
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 排序字段支持CreateTime
	By *string `json:"By,omitnil,omitempty" name:"By"`

	// 防勒索策略ID
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`
}

type DescribeRansomDefenseStrategyMachinesRequest struct {
	*tchttp.BaseRequest
	
	// 分页参数 最大100条
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 分页参数
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 过滤条件。
	// <li>Ips- string- 主机名称</li>
	// <li>Status - Uint64 - 0未绑定，1已绑定</li>
	// <li>Names- String - 主机名称</li>
	Filters []*Filters `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 排序方法 ASC DESC
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 排序字段支持CreateTime
	By *string `json:"By,omitnil,omitempty" name:"By"`

	// 防勒索策略ID
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`
}

func (r *DescribeRansomDefenseStrategyMachinesRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeRansomDefenseStrategyMachinesRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Limit")
	delete(f, "Offset")
	delete(f, "Filters")
	delete(f, "Order")
	delete(f, "By")
	delete(f, "Id")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeRansomDefenseStrategyMachinesRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeRansomDefenseStrategyMachinesResponseParams struct {
	// 主机列表
	// 注意：此字段可能返回 null，表示取不到有效值。
	List []*RansomDefenseStrategyMachineDetail `json:"List,omitnil,omitempty" name:"List"`

	// 分页查询记录总数
	// 注意：此字段可能返回 null，表示取不到有效值。
	TotalCount *uint64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeRansomDefenseStrategyMachinesResponse struct {
	*tchttp.BaseResponse
	Response *DescribeRansomDefenseStrategyMachinesResponseParams `json:"Response"`
}

func (r *DescribeRansomDefenseStrategyMachinesResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeRansomDefenseStrategyMachinesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeRansomDefenseTrendRequestParams struct {

}

type DescribeRansomDefenseTrendRequest struct {
	*tchttp.BaseRequest
	
}

func (r *DescribeRansomDefenseTrendRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeRansomDefenseTrendRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeRansomDefenseTrendRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeRansomDefenseTrendResponseParams struct {
	// 勒索事件数量
	EventCount *uint64 `json:"EventCount,omitnil,omitempty" name:"EventCount"`

	// 影响行业数量
	IndustryCount *uint64 `json:"IndustryCount,omitnil,omitempty" name:"IndustryCount"`

	// 开通勒索的公司数量
	CompanyCount *uint64 `json:"CompanyCount,omitnil,omitempty" name:"CompanyCount"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeRansomDefenseTrendResponse struct {
	*tchttp.BaseResponse
	Response *DescribeRansomDefenseTrendResponseParams `json:"Response"`
}

func (r *DescribeRansomDefenseTrendResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeRansomDefenseTrendResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeRecommendedProtectCpuRequestParams struct {

}

type DescribeRecommendedProtectCpuRequest struct {
	*tchttp.BaseRequest
	
}

func (r *DescribeRecommendedProtectCpuRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeRecommendedProtectCpuRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeRecommendedProtectCpuRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeRecommendedProtectCpuResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeRecommendedProtectCpuResponse struct {
	*tchttp.BaseResponse
	Response *DescribeRecommendedProtectCpuResponseParams `json:"Response"`
}

func (r *DescribeRecommendedProtectCpuResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeRecommendedProtectCpuResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeReverseShellEventInfoRequestParams struct {
	// 事件id
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`
}

type DescribeReverseShellEventInfoRequest struct {
	*tchttp.BaseRequest
	
	// 事件id
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`
}

func (r *DescribeReverseShellEventInfoRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeReverseShellEventInfoRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Id")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeReverseShellEventInfoRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeReverseShellEventInfoResponseParams struct {
	// 反弹shell详情信息
	// 注意：此字段可能返回 null，表示取不到有效值。
	ReverseShellEventInfo *ReverseShellEventInfo `json:"ReverseShellEventInfo,omitnil,omitempty" name:"ReverseShellEventInfo"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeReverseShellEventInfoResponse struct {
	*tchttp.BaseResponse
	Response *DescribeReverseShellEventInfoResponseParams `json:"Response"`
}

func (r *DescribeReverseShellEventInfoResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeReverseShellEventInfoResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeReverseShellEventsRequestParams struct {
	// 返回数量，最大值为100。
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 过滤条件。
	// <li>Keywords - String - 是否必填：否 - 关键字(主机内网IP|进程名)</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 排序方式：根据请求次数排序：asc-升序/desc-降序
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 排序字段：CreateTime-发生时间
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

type DescribeReverseShellEventsRequest struct {
	*tchttp.BaseRequest
	
	// 返回数量，最大值为100。
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 过滤条件。
	// <li>Keywords - String - 是否必填：否 - 关键字(主机内网IP|进程名)</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 排序方式：根据请求次数排序：asc-升序/desc-降序
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 排序字段：CreateTime-发生时间
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

func (r *DescribeReverseShellEventsRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeReverseShellEventsRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Limit")
	delete(f, "Offset")
	delete(f, "Filters")
	delete(f, "Order")
	delete(f, "By")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeReverseShellEventsRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeReverseShellEventsResponseParams struct {
	// 列表内容
	List []*ReverseShell `json:"List,omitnil,omitempty" name:"List"`

	// 总条数
	TotalCount *uint64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeReverseShellEventsResponse struct {
	*tchttp.BaseResponse
	Response *DescribeReverseShellEventsResponseParams `json:"Response"`
}

func (r *DescribeReverseShellEventsResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeReverseShellEventsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeReverseShellRulesRequestParams struct {
	// 返回数量，默认为10，最大值为100。
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 过滤条件。
	// <li>Keywords - String - 是否必填：否 - 关键字(进程名称)</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`
}

type DescribeReverseShellRulesRequest struct {
	*tchttp.BaseRequest
	
	// 返回数量，默认为10，最大值为100。
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 过滤条件。
	// <li>Keywords - String - 是否必填：否 - 关键字(进程名称)</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`
}

func (r *DescribeReverseShellRulesRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeReverseShellRulesRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Limit")
	delete(f, "Offset")
	delete(f, "Filters")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeReverseShellRulesRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeReverseShellRulesResponseParams struct {
	// 列表内容
	List []*ReverseShellRule `json:"List,omitnil,omitempty" name:"List"`

	// 总条数
	TotalCount *uint64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeReverseShellRulesResponse struct {
	*tchttp.BaseResponse
	Response *DescribeReverseShellRulesResponseParams `json:"Response"`
}

func (r *DescribeReverseShellRulesResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeReverseShellRulesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeRiskBatchStatusRequestParams struct {
	// 操作事件类型，文件查杀：MALWARE，异常登录：HOST_LOGIN，密码破解：BRUTE_ATTACK，恶意请求：MALICIOUS_REQUEST，高危命令：BASH_EVENT，本地提权：PRIVILEGE_EVENT，反弹shell：REVERSE_SHELL
	RiskType *string `json:"RiskType,omitnil,omitempty" name:"RiskType"`
}

type DescribeRiskBatchStatusRequest struct {
	*tchttp.BaseRequest
	
	// 操作事件类型，文件查杀：MALWARE，异常登录：HOST_LOGIN，密码破解：BRUTE_ATTACK，恶意请求：MALICIOUS_REQUEST，高危命令：BASH_EVENT，本地提权：PRIVILEGE_EVENT，反弹shell：REVERSE_SHELL
	RiskType *string `json:"RiskType,omitnil,omitempty" name:"RiskType"`
}

func (r *DescribeRiskBatchStatusRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeRiskBatchStatusRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "RiskType")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeRiskBatchStatusRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeRiskBatchStatusResponseParams struct {
	// Handling:正在执行删除操作，
	// Pending：没有任务执行
	Status *string `json:"Status,omitnil,omitempty" name:"Status"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeRiskBatchStatusResponse struct {
	*tchttp.BaseResponse
	Response *DescribeRiskBatchStatusResponseParams `json:"Response"`
}

func (r *DescribeRiskBatchStatusResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeRiskBatchStatusResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeRiskDnsEventInfoRequestParams struct {
	// 恶意请求事件Id
	Id *int64 `json:"Id,omitnil,omitempty" name:"Id"`
}

type DescribeRiskDnsEventInfoRequest struct {
	*tchttp.BaseRequest
	
	// 恶意请求事件Id
	Id *int64 `json:"Id,omitnil,omitempty" name:"Id"`
}

func (r *DescribeRiskDnsEventInfoRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeRiskDnsEventInfoRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Id")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeRiskDnsEventInfoRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeRiskDnsEventInfoResponseParams struct {
	// 恶意请求事件详情
	// 注意：此字段可能返回 null，表示取不到有效值。
	Info *RiskDnsEvent `json:"Info,omitnil,omitempty" name:"Info"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeRiskDnsEventInfoResponse struct {
	*tchttp.BaseResponse
	Response *DescribeRiskDnsEventInfoResponseParams `json:"Response"`
}

func (r *DescribeRiskDnsEventInfoResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeRiskDnsEventInfoResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeRiskDnsEventListRequestParams struct {
	// <li>IpOrName - String - 是否必填：否 - 主机Ip或别名筛选</li>
	// <li>HostId - String - 是否必填：否 - 主机Id</li>
	// <li>AgentId - String - 是否必填：否 - 客户端Id</li>
	// <li>PolicyType - String - 是否必填：否 - 策略类型,0:系统策略1:用户自定义策略</li>
	// <li>Domain - String - 是否必填：否 - 域名(先对域名做urlencode,再base64)</li>
	// <li>HandleStatus - String - 是否必填：否 - 状态筛选0:待处理；2:信任；3:不信任</li>
	// <li>BeginTime - String - 是否必填：否 - 最近访问开始时间</li>
	// <li>EndTime - String - 是否必填：否 - 最近访问结束时间</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 需要返回的数量，默认为10，最大值为100
	Limit *int64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量，默认为0。
	Offset *int64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 排序方式：根据请求次数排序：[asc:升序|desc:降序]
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 排序字段：[AccessCount:请求次数|LastTime:最近请求时间]
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

type DescribeRiskDnsEventListRequest struct {
	*tchttp.BaseRequest
	
	// <li>IpOrName - String - 是否必填：否 - 主机Ip或别名筛选</li>
	// <li>HostId - String - 是否必填：否 - 主机Id</li>
	// <li>AgentId - String - 是否必填：否 - 客户端Id</li>
	// <li>PolicyType - String - 是否必填：否 - 策略类型,0:系统策略1:用户自定义策略</li>
	// <li>Domain - String - 是否必填：否 - 域名(先对域名做urlencode,再base64)</li>
	// <li>HandleStatus - String - 是否必填：否 - 状态筛选0:待处理；2:信任；3:不信任</li>
	// <li>BeginTime - String - 是否必填：否 - 最近访问开始时间</li>
	// <li>EndTime - String - 是否必填：否 - 最近访问结束时间</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 需要返回的数量，默认为10，最大值为100
	Limit *int64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量，默认为0。
	Offset *int64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 排序方式：根据请求次数排序：[asc:升序|desc:降序]
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 排序字段：[AccessCount:请求次数|LastTime:最近请求时间]
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

func (r *DescribeRiskDnsEventListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeRiskDnsEventListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Filters")
	delete(f, "Limit")
	delete(f, "Offset")
	delete(f, "Order")
	delete(f, "By")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeRiskDnsEventListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeRiskDnsEventListResponseParams struct {
	// 恶意请求事件列表
	// 注意：此字段可能返回 null，表示取不到有效值。
	List []*RiskDnsEvent `json:"List,omitnil,omitempty" name:"List"`

	// 总数
	TotalCount *int64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeRiskDnsEventListResponse struct {
	*tchttp.BaseResponse
	Response *DescribeRiskDnsEventListResponseParams `json:"Response"`
}

func (r *DescribeRiskDnsEventListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeRiskDnsEventListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeRiskDnsInfoRequestParams struct {
	// 恶意请求-事件Id
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`
}

type DescribeRiskDnsInfoRequest struct {
	*tchttp.BaseRequest
	
	// 恶意请求-事件Id
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`
}

func (r *DescribeRiskDnsInfoRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeRiskDnsInfoRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Id")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeRiskDnsInfoRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeRiskDnsInfoResponseParams struct {
	// 恶意请求事件详情
	RiskDnsInfo *RiskDnsList `json:"RiskDnsInfo,omitnil,omitempty" name:"RiskDnsInfo"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeRiskDnsInfoResponse struct {
	*tchttp.BaseResponse
	Response *DescribeRiskDnsInfoResponseParams `json:"Response"`
}

func (r *DescribeRiskDnsInfoResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeRiskDnsInfoResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeRiskDnsListRequestParams struct {
	// 需要返回的数量，默认为10，最大值为100
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 过滤条件。
	// <li>IpOrAlias - String - 是否必填：否 - 主机ip或别名筛选</li>
	// <li>Url - String - 是否必填：否 - Url筛选</li>
	// <li>Status - String - 是否必填：否 - 状态筛选0:待处理；2:信任；3:不信任</li>
	// <li>MergeBeginTime - String - 是否必填：否 - 最近访问开始时间</li>
	// <li>MergeEndTime - String - 是否必填：否 - 最近访问结束时间</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 排序方式：根据请求次数排序：asc-升序/desc-降序
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 排序字段：AccessCount-请求次数。MergeTime-最近请求时间
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

type DescribeRiskDnsListRequest struct {
	*tchttp.BaseRequest
	
	// 需要返回的数量，默认为10，最大值为100
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 过滤条件。
	// <li>IpOrAlias - String - 是否必填：否 - 主机ip或别名筛选</li>
	// <li>Url - String - 是否必填：否 - Url筛选</li>
	// <li>Status - String - 是否必填：否 - 状态筛选0:待处理；2:信任；3:不信任</li>
	// <li>MergeBeginTime - String - 是否必填：否 - 最近访问开始时间</li>
	// <li>MergeEndTime - String - 是否必填：否 - 最近访问结束时间</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 排序方式：根据请求次数排序：asc-升序/desc-降序
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 排序字段：AccessCount-请求次数。MergeTime-最近请求时间
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

func (r *DescribeRiskDnsListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeRiskDnsListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Limit")
	delete(f, "Offset")
	delete(f, "Filters")
	delete(f, "Order")
	delete(f, "By")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeRiskDnsListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeRiskDnsListResponseParams struct {
	// 恶意请求列表数组
	// 注意：此字段可能返回 null，表示取不到有效值。
	RiskDnsList []*RiskDnsList `json:"RiskDnsList,omitnil,omitempty" name:"RiskDnsList"`

	// 总数量
	TotalCount *uint64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeRiskDnsListResponse struct {
	*tchttp.BaseResponse
	Response *DescribeRiskDnsListResponseParams `json:"Response"`
}

func (r *DescribeRiskDnsListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeRiskDnsListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeRiskDnsPolicyListRequestParams struct {
	// <li>PolicyType - int - 是否必填：否 - 策略类型</li>
	// <li>PolicyName - string - 是否必填：否 - 策略名称</li>
	// <li>Domain - string - 是否必填：否 - 域名(先对域名做urlencode,再base64)</li>
	// <li>PolicyAction- int - 是否必填：否 - 策略动作</li>
	// <li>IsEnabled - int - 是否必填：否 - 是否生效</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 限制条数,默认10,最大100
	Limit *int64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量,默认0
	Offset *int64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 排序方式: [ASC:升序|DESC:降序]
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 可选排序列: [HostScope|UpdateTime]
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

type DescribeRiskDnsPolicyListRequest struct {
	*tchttp.BaseRequest
	
	// <li>PolicyType - int - 是否必填：否 - 策略类型</li>
	// <li>PolicyName - string - 是否必填：否 - 策略名称</li>
	// <li>Domain - string - 是否必填：否 - 域名(先对域名做urlencode,再base64)</li>
	// <li>PolicyAction- int - 是否必填：否 - 策略动作</li>
	// <li>IsEnabled - int - 是否必填：否 - 是否生效</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 限制条数,默认10,最大100
	Limit *int64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量,默认0
	Offset *int64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 排序方式: [ASC:升序|DESC:降序]
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 可选排序列: [HostScope|UpdateTime]
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

func (r *DescribeRiskDnsPolicyListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeRiskDnsPolicyListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Filters")
	delete(f, "Limit")
	delete(f, "Offset")
	delete(f, "Order")
	delete(f, "By")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeRiskDnsPolicyListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeRiskDnsPolicyListResponseParams struct {
	// 总数
	TotalCount *int64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// 列表
	// 注意：此字段可能返回 null，表示取不到有效值。
	List []*RiskDnsPolicy `json:"List,omitnil,omitempty" name:"List"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeRiskDnsPolicyListResponse struct {
	*tchttp.BaseResponse
	Response *DescribeRiskDnsPolicyListResponseParams `json:"Response"`
}

func (r *DescribeRiskDnsPolicyListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeRiskDnsPolicyListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeRiskProcessEventsRequestParams struct {
	// 过滤条件。
	// <li>HostId - String - 是否必填：否 - 主机ID</li>
	// <li>IpOrName - String - 是否必填：否 - 主机IP或主机名</li>
	// <li>VirusName - String - 是否必填：否 - 病毒名</li>
	// <li>ProcessId - String - 是否必填：否 - 进程ID</li>
	// <li>FilePath - String - 是否必填：否 - 进程路径</li>
	// <li>BeginTime - String - 是否必填：否 - 进程启动时间-开始</li>
	// <li>EndTime - String - 是否必填：否 - 进程启动时间-结束</li>
	// <li>Status - String - 是否必填：否 - 状态筛选 0待处理；1查杀中；2已查杀；3已退出;4已信任</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 需要返回的数量，默认为10，最大值为100
	Limit *int64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量，默认为0。
	Offset *int64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 排序方式 [ASC|DESC]
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// [StartTime:进程启动时间|DetectTime:最后检测时间]
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

type DescribeRiskProcessEventsRequest struct {
	*tchttp.BaseRequest
	
	// 过滤条件。
	// <li>HostId - String - 是否必填：否 - 主机ID</li>
	// <li>IpOrName - String - 是否必填：否 - 主机IP或主机名</li>
	// <li>VirusName - String - 是否必填：否 - 病毒名</li>
	// <li>ProcessId - String - 是否必填：否 - 进程ID</li>
	// <li>FilePath - String - 是否必填：否 - 进程路径</li>
	// <li>BeginTime - String - 是否必填：否 - 进程启动时间-开始</li>
	// <li>EndTime - String - 是否必填：否 - 进程启动时间-结束</li>
	// <li>Status - String - 是否必填：否 - 状态筛选 0待处理；1查杀中；2已查杀；3已退出;4已信任</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 需要返回的数量，默认为10，最大值为100
	Limit *int64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量，默认为0。
	Offset *int64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 排序方式 [ASC|DESC]
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// [StartTime:进程启动时间|DetectTime:最后检测时间]
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

func (r *DescribeRiskProcessEventsRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeRiskProcessEventsRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Filters")
	delete(f, "Limit")
	delete(f, "Offset")
	delete(f, "Order")
	delete(f, "By")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeRiskProcessEventsRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeRiskProcessEventsResponseParams struct {
	// 总数量
	TotalCount *int64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// 异常进程列表
	// 注意：此字段可能返回 null，表示取不到有效值。
	List []*RiskProcessEvent `json:"List,omitnil,omitempty" name:"List"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeRiskProcessEventsResponse struct {
	*tchttp.BaseResponse
	Response *DescribeRiskProcessEventsResponseParams `json:"Response"`
}

func (r *DescribeRiskProcessEventsResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeRiskProcessEventsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeSafeInfoRequestParams struct {

}

type DescribeSafeInfoRequest struct {
	*tchttp.BaseRequest
	
}

func (r *DescribeSafeInfoRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeSafeInfoRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeSafeInfoRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeSafeInfoResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeSafeInfoResponse struct {
	*tchttp.BaseResponse
	Response *DescribeSafeInfoResponseParams `json:"Response"`
}

func (r *DescribeSafeInfoResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeSafeInfoResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeScanMalwareScheduleRequestParams struct {

}

type DescribeScanMalwareScheduleRequest struct {
	*tchttp.BaseRequest
	
}

func (r *DescribeScanMalwareScheduleRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeScanMalwareScheduleRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeScanMalwareScheduleRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeScanMalwareScheduleResponseParams struct {
	// 扫描进度（单位：%）
	Schedule *int64 `json:"Schedule,omitnil,omitempty" name:"Schedule"`

	// 风险文件数,当进度满了以后才有该值
	RiskFileNumber *int64 `json:"RiskFileNumber,omitnil,omitempty" name:"RiskFileNumber"`

	// 是否正在扫描中
	IsSchedule *bool `json:"IsSchedule,omitnil,omitempty" name:"IsSchedule"`

	// 0 从未扫描过、 1 扫描中、 2扫描完成、 3停止中、 4停止完成
	ScanStatus *uint64 `json:"ScanStatus,omitnil,omitempty" name:"ScanStatus"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeScanMalwareScheduleResponse struct {
	*tchttp.BaseResponse
	Response *DescribeScanMalwareScheduleResponseParams `json:"Response"`
}

func (r *DescribeScanMalwareScheduleResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeScanMalwareScheduleResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeScanScheduleRequestParams struct {
	// 任务id
	TaskId *uint64 `json:"TaskId,omitnil,omitempty" name:"TaskId"`
}

type DescribeScanScheduleRequest struct {
	*tchttp.BaseRequest
	
	// 任务id
	TaskId *uint64 `json:"TaskId,omitnil,omitempty" name:"TaskId"`
}

func (r *DescribeScanScheduleRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeScanScheduleRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "TaskId")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeScanScheduleRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeScanScheduleResponseParams struct {
	// 检测进度
	// 注意：此字段可能返回 null，表示取不到有效值。
	Schedule *uint64 `json:"Schedule,omitnil,omitempty" name:"Schedule"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeScanScheduleResponse struct {
	*tchttp.BaseResponse
	Response *DescribeScanScheduleResponseParams `json:"Response"`
}

func (r *DescribeScanScheduleResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeScanScheduleResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeScanStateRequestParams struct {
	// 模块类型 当前提供 Malware 木马 , Vul 漏洞 , Baseline 基线
	ModuleType *string `json:"ModuleType,omitnil,omitempty" name:"ModuleType"`

	// 过滤参数;
	// <li>StrategyId 基线策略ID ,仅ModuleType 为 Baseline 时需要</li>
	Filters []*Filters `json:"Filters,omitnil,omitempty" name:"Filters"`
}

type DescribeScanStateRequest struct {
	*tchttp.BaseRequest
	
	// 模块类型 当前提供 Malware 木马 , Vul 漏洞 , Baseline 基线
	ModuleType *string `json:"ModuleType,omitnil,omitempty" name:"ModuleType"`

	// 过滤参数;
	// <li>StrategyId 基线策略ID ,仅ModuleType 为 Baseline 时需要</li>
	Filters []*Filters `json:"Filters,omitnil,omitempty" name:"Filters"`
}

func (r *DescribeScanStateRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeScanStateRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "ModuleType")
	delete(f, "Filters")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeScanStateRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeScanStateResponseParams struct {
	// 0 从未扫描过、 1 扫描中、 2扫描完成、 3停止中、 4停止完成
	ScanState *uint64 `json:"ScanState,omitnil,omitempty" name:"ScanState"`

	// 扫描进度
	Schedule *uint64 `json:"Schedule,omitnil,omitempty" name:"Schedule"`

	// 任务Id
	TaskId *uint64 `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// 任务扫描的漏洞id
	VulId []*uint64 `json:"VulId,omitnil,omitempty" name:"VulId"`

	// 0一键检测 1定时检测
	Type *uint64 `json:"Type,omitnil,omitempty" name:"Type"`

	// 开始扫描时间
	// 注意：此字段可能返回 null，表示取不到有效值。
	ScanBeginTime *string `json:"ScanBeginTime,omitnil,omitempty" name:"ScanBeginTime"`

	// 扫描漏洞数
	// 注意：此字段可能返回 null，表示取不到有效值。
	RiskEventCount *uint64 `json:"RiskEventCount,omitnil,omitempty" name:"RiskEventCount"`

	// 扫描结束时间
	// 注意：此字段可能返回 null，表示取不到有效值。
	ScanEndTime *string `json:"ScanEndTime,omitnil,omitempty" name:"ScanEndTime"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeScanStateResponse struct {
	*tchttp.BaseResponse
	Response *DescribeScanStateResponseParams `json:"Response"`
}

func (r *DescribeScanStateResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeScanStateResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeScanTaskDetailsRequestParams struct {
	// 模块类型 当前提供 Malware 木马 , Vul 漏洞 , Baseline 基线
	ModuleType *string `json:"ModuleType,omitnil,omitempty" name:"ModuleType"`

	// 任务ID
	TaskId *uint64 `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// 过滤参数
	Filters []*Filters `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 需要返回的数量，最大值为100
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`
}

type DescribeScanTaskDetailsRequest struct {
	*tchttp.BaseRequest
	
	// 模块类型 当前提供 Malware 木马 , Vul 漏洞 , Baseline 基线
	ModuleType *string `json:"ModuleType,omitnil,omitempty" name:"ModuleType"`

	// 任务ID
	TaskId *uint64 `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// 过滤参数
	Filters []*Filters `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 需要返回的数量，最大值为100
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`
}

func (r *DescribeScanTaskDetailsRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeScanTaskDetailsRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "ModuleType")
	delete(f, "TaskId")
	delete(f, "Filters")
	delete(f, "Limit")
	delete(f, "Offset")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeScanTaskDetailsRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeScanTaskDetailsResponseParams struct {
	// 扫描任务信息列表
	ScanTaskDetailList []*ScanTaskDetails `json:"ScanTaskDetailList,omitnil,omitempty" name:"ScanTaskDetailList"`

	// 总数
	TotalCount *uint64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// 扫描机器总数
	ScanMachineCount *uint64 `json:"ScanMachineCount,omitnil,omitempty" name:"ScanMachineCount"`

	// 发现风险机器数
	RiskMachineCount *uint64 `json:"RiskMachineCount,omitnil,omitempty" name:"RiskMachineCount"`

	// 扫描开始时间
	ScanBeginTime *string `json:"ScanBeginTime,omitnil,omitempty" name:"ScanBeginTime"`

	// 扫描结束时间
	ScanEndTime *string `json:"ScanEndTime,omitnil,omitempty" name:"ScanEndTime"`

	// 检测时间
	ScanTime *uint64 `json:"ScanTime,omitnil,omitempty" name:"ScanTime"`

	// 扫描进度
	ScanProgress *uint64 `json:"ScanProgress,omitnil,omitempty" name:"ScanProgress"`

	// 扫描剩余时间
	ScanLeftTime *uint64 `json:"ScanLeftTime,omitnil,omitempty" name:"ScanLeftTime"`

	// 扫描内容
	ScanContent []*string `json:"ScanContent,omitnil,omitempty" name:"ScanContent"`

	// 漏洞信息
	// 注意：此字段可能返回 null，表示取不到有效值。
	VulInfo []*VulDetailInfo `json:"VulInfo,omitnil,omitempty" name:"VulInfo"`

	// 风险事件个数
	// 注意：此字段可能返回 null，表示取不到有效值。
	RiskEventCount *uint64 `json:"RiskEventCount,omitnil,omitempty" name:"RiskEventCount"`

	// 0一键检测 1定时检测
	// 注意：此字段可能返回 null，表示取不到有效值。
	Type *uint64 `json:"Type,omitnil,omitempty" name:"Type"`

	// 任务是否全部正在被停止 ture是
	// 注意：此字段可能返回 null，表示取不到有效值。
	StoppingAll *bool `json:"StoppingAll,omitnil,omitempty" name:"StoppingAll"`

	// 扫描出漏洞个数
	// 注意：此字段可能返回 null，表示取不到有效值。
	VulCount *uint64 `json:"VulCount,omitnil,omitempty" name:"VulCount"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeScanTaskDetailsResponse struct {
	*tchttp.BaseResponse
	Response *DescribeScanTaskDetailsResponseParams `json:"Response"`
}

func (r *DescribeScanTaskDetailsResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeScanTaskDetailsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeScanTaskStatusRequestParams struct {
	// 模块类型 当前提供 Malware 木马 , Vul 漏洞 , Baseline 基线
	ModuleType *string `json:"ModuleType,omitnil,omitempty" name:"ModuleType"`
}

type DescribeScanTaskStatusRequest struct {
	*tchttp.BaseRequest
	
	// 模块类型 当前提供 Malware 木马 , Vul 漏洞 , Baseline 基线
	ModuleType *string `json:"ModuleType,omitnil,omitempty" name:"ModuleType"`
}

func (r *DescribeScanTaskStatusRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeScanTaskStatusRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "ModuleType")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeScanTaskStatusRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeScanTaskStatusResponseParams struct {
	// 任务扫描状态列表
	State *TaskStatus `json:"State,omitnil,omitempty" name:"State"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeScanTaskStatusResponse struct {
	*tchttp.BaseResponse
	Response *DescribeScanTaskStatusResponseParams `json:"Response"`
}

func (r *DescribeScanTaskStatusResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeScanTaskStatusResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeScanVulSettingRequestParams struct {

}

type DescribeScanVulSettingRequest struct {
	*tchttp.BaseRequest
	
}

func (r *DescribeScanVulSettingRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeScanVulSettingRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeScanVulSettingRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeScanVulSettingResponseParams struct {
	// 漏洞类型：1: web-cms漏洞 2:应用漏洞  4: Linux软件漏洞 5: Windows系统漏洞
	VulCategories *string `json:"VulCategories,omitnil,omitempty" name:"VulCategories"`

	// 危害等级：1-低危；2-中危；3-高危；4-严重 (多选英文逗号分隔)
	VulLevels *string `json:"VulLevels,omitnil,omitempty" name:"VulLevels"`

	// 定期检测间隔时间（天）
	TimerInterval *uint64 `json:"TimerInterval,omitnil,omitempty" name:"TimerInterval"`

	// 定期检测时间，如：00:00
	TimerTime *string `json:"TimerTime,omitnil,omitempty" name:"TimerTime"`

	// 是否紧急漏洞：0-否 1-是
	VulEmergency *uint64 `json:"VulEmergency,omitnil,omitempty" name:"VulEmergency"`

	// 开始时间
	StartTime *string `json:"StartTime,omitnil,omitempty" name:"StartTime"`

	// 是否开启
	EnableScan *uint64 `json:"EnableScan,omitnil,omitempty" name:"EnableScan"`

	// 结束时间
	EndTime *string `json:"EndTime,omitnil,omitempty" name:"EndTime"`

	// 一键扫描超时时长，如：1800秒（s）
	ClickTimeout *uint64 `json:"ClickTimeout,omitnil,omitempty" name:"ClickTimeout"`

	// 为空默认扫描全部专业版、旗舰版、普惠版主机，不为空只扫描选中主机
	Uuids []*string `json:"Uuids,omitnil,omitempty" name:"Uuids"`

	// 0版本比对,2版本比对+poc
	ScanMethod *uint64 `json:"ScanMethod,omitnil,omitempty" name:"ScanMethod"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeScanVulSettingResponse struct {
	*tchttp.BaseResponse
	Response *DescribeScanVulSettingResponseParams `json:"Response"`
}

func (r *DescribeScanVulSettingResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeScanVulSettingResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeScreenAttackHotspotRequestParams struct {

}

type DescribeScreenAttackHotspotRequest struct {
	*tchttp.BaseRequest
	
}

func (r *DescribeScreenAttackHotspotRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeScreenAttackHotspotRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeScreenAttackHotspotRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeScreenAttackHotspotResponseParams struct {
	// 攻击热点列表
	// 注意：此字段可能返回 null，表示取不到有效值。
	List []*ScreenAttackHotspot `json:"List,omitnil,omitempty" name:"List"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeScreenAttackHotspotResponse struct {
	*tchttp.BaseResponse
	Response *DescribeScreenAttackHotspotResponseParams `json:"Response"`
}

func (r *DescribeScreenAttackHotspotResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeScreenAttackHotspotResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeScreenBroadcastsRequestParams struct {

}

type DescribeScreenBroadcastsRequest struct {
	*tchttp.BaseRequest
	
}

func (r *DescribeScreenBroadcastsRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeScreenBroadcastsRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeScreenBroadcastsRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeScreenBroadcastsResponseParams struct {
	// 播报文章列表
	// 注意：此字段可能返回 null，表示取不到有效值。
	List []*ScreenBroadcasts `json:"List,omitnil,omitempty" name:"List"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeScreenBroadcastsResponse struct {
	*tchttp.BaseResponse
	Response *DescribeScreenBroadcastsResponseParams `json:"Response"`
}

func (r *DescribeScreenBroadcastsResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeScreenBroadcastsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeScreenDefenseTrendsRequestParams struct {
	// 开始时间
	StartTime *string `json:"StartTime,omitnil,omitempty" name:"StartTime"`

	// 结束时间
	EndTime *string `json:"EndTime,omitnil,omitempty" name:"EndTime"`
}

type DescribeScreenDefenseTrendsRequest struct {
	*tchttp.BaseRequest
	
	// 开始时间
	StartTime *string `json:"StartTime,omitnil,omitempty" name:"StartTime"`

	// 结束时间
	EndTime *string `json:"EndTime,omitnil,omitempty" name:"EndTime"`
}

func (r *DescribeScreenDefenseTrendsRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeScreenDefenseTrendsRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "StartTime")
	delete(f, "EndTime")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeScreenDefenseTrendsRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeScreenDefenseTrendsResponseParams struct {
	// 统计详情图标数据
	// 注意：此字段可能返回 null，表示取不到有效值。
	TrendsChart []*ScreenTrendsChart `json:"TrendsChart,omitnil,omitempty" name:"TrendsChart"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeScreenDefenseTrendsResponse struct {
	*tchttp.BaseResponse
	Response *DescribeScreenDefenseTrendsResponseParams `json:"Response"`
}

func (r *DescribeScreenDefenseTrendsResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeScreenDefenseTrendsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeScreenEmergentMsgRequestParams struct {

}

type DescribeScreenEmergentMsgRequest struct {
	*tchttp.BaseRequest
	
}

func (r *DescribeScreenEmergentMsgRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeScreenEmergentMsgRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeScreenEmergentMsgRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeScreenEmergentMsgResponseParams struct {
	// 通知内容
	MessageInfo []*ScreenEmergentMsg `json:"MessageInfo,omitnil,omitempty" name:"MessageInfo"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeScreenEmergentMsgResponse struct {
	*tchttp.BaseResponse
	Response *DescribeScreenEmergentMsgResponseParams `json:"Response"`
}

func (r *DescribeScreenEmergentMsgResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeScreenEmergentMsgResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeScreenEventsCntRequestParams struct {
	// 数据类型：0:待处理风险总数 1:影响资产总数，默认为0
	BusinessType *uint64 `json:"BusinessType,omitnil,omitempty" name:"BusinessType"`
}

type DescribeScreenEventsCntRequest struct {
	*tchttp.BaseRequest
	
	// 数据类型：0:待处理风险总数 1:影响资产总数，默认为0
	BusinessType *uint64 `json:"BusinessType,omitnil,omitempty" name:"BusinessType"`
}

func (r *DescribeScreenEventsCntRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeScreenEventsCntRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "BusinessType")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeScreenEventsCntRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeScreenEventsCntResponseParams struct {
	// 事件统计详情
	// 注意：此字段可能返回 null，表示取不到有效值。
	Info []*ScreenEventsCnt `json:"Info,omitnil,omitempty" name:"Info"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeScreenEventsCntResponse struct {
	*tchttp.BaseResponse
	Response *DescribeScreenEventsCntResponseParams `json:"Response"`
}

func (r *DescribeScreenEventsCntResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeScreenEventsCntResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeScreenGeneralStatRequestParams struct {

}

type DescribeScreenGeneralStatRequest struct {
	*tchttp.BaseRequest
	
}

func (r *DescribeScreenGeneralStatRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeScreenGeneralStatRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeScreenGeneralStatRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeScreenGeneralStatResponseParams struct {
	// name 的值: 在线，关机/离线,未安装，
	// value : 表示对应的数量
	Machines []*ScreenNameValue `json:"Machines,omitnil,omitempty" name:"Machines"`

	// name 的值: 旗舰版，专业版，基础版
	// value : 表示对应的数量
	Protection []*ScreenNameValue `json:"Protection,omitnil,omitempty" name:"Protection"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeScreenGeneralStatResponse struct {
	*tchttp.BaseResponse
	Response *DescribeScreenGeneralStatResponseParams `json:"Response"`
}

func (r *DescribeScreenGeneralStatResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeScreenGeneralStatResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeScreenHostInvasionRequestParams struct {
	// 主机quuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`
}

type DescribeScreenHostInvasionRequest struct {
	*tchttp.BaseRequest
	
	// 主机quuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`
}

func (r *DescribeScreenHostInvasionRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeScreenHostInvasionRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Quuid")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeScreenHostInvasionRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeScreenHostInvasionResponseParams struct {
	// 网络攻击事件列表
	DefendAttackLog []*ScreenDefendAttackLog `json:"DefendAttackLog,omitnil,omitempty" name:"DefendAttackLog"`

	// 入侵检测事件列表
	InvasionEvents []*ScreenInvasion `json:"InvasionEvents,omitnil,omitempty" name:"InvasionEvents"`

	// 漏洞事件列表
	Vul []*ScreenVulInfo `json:"Vul,omitnil,omitempty" name:"Vul"`

	// 基线事件列表
	// 注意：此字段可能返回 null，表示取不到有效值。
	Baseline []*ScreenBaselineInfo `json:"Baseline,omitnil,omitempty" name:"Baseline"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeScreenHostInvasionResponse struct {
	*tchttp.BaseResponse
	Response *DescribeScreenHostInvasionResponseParams `json:"Response"`
}

func (r *DescribeScreenHostInvasionResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeScreenHostInvasionResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeScreenMachineRegionsRequestParams struct {

}

type DescribeScreenMachineRegionsRequest struct {
	*tchttp.BaseRequest
	
}

func (r *DescribeScreenMachineRegionsRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeScreenMachineRegionsRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeScreenMachineRegionsRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeScreenMachineRegionsResponseParams struct {
	// 列表详情
	// 注意：此字段可能返回 null，表示取不到有效值。
	List []*ScreenRegionInfo `json:"List,omitnil,omitempty" name:"List"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeScreenMachineRegionsResponse struct {
	*tchttp.BaseResponse
	Response *DescribeScreenMachineRegionsResponseParams `json:"Response"`
}

func (r *DescribeScreenMachineRegionsResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeScreenMachineRegionsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeScreenMachinesRequestParams struct {
	// 主机区域
	MachineRegion *string `json:"MachineRegion,omitnil,omitempty" name:"MachineRegion"`

	// IP 支持内网IP,主机别名
	MachineIpOrAlias *string `json:"MachineIpOrAlias,omitnil,omitempty" name:"MachineIpOrAlias"`

	// 风险状态类型：0：全部类型，1：风险主机，2：潜在风险主机 ， 3：已关机/离线主机，4：无风险主机
	SecurityStatus *uint64 `json:"SecurityStatus,omitnil,omitempty" name:"SecurityStatus"`
}

type DescribeScreenMachinesRequest struct {
	*tchttp.BaseRequest
	
	// 主机区域
	MachineRegion *string `json:"MachineRegion,omitnil,omitempty" name:"MachineRegion"`

	// IP 支持内网IP,主机别名
	MachineIpOrAlias *string `json:"MachineIpOrAlias,omitnil,omitempty" name:"MachineIpOrAlias"`

	// 风险状态类型：0：全部类型，1：风险主机，2：潜在风险主机 ， 3：已关机/离线主机，4：无风险主机
	SecurityStatus *uint64 `json:"SecurityStatus,omitnil,omitempty" name:"SecurityStatus"`
}

func (r *DescribeScreenMachinesRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeScreenMachinesRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "MachineRegion")
	delete(f, "MachineIpOrAlias")
	delete(f, "SecurityStatus")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeScreenMachinesRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeScreenMachinesResponseParams struct {
	// 列表详情
	// 注意：此字段可能返回 null，表示取不到有效值。
	List []*ScreenRegionMachines `json:"List,omitnil,omitempty" name:"List"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeScreenMachinesResponse struct {
	*tchttp.BaseResponse
	Response *DescribeScreenMachinesResponseParams `json:"Response"`
}

func (r *DescribeScreenMachinesResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeScreenMachinesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeScreenProtectionCntRequestParams struct {

}

type DescribeScreenProtectionCntRequest struct {
	*tchttp.BaseRequest
	
}

func (r *DescribeScreenProtectionCntRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeScreenProtectionCntRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeScreenProtectionCntRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeScreenProtectionCntResponseParams struct {
	// 主机安全防护引擎介绍 内容
	List []*ScreenProtectionCnt `json:"List,omitnil,omitempty" name:"List"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeScreenProtectionCntResponse struct {
	*tchttp.BaseResponse
	Response *DescribeScreenProtectionCntResponseParams `json:"Response"`
}

func (r *DescribeScreenProtectionCntResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeScreenProtectionCntResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeScreenProtectionStatRequestParams struct {

}

type DescribeScreenProtectionStatRequest struct {
	*tchttp.BaseRequest
	
}

func (r *DescribeScreenProtectionStatRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeScreenProtectionStatRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeScreenProtectionStatRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeScreenProtectionStatResponseParams struct {
	// 文件查杀 status:  0:从未检测过，或0资产付费情况, 1:已检测，存在恶意文件, 2:已检测，未开启隔离防护, 3:已检测且已开启防护且无风险
	// 暴力破解status: 0:未开启防护或0付费资产情况 1:已开启防护 2:存在带处理事件
	// 漏洞扫描status: 0:从未检测过，或0资产付费情况, 1:存在漏洞风险, 2:无风险
	// 基线检测status: 0:从未检测过，或0资产付费情况, 1:存在基线风险,2:无风险
	Info []*ScreenProtection `json:"Info,omitnil,omitempty" name:"Info"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeScreenProtectionStatResponse struct {
	*tchttp.BaseResponse
	Response *DescribeScreenProtectionStatResponseParams `json:"Response"`
}

func (r *DescribeScreenProtectionStatResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeScreenProtectionStatResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeScreenRiskAssetsTopRequestParams struct {
	// 统计类型：0:潜在威胁 1:失陷 2:漏洞 3:基线
	BusinessType *uint64 `json:"BusinessType,omitnil,omitempty" name:"BusinessType"`
}

type DescribeScreenRiskAssetsTopRequest struct {
	*tchttp.BaseRequest
	
	// 统计类型：0:潜在威胁 1:失陷 2:漏洞 3:基线
	BusinessType *uint64 `json:"BusinessType,omitnil,omitempty" name:"BusinessType"`
}

func (r *DescribeScreenRiskAssetsTopRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeScreenRiskAssetsTopRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "BusinessType")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeScreenRiskAssetsTopRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeScreenRiskAssetsTopResponseParams struct {
	// 统计详情图标数据 Name：展示主机ip 和地域， value：事件数量
	// 注意：此字段可能返回 null，表示取不到有效值。
	Chart []*ScreenNameValue `json:"Chart,omitnil,omitempty" name:"Chart"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeScreenRiskAssetsTopResponse struct {
	*tchttp.BaseResponse
	Response *DescribeScreenRiskAssetsTopResponseParams `json:"Response"`
}

func (r *DescribeScreenRiskAssetsTopResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeScreenRiskAssetsTopResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeSearchLogsRequestParams struct {

}

type DescribeSearchLogsRequest struct {
	*tchttp.BaseRequest
	
}

func (r *DescribeSearchLogsRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeSearchLogsRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeSearchLogsRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeSearchLogsResponseParams struct {
	// 历史搜索记录 保留最新的10条
	Data []*string `json:"Data,omitnil,omitempty" name:"Data"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeSearchLogsResponse struct {
	*tchttp.BaseResponse
	Response *DescribeSearchLogsResponseParams `json:"Response"`
}

func (r *DescribeSearchLogsResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeSearchLogsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeSearchTemplatesRequestParams struct {
	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 返回数量，默认为10，最大值为100。
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`
}

type DescribeSearchTemplatesRequest struct {
	*tchttp.BaseRequest
	
	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 返回数量，默认为10，最大值为100。
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`
}

func (r *DescribeSearchTemplatesRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeSearchTemplatesRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Offset")
	delete(f, "Limit")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeSearchTemplatesRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeSearchTemplatesResponseParams struct {
	// 总数
	TotalCount *uint64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// 模板列表
	List []*SearchTemplate `json:"List,omitnil,omitempty" name:"List"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeSearchTemplatesResponse struct {
	*tchttp.BaseResponse
	Response *DescribeSearchTemplatesResponseParams `json:"Response"`
}

func (r *DescribeSearchTemplatesResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeSearchTemplatesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeSecurityBroadcastInfoRequestParams struct {
	// 文章id
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`
}

type DescribeSecurityBroadcastInfoRequest struct {
	*tchttp.BaseRequest
	
	// 文章id
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`
}

func (r *DescribeSecurityBroadcastInfoRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeSecurityBroadcastInfoRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Id")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeSecurityBroadcastInfoRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeSecurityBroadcastInfoResponseParams struct {
	// 安全播报文章详情
	// 注意：此字段可能返回 null，表示取不到有效值。
	BroadcastInfo *BroadcastInfo `json:"BroadcastInfo,omitnil,omitempty" name:"BroadcastInfo"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeSecurityBroadcastInfoResponse struct {
	*tchttp.BaseResponse
	Response *DescribeSecurityBroadcastInfoResponseParams `json:"Response"`
}

func (r *DescribeSecurityBroadcastInfoResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeSecurityBroadcastInfoResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeSecurityBroadcastsRequestParams struct {
	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 需要返回的数量，默认为10 ，0=全部
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 筛选发布日期：开始时间
	BeginDate *string `json:"BeginDate,omitnil,omitempty" name:"BeginDate"`

	// 筛选发布日期：结束时间
	EndDate *string `json:"EndDate,omitnil,omitempty" name:"EndDate"`

	// 过滤安全播报类型：0-紧急通知，1-功能更新，2-行业荣誉，3-版本发布，4-实践教程
	BroadcastType *string `json:"BroadcastType,omitnil,omitempty" name:"BroadcastType"`
}

type DescribeSecurityBroadcastsRequest struct {
	*tchttp.BaseRequest
	
	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 需要返回的数量，默认为10 ，0=全部
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 筛选发布日期：开始时间
	BeginDate *string `json:"BeginDate,omitnil,omitempty" name:"BeginDate"`

	// 筛选发布日期：结束时间
	EndDate *string `json:"EndDate,omitnil,omitempty" name:"EndDate"`

	// 过滤安全播报类型：0-紧急通知，1-功能更新，2-行业荣誉，3-版本发布，4-实践教程
	BroadcastType *string `json:"BroadcastType,omitnil,omitempty" name:"BroadcastType"`
}

func (r *DescribeSecurityBroadcastsRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeSecurityBroadcastsRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Offset")
	delete(f, "Limit")
	delete(f, "BeginDate")
	delete(f, "EndDate")
	delete(f, "BroadcastType")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeSecurityBroadcastsRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeSecurityBroadcastsResponseParams struct {
	// 列表
	List []*Broadcasts `json:"List,omitnil,omitempty" name:"List"`

	// 总共多少条
	TotalCount *uint64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeSecurityBroadcastsResponse struct {
	*tchttp.BaseResponse
	Response *DescribeSecurityBroadcastsResponseParams `json:"Response"`
}

func (r *DescribeSecurityBroadcastsResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeSecurityBroadcastsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeSecurityDynamicsRequestParams struct {
	// 返回数量，最大值为100。
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`
}

type DescribeSecurityDynamicsRequest struct {
	*tchttp.BaseRequest
	
	// 返回数量，最大值为100。
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`
}

func (r *DescribeSecurityDynamicsRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeSecurityDynamicsRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Limit")
	delete(f, "Offset")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeSecurityDynamicsRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeSecurityDynamicsResponseParams struct {
	// 安全事件消息数组。
	SecurityDynamics []*SecurityDynamic `json:"SecurityDynamics,omitnil,omitempty" name:"SecurityDynamics"`

	// 记录总数。
	TotalCount *uint64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeSecurityDynamicsResponse struct {
	*tchttp.BaseResponse
	Response *DescribeSecurityDynamicsResponseParams `json:"Response"`
}

func (r *DescribeSecurityDynamicsResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeSecurityDynamicsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeSecurityEventStatRequestParams struct {
	// 该接口无过滤条件
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`
}

type DescribeSecurityEventStatRequest struct {
	*tchttp.BaseRequest
	
	// 该接口无过滤条件
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`
}

func (r *DescribeSecurityEventStatRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeSecurityEventStatRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Filters")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeSecurityEventStatRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeSecurityEventStatResponseParams struct {
	// 木马事件统计
	MalwareStat *EventStat `json:"MalwareStat,omitnil,omitempty" name:"MalwareStat"`

	// 异地事件统计
	HostLoginStat *EventStat `json:"HostLoginStat,omitnil,omitempty" name:"HostLoginStat"`

	// 爆破事件统计
	BruteAttackStat *EventStat `json:"BruteAttackStat,omitnil,omitempty" name:"BruteAttackStat"`

	// 恶意请求事件统计
	MaliciousRequestStat *EventStat `json:"MaliciousRequestStat,omitnil,omitempty" name:"MaliciousRequestStat"`

	// 本地提权事件统计
	PrivilegeStat *EventStat `json:"PrivilegeStat,omitnil,omitempty" name:"PrivilegeStat"`

	// 反弹Shell事件统计
	ReverseShellStat *EventStat `json:"ReverseShellStat,omitnil,omitempty" name:"ReverseShellStat"`

	// 高危命令事件统计
	HighRiskBashStat *EventStat `json:"HighRiskBashStat,omitnil,omitempty" name:"HighRiskBashStat"`

	// 网络攻击事件统计
	AttackLogsStat *EventStat `json:"AttackLogsStat,omitnil,omitempty" name:"AttackLogsStat"`

	// 高危漏洞事件统计
	VulHighStat *EventStat `json:"VulHighStat,omitnil,omitempty" name:"VulHighStat"`

	// 中危漏洞事件统计
	VulNormalStat *EventStat `json:"VulNormalStat,omitnil,omitempty" name:"VulNormalStat"`

	// 低危漏洞事件统计
	VulLowStat *EventStat `json:"VulLowStat,omitnil,omitempty" name:"VulLowStat"`

	// 高危基线漏洞事件统计
	BaselineHighStat *EventStat `json:"BaselineHighStat,omitnil,omitempty" name:"BaselineHighStat"`

	// 中危基线漏事件统计
	BaselineNormalStat *EventStat `json:"BaselineNormalStat,omitnil,omitempty" name:"BaselineNormalStat"`

	// 低危基线漏事件统计
	BaselineLowStat *EventStat `json:"BaselineLowStat,omitnil,omitempty" name:"BaselineLowStat"`

	// 有未处理安全事件的机器总数
	MachineTotalAffectNum *uint64 `json:"MachineTotalAffectNum,omitnil,omitempty" name:"MachineTotalAffectNum"`

	// 有未处理入侵安全事件的机器总数
	InvasionTotalAffectNum *uint64 `json:"InvasionTotalAffectNum,omitnil,omitempty" name:"InvasionTotalAffectNum"`

	// 有未处理漏洞安全事件的机器总数
	VulTotalAffectNum *uint64 `json:"VulTotalAffectNum,omitnil,omitempty" name:"VulTotalAffectNum"`

	// 有未处理基线安全事件的机器总数
	BaseLineTotalAffectNum *uint64 `json:"BaseLineTotalAffectNum,omitnil,omitempty" name:"BaseLineTotalAffectNum"`

	// 有未处理网络攻击安全事件的机器总数
	CyberAttackTotalAffectNum *uint64 `json:"CyberAttackTotalAffectNum,omitnil,omitempty" name:"CyberAttackTotalAffectNum"`

	// 严重漏洞事件统计
	VulRiskStat *EventStat `json:"VulRiskStat,omitnil,omitempty" name:"VulRiskStat"`

	// 严重基线漏洞事件统计
	BaselineRiskStat *EventStat `json:"BaselineRiskStat,omitnil,omitempty" name:"BaselineRiskStat"`

	// 漏洞数统计
	VulStat *EventStat `json:"VulStat,omitnil,omitempty" name:"VulStat"`

	// 安全得分
	Score *uint64 `json:"Score,omitnil,omitempty" name:"Score"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeSecurityEventStatResponse struct {
	*tchttp.BaseResponse
	Response *DescribeSecurityEventStatResponseParams `json:"Response"`
}

func (r *DescribeSecurityEventStatResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeSecurityEventStatResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeSecurityEventsCntRequestParams struct {

}

type DescribeSecurityEventsCntRequest struct {
	*tchttp.BaseRequest
	
}

func (r *DescribeSecurityEventsCntRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeSecurityEventsCntRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeSecurityEventsCntRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeSecurityEventsCntResponseParams struct {
	// 木马文件相关风险事件
	Malware *SecurityEventInfo `json:"Malware,omitnil,omitempty" name:"Malware"`

	// 登录审计相关风险事件
	HostLogin *SecurityEventInfo `json:"HostLogin,omitnil,omitempty" name:"HostLogin"`

	// 密码破解相关风险事件
	BruteAttack *SecurityEventInfo `json:"BruteAttack,omitnil,omitempty" name:"BruteAttack"`

	// 恶意请求相关风险事件
	RiskDns *SecurityEventInfo `json:"RiskDns,omitnil,omitempty" name:"RiskDns"`

	// 高危命令相关风险事件
	Bash *SecurityEventInfo `json:"Bash,omitnil,omitempty" name:"Bash"`

	// 本地提权相关风险事件
	PrivilegeRules *SecurityEventInfo `json:"PrivilegeRules,omitnil,omitempty" name:"PrivilegeRules"`

	// 反弹Shell相关风险事件
	ReverseShell *SecurityEventInfo `json:"ReverseShell,omitnil,omitempty" name:"ReverseShell"`

	// 应用漏洞风险事件
	SysVul *SecurityEventInfo `json:"SysVul,omitnil,omitempty" name:"SysVul"`

	// Web应用漏洞相关风险事件
	WebVul *SecurityEventInfo `json:"WebVul,omitnil,omitempty" name:"WebVul"`

	// 应急漏洞相关风险事件
	EmergencyVul *SecurityEventInfo `json:"EmergencyVul,omitnil,omitempty" name:"EmergencyVul"`

	// 安全基线相关风险事件
	BaseLine *SecurityEventInfo `json:"BaseLine,omitnil,omitempty" name:"BaseLine"`

	// 攻击检测相关风险事件
	AttackLogs *SecurityEventInfo `json:"AttackLogs,omitnil,omitempty" name:"AttackLogs"`

	// 受影响机器数
	EffectMachineCount *uint64 `json:"EffectMachineCount,omitnil,omitempty" name:"EffectMachineCount"`

	// 所有事件总数
	EventsCount *uint64 `json:"EventsCount,omitnil,omitempty" name:"EventsCount"`

	// window 系统漏洞事件总数
	// 注意：此字段可能返回 null，表示取不到有效值。
	WindowVul *SecurityEventInfo `json:"WindowVul,omitnil,omitempty" name:"WindowVul"`

	// linux系统漏洞事件总数
	// 注意：此字段可能返回 null，表示取不到有效值。
	LinuxVul *SecurityEventInfo `json:"LinuxVul,omitnil,omitempty" name:"LinuxVul"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeSecurityEventsCntResponse struct {
	*tchttp.BaseResponse
	Response *DescribeSecurityEventsCntResponseParams `json:"Response"`
}

func (r *DescribeSecurityEventsCntResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeSecurityEventsCntResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeSecurityProtectionStatRequestParams struct {

}

type DescribeSecurityProtectionStatRequest struct {
	*tchttp.BaseRequest
	
}

func (r *DescribeSecurityProtectionStatRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeSecurityProtectionStatRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeSecurityProtectionStatRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeSecurityProtectionStatResponseParams struct {
	// 0 ：0付费资产情况， 1：存在未安装agent情况 ，2：部分资产已是专业版/旗舰版， 3：全部资产已是专业版/旗舰版
	AssetManageStat *uint64 `json:"AssetManageStat,omitnil,omitempty" name:"AssetManageStat"`

	// 0:从未检测过，或0资产付费情况, 1:存在漏洞风险, 2:无风险
	VulManageStat *uint64 `json:"VulManageStat,omitnil,omitempty" name:"VulManageStat"`

	// 0:从未检测过，或0资产付费情况, 1:存在基线风险,2:无风险
	SecureBasicLineStat *uint64 `json:"SecureBasicLineStat,omitnil,omitempty" name:"SecureBasicLineStat"`

	// 0:从未检测过，或0资产付费情况, 1:已检测，存在恶意文件, 2:已检测，未开启隔离防护, 3:已检测且已开启防护且无风险
	MalwareScanStat *uint64 `json:"MalwareScanStat,omitnil,omitempty" name:"MalwareScanStat"`

	// 密码破解是否开启防护 0:未开启防护或0付费资产情况 1:已开启防护 2:存在带处理事件
	DefenseBruteAttackStat *uint64 `json:"DefenseBruteAttackStat,omitnil,omitempty" name:"DefenseBruteAttackStat"`

	// 核心文件监控 0:未开启防护（0付费资产情况）,1: 已开通
	FileTamperStat *uint64 `json:"FileTamperStat,omitnil,omitempty" name:"FileTamperStat"`

	// 网页防篡改  0:未开通, 1:已开通
	WebPageStat *uint64 `json:"WebPageStat,omitnil,omitempty" name:"WebPageStat"`

	// 异常登录 0:存在未处理风险,1:无风险，未配置白名单,2:无风险，已配置
	LoginLogStat *uint64 `json:"LoginLogStat,omitnil,omitempty" name:"LoginLogStat"`

	// 检测--密码破解有无存在风险  0:存在未处理风险, 1：无风险，正常检测
	DiscoverBruteAttackStat *uint64 `json:"DiscoverBruteAttackStat,omitnil,omitempty" name:"DiscoverBruteAttackStat"`

	// 恶意请求 0 : 0台开通专业版/旗舰版, 1: 恶意请求 存在未处理风险, 2:已有付费资产，无风险
	MaliciousRequestStat *uint64 `json:"MaliciousRequestStat,omitnil,omitempty" name:"MaliciousRequestStat"`

	// 本地提权 0:0台开通专业版/旗舰版, 1:存在未处理风险 2:已有付费资产，无风险
	PrivilegeStat *uint64 `json:"PrivilegeStat,omitnil,omitempty" name:"PrivilegeStat"`

	// 反弹shell 0:0台开通专业版/旗舰版, 1:存在未处理风险 2:已有付费资产，无风险
	ReverseShellStat *uint64 `json:"ReverseShellStat,omitnil,omitempty" name:"ReverseShellStat"`

	// 专家服务 0:未开通服务, 1:已开通
	ExpertServiceStat *uint64 `json:"ExpertServiceStat,omitnil,omitempty" name:"ExpertServiceStat"`

	// 日志分析 0:未开通服务, 1:已开通
	LogAnalysisStat *uint64 `json:"LogAnalysisStat,omitnil,omitempty" name:"LogAnalysisStat"`

	// 安全告警 0:未开通设置（全部关闭） 1:已开通（只要开启1个就算）
	WarningSetStat *uint64 `json:"WarningSetStat,omitnil,omitempty" name:"WarningSetStat"`

	// 高危命令，0：0台开通专业版/旗舰版， 1：存在未处理风险， 2：已有付费资产，无风险
	EventBashStat *uint64 `json:"EventBashStat,omitnil,omitempty" name:"EventBashStat"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeSecurityProtectionStatResponse struct {
	*tchttp.BaseResponse
	Response *DescribeSecurityProtectionStatResponseParams `json:"Response"`
}

func (r *DescribeSecurityProtectionStatResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeSecurityProtectionStatResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeSecurityTrendsRequestParams struct {
	// 开始时间，如：2021-07-10
	BeginDate *string `json:"BeginDate,omitnil,omitempty" name:"BeginDate"`

	// 结束时间，如：2021-07-10
	EndDate *string `json:"EndDate,omitnil,omitempty" name:"EndDate"`
}

type DescribeSecurityTrendsRequest struct {
	*tchttp.BaseRequest
	
	// 开始时间，如：2021-07-10
	BeginDate *string `json:"BeginDate,omitnil,omitempty" name:"BeginDate"`

	// 结束时间，如：2021-07-10
	EndDate *string `json:"EndDate,omitnil,omitempty" name:"EndDate"`
}

func (r *DescribeSecurityTrendsRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeSecurityTrendsRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "BeginDate")
	delete(f, "EndDate")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeSecurityTrendsRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeSecurityTrendsResponseParams struct {
	// 木马事件统计数据数组。
	Malwares []*SecurityTrend `json:"Malwares,omitnil,omitempty" name:"Malwares"`

	// 异地登录事件统计数据数组。
	NonLocalLoginPlaces []*SecurityTrend `json:"NonLocalLoginPlaces,omitnil,omitempty" name:"NonLocalLoginPlaces"`

	// 密码破解事件统计数据数组。
	BruteAttacks []*SecurityTrend `json:"BruteAttacks,omitnil,omitempty" name:"BruteAttacks"`

	// 漏洞统计数据数组。
	Vuls []*SecurityTrend `json:"Vuls,omitnil,omitempty" name:"Vuls"`

	// 基线统计数据数组。
	BaseLines []*SecurityTrend `json:"BaseLines,omitnil,omitempty" name:"BaseLines"`

	// 恶意请求统计数据数组。
	MaliciousRequests []*SecurityTrend `json:"MaliciousRequests,omitnil,omitempty" name:"MaliciousRequests"`

	// 高危命令统计数据数组。
	HighRiskBashs []*SecurityTrend `json:"HighRiskBashs,omitnil,omitempty" name:"HighRiskBashs"`

	// 反弹shell统计数据数组。
	ReverseShells []*SecurityTrend `json:"ReverseShells,omitnil,omitempty" name:"ReverseShells"`

	// 本地提权统计数据数组。
	PrivilegeEscalations []*SecurityTrend `json:"PrivilegeEscalations,omitnil,omitempty" name:"PrivilegeEscalations"`

	// 网络攻击统计数据数组。
	CyberAttacks []*SecurityTrend `json:"CyberAttacks,omitnil,omitempty" name:"CyberAttacks"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeSecurityTrendsResponse struct {
	*tchttp.BaseResponse
	Response *DescribeSecurityTrendsResponseParams `json:"Response"`
}

func (r *DescribeSecurityTrendsResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeSecurityTrendsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeServerRelatedDirInfoRequestParams struct {
	// 唯一ID
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`
}

type DescribeServerRelatedDirInfoRequest struct {
	*tchttp.BaseRequest
	
	// 唯一ID
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`
}

func (r *DescribeServerRelatedDirInfoRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeServerRelatedDirInfoRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Id")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeServerRelatedDirInfoRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeServerRelatedDirInfoResponseParams struct {
	// 服务器名称
	HostName *string `json:"HostName,omitnil,omitempty" name:"HostName"`

	// 服务器IP
	HostIp *string `json:"HostIp,omitnil,omitempty" name:"HostIp"`

	// 防护目录数量
	ProtectDirNum *uint64 `json:"ProtectDirNum,omitnil,omitempty" name:"ProtectDirNum"`

	// 防护文件数量
	ProtectFileNum *uint64 `json:"ProtectFileNum,omitnil,omitempty" name:"ProtectFileNum"`

	// 防篡改数量
	ProtectTamperNum *uint64 `json:"ProtectTamperNum,omitnil,omitempty" name:"ProtectTamperNum"`

	// 防护软链数量
	ProtectLinkNum *uint64 `json:"ProtectLinkNum,omitnil,omitempty" name:"ProtectLinkNum"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeServerRelatedDirInfoResponse struct {
	*tchttp.BaseResponse
	Response *DescribeServerRelatedDirInfoResponseParams `json:"Response"`
}

func (r *DescribeServerRelatedDirInfoResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeServerRelatedDirInfoResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeServersAndRiskAndFirstInfoRequestParams struct {

}

type DescribeServersAndRiskAndFirstInfoRequest struct {
	*tchttp.BaseRequest
	
}

func (r *DescribeServersAndRiskAndFirstInfoRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeServersAndRiskAndFirstInfoRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeServersAndRiskAndFirstInfoRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeServersAndRiskAndFirstInfoResponseParams struct {
	// 风险文件数
	RiskFileCount *uint64 `json:"RiskFileCount,omitnil,omitempty" name:"RiskFileCount"`

	// 今日新增风险文件数
	AddRiskFileCount *uint64 `json:"AddRiskFileCount,omitnil,omitempty" name:"AddRiskFileCount"`

	// 受影响服务器台数
	ServersCount *uint64 `json:"ServersCount,omitnil,omitempty" name:"ServersCount"`

	// 是否试用：true-是，false-否
	IsFirstCheck *bool `json:"IsFirstCheck,omitnil,omitempty" name:"IsFirstCheck"`

	// 木马最近检测时间
	ScanTime *string `json:"ScanTime,omitnil,omitempty" name:"ScanTime"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeServersAndRiskAndFirstInfoResponse struct {
	*tchttp.BaseResponse
	Response *DescribeServersAndRiskAndFirstInfoResponseParams `json:"Response"`
}

func (r *DescribeServersAndRiskAndFirstInfoResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeServersAndRiskAndFirstInfoResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeStrategyExistRequestParams struct {
	// 策略名
	StrategyName *string `json:"StrategyName,omitnil,omitempty" name:"StrategyName"`
}

type DescribeStrategyExistRequest struct {
	*tchttp.BaseRequest
	
	// 策略名
	StrategyName *string `json:"StrategyName,omitnil,omitempty" name:"StrategyName"`
}

func (r *DescribeStrategyExistRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeStrategyExistRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "StrategyName")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeStrategyExistRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeStrategyExistResponseParams struct {
	// 策略是否存在, 1是 0否
	// 注意：此字段可能返回 null，表示取不到有效值。
	IfExist *uint64 `json:"IfExist,omitnil,omitempty" name:"IfExist"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeStrategyExistResponse struct {
	*tchttp.BaseResponse
	Response *DescribeStrategyExistResponseParams `json:"Response"`
}

func (r *DescribeStrategyExistResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeStrategyExistResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeTagMachinesRequestParams struct {
	// 标签ID
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`
}

type DescribeTagMachinesRequest struct {
	*tchttp.BaseRequest
	
	// 标签ID
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`
}

func (r *DescribeTagMachinesRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeTagMachinesRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Id")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeTagMachinesRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeTagMachinesResponseParams struct {
	// 列表数据
	List []*TagMachine `json:"List,omitnil,omitempty" name:"List"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeTagMachinesResponse struct {
	*tchttp.BaseResponse
	Response *DescribeTagMachinesResponseParams `json:"Response"`
}

func (r *DescribeTagMachinesResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeTagMachinesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeTagsRequestParams struct {
	// 云主机类型。
	// <li>CVM：表示云服务器</li>
	// <li>BM:  表示黑石物理机</li>
	// <li>ECM:  表示边缘计算服务器</li>
	// <li>LH:  表示轻量应用服务器</li>
	// <li>Other:  表示混合云服务器</li>
	MachineType *string `json:"MachineType,omitnil,omitempty" name:"MachineType"`

	// 机器所属地域。如：ap-guangzhou
	MachineRegion *string `json:"MachineRegion,omitnil,omitempty" name:"MachineRegion"`

	// 过滤条件。
	// <li>Keywords - String - 是否必填：否 - 查询关键字(机器名称/机器IP </li>
	// <li>Status - String - 是否必填：否 - 客户端在线状态（OFFLINE: 离线 | ONLINE: 在线 | UNINSTALLED：未安装 | SHUTDOWN 已关机）</li>
	// <li>Version - String  是否必填：否 - 当前防护版本（ PRO_VERSION：专业版 | BASIC_VERSION：基础版）</li>
	// <li>Risk - String 是否必填: 否 - 风险主机( yes ) </li>
	// <li>Os -String 是否必填: 否 - 操作系统( DescribeMachineOsList 接口 值 )
	// 每个过滤条件只支持一个值，暂不支持多个值“或”关系查询</li>
	Filters []*Filters `json:"Filters,omitnil,omitempty" name:"Filters"`
}

type DescribeTagsRequest struct {
	*tchttp.BaseRequest
	
	// 云主机类型。
	// <li>CVM：表示云服务器</li>
	// <li>BM:  表示黑石物理机</li>
	// <li>ECM:  表示边缘计算服务器</li>
	// <li>LH:  表示轻量应用服务器</li>
	// <li>Other:  表示混合云服务器</li>
	MachineType *string `json:"MachineType,omitnil,omitempty" name:"MachineType"`

	// 机器所属地域。如：ap-guangzhou
	MachineRegion *string `json:"MachineRegion,omitnil,omitempty" name:"MachineRegion"`

	// 过滤条件。
	// <li>Keywords - String - 是否必填：否 - 查询关键字(机器名称/机器IP </li>
	// <li>Status - String - 是否必填：否 - 客户端在线状态（OFFLINE: 离线 | ONLINE: 在线 | UNINSTALLED：未安装 | SHUTDOWN 已关机）</li>
	// <li>Version - String  是否必填：否 - 当前防护版本（ PRO_VERSION：专业版 | BASIC_VERSION：基础版）</li>
	// <li>Risk - String 是否必填: 否 - 风险主机( yes ) </li>
	// <li>Os -String 是否必填: 否 - 操作系统( DescribeMachineOsList 接口 值 )
	// 每个过滤条件只支持一个值，暂不支持多个值“或”关系查询</li>
	Filters []*Filters `json:"Filters,omitnil,omitempty" name:"Filters"`
}

func (r *DescribeTagsRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeTagsRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "MachineType")
	delete(f, "MachineRegion")
	delete(f, "Filters")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeTagsRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeTagsResponseParams struct {
	// 列表信息
	List []*Tag `json:"List,omitnil,omitempty" name:"List"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeTagsResponse struct {
	*tchttp.BaseResponse
	Response *DescribeTagsResponseParams `json:"Response"`
}

func (r *DescribeTagsResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeTagsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeTrialReportRequestParams struct {

}

type DescribeTrialReportRequest struct {
	*tchttp.BaseRequest
	
}

func (r *DescribeTrialReportRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeTrialReportRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeTrialReportRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeTrialReportResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeTrialReportResponse struct {
	*tchttp.BaseResponse
	Response *DescribeTrialReportResponseParams `json:"Response"`
}

func (r *DescribeTrialReportResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeTrialReportResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeUndoVulCountsRequestParams struct {
	// 漏洞分类，1: web-cms漏洞 2:应用漏洞  4: Linux软件漏洞 5: Windows系统漏洞
	VulCategory *uint64 `json:"VulCategory,omitnil,omitempty" name:"VulCategory"`

	// 是否应急漏洞筛选, 是 : yes
	IfEmergency *string `json:"IfEmergency,omitnil,omitempty" name:"IfEmergency"`
}

type DescribeUndoVulCountsRequest struct {
	*tchttp.BaseRequest
	
	// 漏洞分类，1: web-cms漏洞 2:应用漏洞  4: Linux软件漏洞 5: Windows系统漏洞
	VulCategory *uint64 `json:"VulCategory,omitnil,omitempty" name:"VulCategory"`

	// 是否应急漏洞筛选, 是 : yes
	IfEmergency *string `json:"IfEmergency,omitnil,omitempty" name:"IfEmergency"`
}

func (r *DescribeUndoVulCountsRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeUndoVulCountsRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "VulCategory")
	delete(f, "IfEmergency")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeUndoVulCountsRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeUndoVulCountsResponseParams struct {
	// 未处理的漏洞数
	// 注意：此字段可能返回 null，表示取不到有效值。
	UndoVulCount *uint64 `json:"UndoVulCount,omitnil,omitempty" name:"UndoVulCount"`

	// 未处理的主机数
	// 注意：此字段可能返回 null，表示取不到有效值。
	UndoHostCount *int64 `json:"UndoHostCount,omitnil,omitempty" name:"UndoHostCount"`

	// 普通版主机数
	// 注意：此字段可能返回 null，表示取不到有效值。
	NotProfessionCount *uint64 `json:"NotProfessionCount,omitnil,omitempty" name:"NotProfessionCount"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeUndoVulCountsResponse struct {
	*tchttp.BaseResponse
	Response *DescribeUndoVulCountsResponseParams `json:"Response"`
}

func (r *DescribeUndoVulCountsResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeUndoVulCountsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeUsersConfigRequestParams struct {
	// 配置名称
	// <li>license_monitor 授权监控配置 0 关闭, 1开启</li>
	ConfigName *string `json:"ConfigName,omitnil,omitempty" name:"ConfigName"`
}

type DescribeUsersConfigRequest struct {
	*tchttp.BaseRequest
	
	// 配置名称
	// <li>license_monitor 授权监控配置 0 关闭, 1开启</li>
	ConfigName *string `json:"ConfigName,omitnil,omitempty" name:"ConfigName"`
}

func (r *DescribeUsersConfigRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeUsersConfigRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "ConfigName")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeUsersConfigRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeUsersConfigResponseParams struct {
	// 配置值
	Value *string `json:"Value,omitnil,omitempty" name:"Value"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeUsersConfigResponse struct {
	*tchttp.BaseResponse
	Response *DescribeUsersConfigResponseParams `json:"Response"`
}

func (r *DescribeUsersConfigResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeUsersConfigResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeUsualLoginPlacesRequestParams struct {
	// 主机安全客户端UUID
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`
}

type DescribeUsualLoginPlacesRequest struct {
	*tchttp.BaseRequest
	
	// 主机安全客户端UUID
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`
}

func (r *DescribeUsualLoginPlacesRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeUsualLoginPlacesRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Uuid")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeUsualLoginPlacesRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeUsualLoginPlacesResponseParams struct {
	// 常用登录地数组
	UsualLoginPlaces []*UsualPlace `json:"UsualLoginPlaces,omitnil,omitempty" name:"UsualLoginPlaces"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeUsualLoginPlacesResponse struct {
	*tchttp.BaseResponse
	Response *DescribeUsualLoginPlacesResponseParams `json:"Response"`
}

func (r *DescribeUsualLoginPlacesResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeUsualLoginPlacesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeVdbAndPocInfoRequestParams struct {

}

type DescribeVdbAndPocInfoRequest struct {
	*tchttp.BaseRequest
	
}

func (r *DescribeVdbAndPocInfoRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeVdbAndPocInfoRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeVdbAndPocInfoRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeVdbAndPocInfoResponseParams struct {
	// 病毒库更新时间。
	VdbUpdateTime *string `json:"VdbUpdateTime,omitnil,omitempty" name:"VdbUpdateTime"`

	// 漏洞库更新时间。
	PocUpdateTime *string `json:"PocUpdateTime,omitnil,omitempty" name:"PocUpdateTime"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeVdbAndPocInfoResponse struct {
	*tchttp.BaseResponse
	Response *DescribeVdbAndPocInfoResponseParams `json:"Response"`
}

func (r *DescribeVdbAndPocInfoResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeVdbAndPocInfoResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeVersionCompareChartRequestParams struct {

}

type DescribeVersionCompareChartRequest struct {
	*tchttp.BaseRequest
	
}

func (r *DescribeVersionCompareChartRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeVersionCompareChartRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeVersionCompareChartRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeVersionCompareChartResponseParams struct {
	// json 字符串
	Data *string `json:"Data,omitnil,omitempty" name:"Data"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeVersionCompareChartResponse struct {
	*tchttp.BaseResponse
	Response *DescribeVersionCompareChartResponseParams `json:"Response"`
}

func (r *DescribeVersionCompareChartResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeVersionCompareChartResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeVersionStatisticsRequestParams struct {

}

type DescribeVersionStatisticsRequest struct {
	*tchttp.BaseRequest
	
}

func (r *DescribeVersionStatisticsRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeVersionStatisticsRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeVersionStatisticsRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeVersionStatisticsResponseParams struct {
	// 基础版数量
	BasicVersionNum *uint64 `json:"BasicVersionNum,omitnil,omitempty" name:"BasicVersionNum"`

	// 专业版数量
	ProVersionNum *uint64 `json:"ProVersionNum,omitnil,omitempty" name:"ProVersionNum"`

	// 旗舰版数量
	UltimateVersionNum *uint64 `json:"UltimateVersionNum,omitnil,omitempty" name:"UltimateVersionNum"`

	// 普惠版数量
	GeneralVersionNum *uint64 `json:"GeneralVersionNum,omitnil,omitempty" name:"GeneralVersionNum"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeVersionStatisticsResponse struct {
	*tchttp.BaseResponse
	Response *DescribeVersionStatisticsResponseParams `json:"Response"`
}

func (r *DescribeVersionStatisticsResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeVersionStatisticsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeVertexDetailRequestParams struct {
	// 点id列表
	VertexIds []*string `json:"VertexIds,omitnil,omitempty" name:"VertexIds"`

	// 事件id
	IncidentId *string `json:"IncidentId,omitnil,omitempty" name:"IncidentId"`

	// 事件所在表名
	TableName *string `json:"TableName,omitnil,omitempty" name:"TableName"`
}

type DescribeVertexDetailRequest struct {
	*tchttp.BaseRequest
	
	// 点id列表
	VertexIds []*string `json:"VertexIds,omitnil,omitempty" name:"VertexIds"`

	// 事件id
	IncidentId *string `json:"IncidentId,omitnil,omitempty" name:"IncidentId"`

	// 事件所在表名
	TableName *string `json:"TableName,omitnil,omitempty" name:"TableName"`
}

func (r *DescribeVertexDetailRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeVertexDetailRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "VertexIds")
	delete(f, "IncidentId")
	delete(f, "TableName")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeVertexDetailRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeVertexDetailResponseParams struct {
	// 指定点列表的属性信息
	// 注意：此字段可能返回 null，表示取不到有效值。
	VertexDetails []*VertexDetail `json:"VertexDetails,omitnil,omitempty" name:"VertexDetails"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeVertexDetailResponse struct {
	*tchttp.BaseResponse
	Response *DescribeVertexDetailResponseParams `json:"Response"`
}

func (r *DescribeVertexDetailResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeVertexDetailResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeVulCountByDatesRequestParams struct {
	// 需要查询最近几天的数据，需要都 -1后传入
	LastDays []*uint64 `json:"LastDays,omitnil,omitempty" name:"LastDays"`

	// 漏洞的分类: 1: web-cms漏洞 2:应用漏洞  4: Linux软件漏洞 5: Windows系统漏洞
	VulCategory *uint64 `json:"VulCategory,omitnil,omitempty" name:"VulCategory"`

	// 是否为应急漏洞筛选  是: yes
	IfEmergency *string `json:"IfEmergency,omitnil,omitempty" name:"IfEmergency"`
}

type DescribeVulCountByDatesRequest struct {
	*tchttp.BaseRequest
	
	// 需要查询最近几天的数据，需要都 -1后传入
	LastDays []*uint64 `json:"LastDays,omitnil,omitempty" name:"LastDays"`

	// 漏洞的分类: 1: web-cms漏洞 2:应用漏洞  4: Linux软件漏洞 5: Windows系统漏洞
	VulCategory *uint64 `json:"VulCategory,omitnil,omitempty" name:"VulCategory"`

	// 是否为应急漏洞筛选  是: yes
	IfEmergency *string `json:"IfEmergency,omitnil,omitempty" name:"IfEmergency"`
}

func (r *DescribeVulCountByDatesRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeVulCountByDatesRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "LastDays")
	delete(f, "VulCategory")
	delete(f, "IfEmergency")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeVulCountByDatesRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeVulCountByDatesResponseParams struct {
	// 批量获得对应天数的漏洞数量
	// 注意：此字段可能返回 null，表示取不到有效值。
	VulCount []*uint64 `json:"VulCount,omitnil,omitempty" name:"VulCount"`

	// 批量获得对应天数的主机数量
	HostCount []*uint64 `json:"HostCount,omitnil,omitempty" name:"HostCount"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeVulCountByDatesResponse struct {
	*tchttp.BaseResponse
	Response *DescribeVulCountByDatesResponseParams `json:"Response"`
}

func (r *DescribeVulCountByDatesResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeVulCountByDatesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeVulCveIdInfoRequestParams struct {
	// 漏洞cve_id 列表
	CveIds []*string `json:"CveIds,omitnil,omitempty" name:"CveIds"`
}

type DescribeVulCveIdInfoRequest struct {
	*tchttp.BaseRequest
	
	// 漏洞cve_id 列表
	CveIds []*string `json:"CveIds,omitnil,omitempty" name:"CveIds"`
}

func (r *DescribeVulCveIdInfoRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeVulCveIdInfoRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "CveIds")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeVulCveIdInfoRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeVulCveIdInfoResponseParams struct {
	// 详情列表
	// 注意：此字段可能返回 null，表示取不到有效值。
	List []*VulInfoByCveId `json:"List,omitnil,omitempty" name:"List"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeVulCveIdInfoResponse struct {
	*tchttp.BaseResponse
	Response *DescribeVulCveIdInfoResponseParams `json:"Response"`
}

func (r *DescribeVulCveIdInfoResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeVulCveIdInfoResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeVulDefenceEventRequestParams struct {
	// 过滤条件：Keywords: ip或者主机名, VulKeywords漏洞名或者CveId模糊查询; Quuid，VulId，EventType，Status精确匹配，CreateBeginTime，CreateEndTime时间段查询
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 数据偏移
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 数据限制
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 排序，大小写无关：asc 升序，desc降序
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 排序列，严格相等：CreateTime创建时间，MergeTime合并时间，Count事件数量
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

type DescribeVulDefenceEventRequest struct {
	*tchttp.BaseRequest
	
	// 过滤条件：Keywords: ip或者主机名, VulKeywords漏洞名或者CveId模糊查询; Quuid，VulId，EventType，Status精确匹配，CreateBeginTime，CreateEndTime时间段查询
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 数据偏移
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 数据限制
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 排序，大小写无关：asc 升序，desc降序
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 排序列，严格相等：CreateTime创建时间，MergeTime合并时间，Count事件数量
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

func (r *DescribeVulDefenceEventRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeVulDefenceEventRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Filters")
	delete(f, "Offset")
	delete(f, "Limit")
	delete(f, "Order")
	delete(f, "By")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeVulDefenceEventRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeVulDefenceEventResponseParams struct {
	// 数据总数
	TotalCount *uint64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// 漏洞防御事件列表
	// 注意：此字段可能返回 null，表示取不到有效值。
	List []*VulDefenceEvent `json:"List,omitnil,omitempty" name:"List"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeVulDefenceEventResponse struct {
	*tchttp.BaseResponse
	Response *DescribeVulDefenceEventResponseParams `json:"Response"`
}

func (r *DescribeVulDefenceEventResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeVulDefenceEventResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeVulDefenceListRequestParams struct {
	// 过滤条件：Level、Keywords
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 数据偏移
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 数据限制
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 排序，大小写无关：asc 升序，desc降序
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 排序列，严格相等：PublishTime发布时间
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

type DescribeVulDefenceListRequest struct {
	*tchttp.BaseRequest
	
	// 过滤条件：Level、Keywords
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 数据偏移
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 数据限制
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 排序，大小写无关：asc 升序，desc降序
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 排序列，严格相等：PublishTime发布时间
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

func (r *DescribeVulDefenceListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeVulDefenceListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Filters")
	delete(f, "Offset")
	delete(f, "Limit")
	delete(f, "Order")
	delete(f, "By")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeVulDefenceListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeVulDefenceListResponseParams struct {
	// 数据总数
	TotalCount *uint64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// 漏洞防御列表
	// 注意：此字段可能返回 null，表示取不到有效值。
	List []*VulDefenceRangeDetail `json:"List,omitnil,omitempty" name:"List"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeVulDefenceListResponse struct {
	*tchttp.BaseResponse
	Response *DescribeVulDefenceListResponseParams `json:"Response"`
}

func (r *DescribeVulDefenceListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeVulDefenceListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeVulDefenceOverviewRequestParams struct {

}

type DescribeVulDefenceOverviewRequest struct {
	*tchttp.BaseRequest
	
}

func (r *DescribeVulDefenceOverviewRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeVulDefenceOverviewRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeVulDefenceOverviewRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeVulDefenceOverviewResponseParams struct {
	// 漏洞防御概览信息
	Overview *VulDefenceOverview `json:"Overview,omitnil,omitempty" name:"Overview"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeVulDefenceOverviewResponse struct {
	*tchttp.BaseResponse
	Response *DescribeVulDefenceOverviewResponseParams `json:"Response"`
}

func (r *DescribeVulDefenceOverviewResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeVulDefenceOverviewResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeVulDefencePluginDetailRequestParams struct {
	// 主机Quuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 过滤条件：Keywords: ip或者主机名,Exception，Status精确匹配
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 数据偏移
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 数据限制
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`
}

type DescribeVulDefencePluginDetailRequest struct {
	*tchttp.BaseRequest
	
	// 主机Quuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 过滤条件：Keywords: ip或者主机名,Exception，Status精确匹配
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 数据偏移
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 数据限制
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`
}

func (r *DescribeVulDefencePluginDetailRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeVulDefencePluginDetailRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Quuid")
	delete(f, "Filters")
	delete(f, "Offset")
	delete(f, "Limit")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeVulDefencePluginDetailRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeVulDefencePluginDetailResponseParams struct {
	// 数据总数
	TotalCount *uint64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// 漏洞防御插件信息详情列表
	// 注意：此字段可能返回 null，表示取不到有效值。
	List []*VulDefencePluginDetail `json:"List,omitnil,omitempty" name:"List"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeVulDefencePluginDetailResponse struct {
	*tchttp.BaseResponse
	Response *DescribeVulDefencePluginDetailResponseParams `json:"Response"`
}

func (r *DescribeVulDefencePluginDetailResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeVulDefencePluginDetailResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeVulDefencePluginExceptionCountRequestParams struct {

}

type DescribeVulDefencePluginExceptionCountRequest struct {
	*tchttp.BaseRequest
	
}

func (r *DescribeVulDefencePluginExceptionCountRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeVulDefencePluginExceptionCountRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeVulDefencePluginExceptionCountRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeVulDefencePluginExceptionCountResponseParams struct {
	// 当前异常插件数
	// 注意：此字段可能返回 null，表示取不到有效值。
	Count *uint64 `json:"Count,omitnil,omitempty" name:"Count"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeVulDefencePluginExceptionCountResponse struct {
	*tchttp.BaseResponse
	Response *DescribeVulDefencePluginExceptionCountResponseParams `json:"Response"`
}

func (r *DescribeVulDefencePluginExceptionCountResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeVulDefencePluginExceptionCountResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeVulDefencePluginStatusRequestParams struct {
	// 过滤条件。
	// <li>Keywords - String - 是否必填：否 - 主机ip或别名筛选</li>
	// <li>Exception - String - 是否必填：否 - 插件状态 0:正常,1:异常,2:无java进程注入</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 数据偏移
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 数据限制
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 排序，大小写无关：asc 升序，desc降序
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 排序列，严格相等：CreateTime创建时间，ModifyTime更新时间
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

type DescribeVulDefencePluginStatusRequest struct {
	*tchttp.BaseRequest
	
	// 过滤条件。
	// <li>Keywords - String - 是否必填：否 - 主机ip或别名筛选</li>
	// <li>Exception - String - 是否必填：否 - 插件状态 0:正常,1:异常,2:无java进程注入</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 数据偏移
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 数据限制
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 排序，大小写无关：asc 升序，desc降序
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 排序列，严格相等：CreateTime创建时间，ModifyTime更新时间
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

func (r *DescribeVulDefencePluginStatusRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeVulDefencePluginStatusRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Filters")
	delete(f, "Offset")
	delete(f, "Limit")
	delete(f, "Order")
	delete(f, "By")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeVulDefencePluginStatusRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeVulDefencePluginStatusResponseParams struct {
	// 数据总数
	TotalCount *uint64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// 各主机漏洞防御插件信息列表
	// 注意：此字段可能返回 null，表示取不到有效值。
	List []*VulDefencePluginStatus `json:"List,omitnil,omitempty" name:"List"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeVulDefencePluginStatusResponse struct {
	*tchttp.BaseResponse
	Response *DescribeVulDefencePluginStatusResponseParams `json:"Response"`
}

func (r *DescribeVulDefencePluginStatusResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeVulDefencePluginStatusResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeVulDefenceSettingRequestParams struct {

}

type DescribeVulDefenceSettingRequest struct {
	*tchttp.BaseRequest
	
}

func (r *DescribeVulDefenceSettingRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeVulDefenceSettingRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeVulDefenceSettingRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeVulDefenceSettingResponseParams struct {
	// 防御开关，0 关闭 1 开启
	Enable *uint64 `json:"Enable,omitnil,omitempty" name:"Enable"`

	// 影响范围：1 全网旗舰版主机，0 quuid列表主机
	Scope *uint64 `json:"Scope,omitnil,omitempty" name:"Scope"`

	// 影响主机quuid列表
	// 注意：此字段可能返回 null，表示取不到有效值。
	Quuids []*string `json:"Quuids,omitnil,omitempty" name:"Quuids"`

	// 当前旗舰版主机数量
	FlagshipCount *uint64 `json:"FlagshipCount,omitnil,omitempty" name:"FlagshipCount"`

	// 影响主机id列表
	// 注意：此字段可能返回 null，表示取不到有效值。
	InstanceIds []*string `json:"InstanceIds,omitnil,omitempty" name:"InstanceIds"`

	// 新增旗舰版主机自动加入;1是，0否 
	AutoInclude *uint64 `json:"AutoInclude,omitnil,omitempty" name:"AutoInclude"`

	// 排除的主机id列表
	// 注意：此字段可能返回 null，表示取不到有效值。
	ExcludeInstanceIds []*string `json:"ExcludeInstanceIds,omitnil,omitempty" name:"ExcludeInstanceIds"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeVulDefenceSettingResponse struct {
	*tchttp.BaseResponse
	Response *DescribeVulDefenceSettingResponseParams `json:"Response"`
}

func (r *DescribeVulDefenceSettingResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeVulDefenceSettingResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeVulEffectHostListRequestParams struct {
	// 分页limit 最大100
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 分页Offset
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 漏洞id
	VulId *uint64 `json:"VulId,omitnil,omitempty" name:"VulId"`

	// 过滤条件：
	// <li>AliasName - String - 主机名筛选</li>
	// <li>TagIds - String - 主机标签id串，多个用英文用逗号分隔</li>
	// <li>Status - String - 状态：0-待处理 1-忽略  3-已修复  5-检测中  6-修复中  8-修复失败</li>
	// <li>Uuid - String数组 - Uuid串数组</li>
	// <li>Version - String数组 - 付费版本数组："Flagship"-旗舰版 "PRO_VERSION"-专业版 "BASIC_VERSION"-基础版</li>
	// <li>InstanceState - String数组 - 实例状态数组："PENDING"-创建中 "LAUNCH_FAILED"-创建失败 "RUNNING"-运行中 "STOPPED"-关机 "STARTING"-开机中 "STOPPING"-关机中 "REBOOTING"-重启中 "SHUTDOWN"-待销毁 "TERMINATING"-销毁中 "UNKNOWN"-未知（针对非腾讯云机器，且客户端离线的场景） </li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`
}

type DescribeVulEffectHostListRequest struct {
	*tchttp.BaseRequest
	
	// 分页limit 最大100
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 分页Offset
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 漏洞id
	VulId *uint64 `json:"VulId,omitnil,omitempty" name:"VulId"`

	// 过滤条件：
	// <li>AliasName - String - 主机名筛选</li>
	// <li>TagIds - String - 主机标签id串，多个用英文用逗号分隔</li>
	// <li>Status - String - 状态：0-待处理 1-忽略  3-已修复  5-检测中  6-修复中  8-修复失败</li>
	// <li>Uuid - String数组 - Uuid串数组</li>
	// <li>Version - String数组 - 付费版本数组："Flagship"-旗舰版 "PRO_VERSION"-专业版 "BASIC_VERSION"-基础版</li>
	// <li>InstanceState - String数组 - 实例状态数组："PENDING"-创建中 "LAUNCH_FAILED"-创建失败 "RUNNING"-运行中 "STOPPED"-关机 "STARTING"-开机中 "STOPPING"-关机中 "REBOOTING"-重启中 "SHUTDOWN"-待销毁 "TERMINATING"-销毁中 "UNKNOWN"-未知（针对非腾讯云机器，且客户端离线的场景） </li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`
}

func (r *DescribeVulEffectHostListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeVulEffectHostListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Limit")
	delete(f, "Offset")
	delete(f, "VulId")
	delete(f, "Filters")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeVulEffectHostListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeVulEffectHostListResponseParams struct {
	// 列表总数量
	TotalCount *uint64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// 影响主机列表
	// 注意：此字段可能返回 null，表示取不到有效值。
	VulEffectHostList []*VulEffectHostList `json:"VulEffectHostList,omitnil,omitempty" name:"VulEffectHostList"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeVulEffectHostListResponse struct {
	*tchttp.BaseResponse
	Response *DescribeVulEffectHostListResponseParams `json:"Response"`
}

func (r *DescribeVulEffectHostListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeVulEffectHostListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeVulEffectModulesRequestParams struct {
	// 分页limit 最大100
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 分页Offset
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 漏洞id
	VulId *uint64 `json:"VulId,omitnil,omitempty" name:"VulId"`

	// 过滤条件：
	// <li>Uuid - String数组 - Uuid串数组</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`
}

type DescribeVulEffectModulesRequest struct {
	*tchttp.BaseRequest
	
	// 分页limit 最大100
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 分页Offset
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 漏洞id
	VulId *uint64 `json:"VulId,omitnil,omitempty" name:"VulId"`

	// 过滤条件：
	// <li>Uuid - String数组 - Uuid串数组</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`
}

func (r *DescribeVulEffectModulesRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeVulEffectModulesRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Limit")
	delete(f, "Offset")
	delete(f, "VulId")
	delete(f, "Filters")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeVulEffectModulesRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeVulEffectModulesResponseParams struct {
	// 列表总数量
	TotalCount *uint64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// 影响主机列表
	// 注意：此字段可能返回 null，表示取不到有效值。
	VulEffectModuleInfo []*VulEffectModuleInfo `json:"VulEffectModuleInfo,omitnil,omitempty" name:"VulEffectModuleInfo"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeVulEffectModulesResponse struct {
	*tchttp.BaseResponse
	Response *DescribeVulEffectModulesResponseParams `json:"Response"`
}

func (r *DescribeVulEffectModulesResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeVulEffectModulesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeVulEmergentMsgRequestParams struct {

}

type DescribeVulEmergentMsgRequest struct {
	*tchttp.BaseRequest
	
}

func (r *DescribeVulEmergentMsgRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeVulEmergentMsgRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeVulEmergentMsgRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeVulEmergentMsgResponseParams struct {
	// 漏洞紧急通知数据
	// 注意：此字段可能返回 null，表示取不到有效值。
	EmergentMsgList []*VulEmergentMsgInfo `json:"EmergentMsgList,omitnil,omitempty" name:"EmergentMsgList"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeVulEmergentMsgResponse struct {
	*tchttp.BaseResponse
	Response *DescribeVulEmergentMsgResponseParams `json:"Response"`
}

func (r *DescribeVulEmergentMsgResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeVulEmergentMsgResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeVulFixStatusRequestParams struct {
	// 任务id 传VulId可以不用传FixId
	FixId *uint64 `json:"FixId,omitnil,omitempty" name:"FixId"`

	// 漏洞id 传FixId可以不用传VulId
	VulId *uint64 `json:"VulId,omitnil,omitempty" name:"VulId"`

	// 主机quuid 和VulId 组合可查 某主机最近一次修复任务详情
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`
}

type DescribeVulFixStatusRequest struct {
	*tchttp.BaseRequest
	
	// 任务id 传VulId可以不用传FixId
	FixId *uint64 `json:"FixId,omitnil,omitempty" name:"FixId"`

	// 漏洞id 传FixId可以不用传VulId
	VulId *uint64 `json:"VulId,omitnil,omitempty" name:"VulId"`

	// 主机quuid 和VulId 组合可查 某主机最近一次修复任务详情
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`
}

func (r *DescribeVulFixStatusRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeVulFixStatusRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "FixId")
	delete(f, "VulId")
	delete(f, "Quuid")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeVulFixStatusRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeVulFixStatusResponseParams struct {
	// 开始修复时间
	// 注意：此字段可能返回 null，表示取不到有效值。
	FixStartTime *string `json:"FixStartTime,omitnil,omitempty" name:"FixStartTime"`

	// 修复结束时间，为空表示还没结束
	// 注意：此字段可能返回 null，表示取不到有效值。
	FixEndTime *string `json:"FixEndTime,omitnil,omitempty" name:"FixEndTime"`

	// 修复成功的主机数
	// 注意：此字段可能返回 null，表示取不到有效值。
	FixSuccessCnt *uint64 `json:"FixSuccessCnt,omitnil,omitempty" name:"FixSuccessCnt"`

	// 修复失败的主机数
	FixFailCnt *uint64 `json:"FixFailCnt,omitnil,omitempty" name:"FixFailCnt"`

	// 主机总数
	HostCnt *uint64 `json:"HostCnt,omitnil,omitempty" name:"HostCnt"`

	// 修复的任务id
	FixId *uint64 `json:"FixId,omitnil,omitempty" name:"FixId"`

	// 修复快照状态列表
	// 注意：此字段可能返回 null，表示取不到有效值。
	SnapshotList []*VulFixStatusSnapshotInfo `json:"SnapshotList,omitnil,omitempty" name:"SnapshotList"`

	// 修复漏洞详情列表
	// 注意：此字段可能返回 null，表示取不到有效值。
	VulFixList []*VulFixStatusInfo `json:"VulFixList,omitnil,omitempty" name:"VulFixList"`

	// 快照创建进度0-100
	SnapshotProgress *uint64 `json:"SnapshotProgress,omitnil,omitempty" name:"SnapshotProgress"`

	// 修复进度 0-100
	FixProgress *uint64 `json:"FixProgress,omitnil,omitempty" name:"FixProgress"`

	// 预计剩余时间（单位秒）
	RemainingTime *uint64 `json:"RemainingTime,omitnil,omitempty" name:"RemainingTime"`

	// 快照是否是重试状态 0=非重试  1=重试
	IsRetrySnapshot *uint64 `json:"IsRetrySnapshot,omitnil,omitempty" name:"IsRetrySnapshot"`

	// 快照创建失败数
	// 注意：此字段可能返回 null，表示取不到有效值。
	SnapshotFailCnt *uint64 `json:"SnapshotFailCnt,omitnil,omitempty" name:"SnapshotFailCnt"`

	// 是否允许重试 0:不允许 1：允许
	// 注意：此字段可能返回 null，表示取不到有效值。
	IsAllowRetry *uint64 `json:"IsAllowRetry,omitnil,omitempty" name:"IsAllowRetry"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeVulFixStatusResponse struct {
	*tchttp.BaseResponse
	Response *DescribeVulFixStatusResponseParams `json:"Response"`
}

func (r *DescribeVulFixStatusResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeVulFixStatusResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeVulHostCountScanTimeRequestParams struct {

}

type DescribeVulHostCountScanTimeRequest struct {
	*tchttp.BaseRequest
	
}

func (r *DescribeVulHostCountScanTimeRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeVulHostCountScanTimeRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeVulHostCountScanTimeRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeVulHostCountScanTimeResponseParams struct {
	// 总漏洞数
	TotalVulCount *uint64 `json:"TotalVulCount,omitnil,omitempty" name:"TotalVulCount"`

	// 漏洞影响主机数
	VulHostCount *uint64 `json:"VulHostCount,omitnil,omitempty" name:"VulHostCount"`

	// 扫描时间
	ScanTime *string `json:"ScanTime,omitnil,omitempty" name:"ScanTime"`

	// 是否第一次检测
	IfFirstScan *bool `json:"IfFirstScan,omitnil,omitempty" name:"IfFirstScan"`

	// 运行中的任务号, 没有任务则为0
	TaskId *uint64 `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// 最后一次修复漏洞的时间
	LastFixTime *string `json:"LastFixTime,omitnil,omitempty" name:"LastFixTime"`

	// 是否有支持自动修复的漏洞事件
	hadAutoFixVul *bool `json:"hadAutoFixVul,omitnil,omitempty" name:"hadAutoFixVul"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeVulHostCountScanTimeResponse struct {
	*tchttp.BaseResponse
	Response *DescribeVulHostCountScanTimeResponseParams `json:"Response"`
}

func (r *DescribeVulHostCountScanTimeResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeVulHostCountScanTimeResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeVulHostTopRequestParams struct {
	// 获取top值，1-100
	Top *uint64 `json:"Top,omitnil,omitempty" name:"Top"`

	// 1:web-cms 漏洞，2.应用漏洞   4: Linux软件漏洞 5: windows系统漏洞 6:应急漏洞，不填或者填0时返回 1，2，4，5 的总统计数据
	VulCategory *uint64 `json:"VulCategory,omitnil,omitempty" name:"VulCategory"`

	// 是否仅统计重点关注漏洞 1=仅统计重点关注漏洞, 0=统计全部漏洞
	IsFollowVul *uint64 `json:"IsFollowVul,omitnil,omitempty" name:"IsFollowVul"`
}

type DescribeVulHostTopRequest struct {
	*tchttp.BaseRequest
	
	// 获取top值，1-100
	Top *uint64 `json:"Top,omitnil,omitempty" name:"Top"`

	// 1:web-cms 漏洞，2.应用漏洞   4: Linux软件漏洞 5: windows系统漏洞 6:应急漏洞，不填或者填0时返回 1，2，4，5 的总统计数据
	VulCategory *uint64 `json:"VulCategory,omitnil,omitempty" name:"VulCategory"`

	// 是否仅统计重点关注漏洞 1=仅统计重点关注漏洞, 0=统计全部漏洞
	IsFollowVul *uint64 `json:"IsFollowVul,omitnil,omitempty" name:"IsFollowVul"`
}

func (r *DescribeVulHostTopRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeVulHostTopRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Top")
	delete(f, "VulCategory")
	delete(f, "IsFollowVul")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeVulHostTopRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeVulHostTopResponseParams struct {
	// 服务器风险top列表
	// 注意：此字段可能返回 null，表示取不到有效值。
	VulHostTopList []*VulHostTopInfo `json:"VulHostTopList,omitnil,omitempty" name:"VulHostTopList"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeVulHostTopResponse struct {
	*tchttp.BaseResponse
	Response *DescribeVulHostTopResponseParams `json:"Response"`
}

func (r *DescribeVulHostTopResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeVulHostTopResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeVulInfoCvssRequestParams struct {
	// 漏洞id
	VulId *uint64 `json:"VulId,omitnil,omitempty" name:"VulId"`
}

type DescribeVulInfoCvssRequest struct {
	*tchttp.BaseRequest
	
	// 漏洞id
	VulId *uint64 `json:"VulId,omitnil,omitempty" name:"VulId"`
}

func (r *DescribeVulInfoCvssRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeVulInfoCvssRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "VulId")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeVulInfoCvssRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeVulInfoCvssResponseParams struct {
	// 漏洞id
	// 注意：此字段可能返回 null，表示取不到有效值。
	VulId *uint64 `json:"VulId,omitnil,omitempty" name:"VulId"`

	// 漏洞名称
	// 注意：此字段可能返回 null，表示取不到有效值。
	VulName *string `json:"VulName,omitnil,omitempty" name:"VulName"`

	// 危害等级：1-低危；2-中危；3-高危；4-严重
	// 注意：此字段可能返回 null，表示取不到有效值。
	VulLevel *uint64 `json:"VulLevel,omitnil,omitempty" name:"VulLevel"`

	// 漏洞分类 1: web-cms漏洞 2:应用漏洞  4: Linux软件漏洞 5: Windows系统漏洞
	// 注意：此字段可能返回 null，表示取不到有效值。
	VulType *uint64 `json:"VulType,omitnil,omitempty" name:"VulType"`

	// 漏洞描述信息
	// 注意：此字段可能返回 null，表示取不到有效值。
	Description *string `json:"Description,omitnil,omitempty" name:"Description"`

	// 修复方案
	// 注意：此字段可能返回 null，表示取不到有效值。
	RepairPlan *string `json:"RepairPlan,omitnil,omitempty" name:"RepairPlan"`

	// 漏洞CVEID
	// 注意：此字段可能返回 null，表示取不到有效值。
	CveId *string `json:"CveId,omitnil,omitempty" name:"CveId"`

	// 参考链接
	// 注意：此字段可能返回 null，表示取不到有效值。
	Reference *string `json:"Reference,omitnil,omitempty" name:"Reference"`

	// CVSS信息
	// 注意：此字段可能返回 null，表示取不到有效值。
	CVSS *string `json:"CVSS,omitnil,omitempty" name:"CVSS"`

	// 发布时间
	// 注意：此字段可能返回 null，表示取不到有效值。
	PublicDate *string `json:"PublicDate,omitnil,omitempty" name:"PublicDate"`

	// Cvss分数
	// 注意：此字段可能返回 null，表示取不到有效值。
	CvssScore *uint64 `json:"CvssScore,omitnil,omitempty" name:"CvssScore"`

	// cvss详情
	// 注意：此字段可能返回 null，表示取不到有效值。
	CveInfo *string `json:"CveInfo,omitnil,omitempty" name:"CveInfo"`

	// cvss 分数 浮点型
	// 注意：此字段可能返回 null，表示取不到有效值。
	CvssScoreFloat *float64 `json:"CvssScoreFloat,omitnil,omitempty" name:"CvssScoreFloat"`

	// 漏洞标签 多个逗号分割
	// 注意：此字段可能返回 null，表示取不到有效值。
	Labels *string `json:"Labels,omitnil,omitempty" name:"Labels"`

	// 已防御的攻击次数
	// 注意：此字段可能返回 null，表示取不到有效值。
	DefenseAttackCount *uint64 `json:"DefenseAttackCount,omitnil,omitempty" name:"DefenseAttackCount"`

	// 全网修复成功次数, 不支持自动修复的漏洞默认返回0
	// 注意：此字段可能返回 null，表示取不到有效值。
	SuccessFixCount *uint64 `json:"SuccessFixCount,omitnil,omitempty" name:"SuccessFixCount"`

	// 修复是否支持：0-windows/linux均不支持修复 ;1-windows/linux 均支持修复 ;2-仅linux支持修复;3-仅windows支持修复
	// 注意：此字段可能返回 null，表示取不到有效值。
	FixSwitch *int64 `json:"FixSwitch,omitnil,omitempty" name:"FixSwitch"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeVulInfoCvssResponse struct {
	*tchttp.BaseResponse
	Response *DescribeVulInfoCvssResponseParams `json:"Response"`
}

func (r *DescribeVulInfoCvssResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeVulInfoCvssResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeVulLabelsRequestParams struct {

}

type DescribeVulLabelsRequest struct {
	*tchttp.BaseRequest
	
}

func (r *DescribeVulLabelsRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeVulLabelsRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeVulLabelsRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeVulLabelsResponseParams struct {
	// 标签列表
	List []*string `json:"List,omitnil,omitempty" name:"List"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeVulLabelsResponse struct {
	*tchttp.BaseResponse
	Response *DescribeVulLabelsResponseParams `json:"Response"`
}

func (r *DescribeVulLabelsResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeVulLabelsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeVulLevelCountRequestParams struct {
	// 1:web-cms 漏洞，2.应用漏洞 3:安全基线 4: Linux软件漏洞 5: windows系统漏洞 6:应急漏洞，不填或者填0时返回 1，2，4，5 的总统计数据
	VulCategory *uint64 `json:"VulCategory,omitnil,omitempty" name:"VulCategory"`

	// 是否仅统计重点关注漏洞 1=仅统计重点关注漏洞, 0=统计全部漏洞
	IsFollowVul *uint64 `json:"IsFollowVul,omitnil,omitempty" name:"IsFollowVul"`
}

type DescribeVulLevelCountRequest struct {
	*tchttp.BaseRequest
	
	// 1:web-cms 漏洞，2.应用漏洞 3:安全基线 4: Linux软件漏洞 5: windows系统漏洞 6:应急漏洞，不填或者填0时返回 1，2，4，5 的总统计数据
	VulCategory *uint64 `json:"VulCategory,omitnil,omitempty" name:"VulCategory"`

	// 是否仅统计重点关注漏洞 1=仅统计重点关注漏洞, 0=统计全部漏洞
	IsFollowVul *uint64 `json:"IsFollowVul,omitnil,omitempty" name:"IsFollowVul"`
}

func (r *DescribeVulLevelCountRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeVulLevelCountRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "VulCategory")
	delete(f, "IsFollowVul")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeVulLevelCountRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeVulLevelCountResponseParams struct {
	// 统计结果
	// 注意：此字段可能返回 null，表示取不到有效值。
	VulLevelList []*VulLevelInfo `json:"VulLevelList,omitnil,omitempty" name:"VulLevelList"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeVulLevelCountResponse struct {
	*tchttp.BaseResponse
	Response *DescribeVulLevelCountResponseParams `json:"Response"`
}

func (r *DescribeVulLevelCountResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeVulLevelCountResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeVulListRequestParams struct {
	// 返回数量，最大值为100。
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 过滤条件。
	// <li>Status - String - 是否必填：否 - 处理状态  0 -- 待处理 1 -- 已加白 2 -- 已删除 3 - 已忽略</li>
	// <li>ModifyTime - String - 是否必填：否 - 最近发生时间</li>
	// <li>Uuid- String - 是否必填：否 - 主机uuid查询</li>
	// <li>VulName- string -</li>
	// <li>VulCategory- string - 是否必填：否 - 漏洞类别 1: web-cms漏洞 2:应用漏洞  4: Linux软件漏洞 5: Windows系统漏洞</li>
	// <li>IsSupportDefense - int- 是否必填：否 - 是否支持防御 0:不支持 1:支持</li>
	// <li>Labels- string- 是否必填：否 - 标签搜索</li>
	// <li>IsSupportAutoFix- string- 是否必填：否 - 是否支持自动修复 0:不支持 1:支持</li>
	// <li>CvssScore- string- 是否必填：否 - CvssScore大于多少</li>
	// <li>AttackLevel- string- 是否必填：否 - 攻击热度大于多少</li>
	// 
	Filters []*Filters `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 可选排序字段 Level，LastTime，HostCount
	By *string `json:"By,omitnil,omitempty" name:"By"`

	// 排序顺序：desc  默认asc
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`
}

type DescribeVulListRequest struct {
	*tchttp.BaseRequest
	
	// 返回数量，最大值为100。
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 过滤条件。
	// <li>Status - String - 是否必填：否 - 处理状态  0 -- 待处理 1 -- 已加白 2 -- 已删除 3 - 已忽略</li>
	// <li>ModifyTime - String - 是否必填：否 - 最近发生时间</li>
	// <li>Uuid- String - 是否必填：否 - 主机uuid查询</li>
	// <li>VulName- string -</li>
	// <li>VulCategory- string - 是否必填：否 - 漏洞类别 1: web-cms漏洞 2:应用漏洞  4: Linux软件漏洞 5: Windows系统漏洞</li>
	// <li>IsSupportDefense - int- 是否必填：否 - 是否支持防御 0:不支持 1:支持</li>
	// <li>Labels- string- 是否必填：否 - 标签搜索</li>
	// <li>IsSupportAutoFix- string- 是否必填：否 - 是否支持自动修复 0:不支持 1:支持</li>
	// <li>CvssScore- string- 是否必填：否 - CvssScore大于多少</li>
	// <li>AttackLevel- string- 是否必填：否 - 攻击热度大于多少</li>
	// 
	Filters []*Filters `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 可选排序字段 Level，LastTime，HostCount
	By *string `json:"By,omitnil,omitempty" name:"By"`

	// 排序顺序：desc  默认asc
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`
}

func (r *DescribeVulListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeVulListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Limit")
	delete(f, "Offset")
	delete(f, "Filters")
	delete(f, "By")
	delete(f, "Order")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeVulListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeVulListResponseParams struct {
	// 漏洞列表
	// 注意：此字段可能返回 null，表示取不到有效值。
	VulInfoList []*VulInfoList `json:"VulInfoList,omitnil,omitempty" name:"VulInfoList"`

	// 漏洞总条数
	// 注意：此字段可能返回 null，表示取不到有效值。
	TotalCount *uint64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// 重点关注漏洞总数
	// 注意：此字段可能返回 null，表示取不到有效值。
	FollowVulCount *uint64 `json:"FollowVulCount,omitnil,omitempty" name:"FollowVulCount"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeVulListResponse struct {
	*tchttp.BaseResponse
	Response *DescribeVulListResponseParams `json:"Response"`
}

func (r *DescribeVulListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeVulListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeVulOverviewRequestParams struct {

}

type DescribeVulOverviewRequest struct {
	*tchttp.BaseRequest
	
}

func (r *DescribeVulOverviewRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeVulOverviewRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeVulOverviewRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeVulOverviewResponseParams struct {
	// 重点关注漏洞统计
	FollowVul *VulOverview `json:"FollowVul,omitnil,omitempty" name:"FollowVul"`

	// 全部漏洞统计
	AllVul *VulOverview `json:"AllVul,omitnil,omitempty" name:"AllVul"`

	// 影响主机统计
	EffectHost *VulOverview `json:"EffectHost,omitnil,omitempty" name:"EffectHost"`

	// 漏洞攻击事件（近1月）统计
	VulAttackEvent *VulOverview `json:"VulAttackEvent,omitnil,omitempty" name:"VulAttackEvent"`

	// 已防御攻击（近1月）统计
	VulDefenceEvent *VulOverview `json:"VulDefenceEvent,omitnil,omitempty" name:"VulDefenceEvent"`

	// 漏洞库统计
	VulStore *VulOverview `json:"VulStore,omitnil,omitempty" name:"VulStore"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeVulOverviewResponse struct {
	*tchttp.BaseResponse
	Response *DescribeVulOverviewResponseParams `json:"Response"`
}

func (r *DescribeVulOverviewResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeVulOverviewResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeVulStoreListRequestParams struct {
	// 
	// <li>VulName- string - 是否必填：否 - 漏洞名称</li>
	// <li>CveId- string - 是否必填：否 - cveid</li>
	// <li>VulCategory- string - 是否必填：否 - 漏洞分类  1 Web-CMS漏洞 ,2 应用漏洞 ,4 Linux软件漏洞,5 Windows系统漏洞</li>
	// <li>Method- string - 是否必填：否 - 检测方法 0版本对比,1 poc检测 </li>
	// <li>SupportDefense- string - 是否必填：否 - 是否支持防御 0不支持,1支持</li>
	// <li>FixSwitch- string - 是否必填：否 - 是否支持自动修复 0不支持,1支持</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 限制条数,默认10,最大100
	Limit *int64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量,默认0
	Offset *int64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 排序方式: [ASC:升序|DESC:降序]
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 可选排序列: [PublishDate]
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

type DescribeVulStoreListRequest struct {
	*tchttp.BaseRequest
	
	// 
	// <li>VulName- string - 是否必填：否 - 漏洞名称</li>
	// <li>CveId- string - 是否必填：否 - cveid</li>
	// <li>VulCategory- string - 是否必填：否 - 漏洞分类  1 Web-CMS漏洞 ,2 应用漏洞 ,4 Linux软件漏洞,5 Windows系统漏洞</li>
	// <li>Method- string - 是否必填：否 - 检测方法 0版本对比,1 poc检测 </li>
	// <li>SupportDefense- string - 是否必填：否 - 是否支持防御 0不支持,1支持</li>
	// <li>FixSwitch- string - 是否必填：否 - 是否支持自动修复 0不支持,1支持</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 限制条数,默认10,最大100
	Limit *int64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量,默认0
	Offset *int64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 排序方式: [ASC:升序|DESC:降序]
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 可选排序列: [PublishDate]
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

func (r *DescribeVulStoreListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeVulStoreListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Filters")
	delete(f, "Limit")
	delete(f, "Offset")
	delete(f, "Order")
	delete(f, "By")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeVulStoreListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeVulStoreListResponseParams struct {
	// 漏洞信息
	// 注意：此字段可能返回 null，表示取不到有效值。
	List []*VulStoreListInfo `json:"List,omitnil,omitempty" name:"List"`

	// 总数
	TotalCount *uint64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// 今日剩余搜索此时
	Remaining *uint64 `json:"Remaining,omitnil,omitempty" name:"Remaining"`

	// 免费搜索次数
	FreeSearchTimes *uint64 `json:"FreeSearchTimes,omitnil,omitempty" name:"FreeSearchTimes"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeVulStoreListResponse struct {
	*tchttp.BaseResponse
	Response *DescribeVulStoreListResponseParams `json:"Response"`
}

func (r *DescribeVulStoreListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeVulStoreListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeVulTopRequestParams struct {
	// 漏洞风险服务器top，1-100
	Top *uint64 `json:"Top,omitnil,omitempty" name:"Top"`

	// 1:web-cms 漏洞，2.应用漏洞 4: Linux软件漏洞 5: windows系统漏洞 6:应急漏洞，不填或者填0时返回 1，2，4，5 的总统计数据
	VulCategory *uint64 `json:"VulCategory,omitnil,omitempty" name:"VulCategory"`

	// 是否仅统计重点关注漏洞 1=仅统计重点关注漏洞, 0=统计全部漏洞
	IsFollowVul *uint64 `json:"IsFollowVul,omitnil,omitempty" name:"IsFollowVul"`
}

type DescribeVulTopRequest struct {
	*tchttp.BaseRequest
	
	// 漏洞风险服务器top，1-100
	Top *uint64 `json:"Top,omitnil,omitempty" name:"Top"`

	// 1:web-cms 漏洞，2.应用漏洞 4: Linux软件漏洞 5: windows系统漏洞 6:应急漏洞，不填或者填0时返回 1，2，4，5 的总统计数据
	VulCategory *uint64 `json:"VulCategory,omitnil,omitempty" name:"VulCategory"`

	// 是否仅统计重点关注漏洞 1=仅统计重点关注漏洞, 0=统计全部漏洞
	IsFollowVul *uint64 `json:"IsFollowVul,omitnil,omitempty" name:"IsFollowVul"`
}

func (r *DescribeVulTopRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeVulTopRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Top")
	delete(f, "VulCategory")
	delete(f, "IsFollowVul")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeVulTopRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeVulTopResponseParams struct {
	// 漏洞top列表
	// 注意：此字段可能返回 null，表示取不到有效值。
	VulTopList []*VulTopInfo `json:"VulTopList,omitnil,omitempty" name:"VulTopList"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeVulTopResponse struct {
	*tchttp.BaseResponse
	Response *DescribeVulTopResponseParams `json:"Response"`
}

func (r *DescribeVulTopResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeVulTopResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeVulTrendRequestParams struct {

}

type DescribeVulTrendRequest struct {
	*tchttp.BaseRequest
	
}

func (r *DescribeVulTrendRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeVulTrendRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeVulTrendRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeVulTrendResponseParams struct {
	// 近半年漏洞利用攻击事件数量
	VulEventCount *uint64 `json:"VulEventCount,omitnil,omitempty" name:"VulEventCount"`

	// 近半年新增漏洞利用攻击事件数量
	IncreaseVulEventCount *uint64 `json:"IncreaseVulEventCount,omitnil,omitempty" name:"IncreaseVulEventCount"`

	// 近半年热点攻击漏洞
	HotVulCount *uint64 `json:"HotVulCount,omitnil,omitempty" name:"HotVulCount"`

	// 近半年新增热点攻击漏洞
	IncreaseHotVulCount *uint64 `json:"IncreaseHotVulCount,omitnil,omitempty" name:"IncreaseHotVulCount"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeVulTrendResponse struct {
	*tchttp.BaseResponse
	Response *DescribeVulTrendResponseParams `json:"Response"`
}

func (r *DescribeVulTrendResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeVulTrendResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeWarningHostConfigRequestParams struct {
	// 告警类型
	Type *int64 `json:"Type,omitnil,omitempty" name:"Type"`

	// 分页单页限制数目, 0表示不分页
	Limit *int64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 分页的偏移量，默认值为0
	Offset *int64 `json:"Offset,omitnil,omitempty" name:"Offset"`
}

type DescribeWarningHostConfigRequest struct {
	*tchttp.BaseRequest
	
	// 告警类型
	Type *int64 `json:"Type,omitnil,omitempty" name:"Type"`

	// 分页单页限制数目, 0表示不分页
	Limit *int64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 分页的偏移量，默认值为0
	Offset *int64 `json:"Offset,omitnil,omitempty" name:"Offset"`
}

func (r *DescribeWarningHostConfigRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeWarningHostConfigRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Type")
	delete(f, "Limit")
	delete(f, "Offset")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeWarningHostConfigRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeWarningHostConfigResponseParams struct {
	// 告警主机范围类型，0:全部主机，1:按所属项目选，2:按腾讯云标签选，3:按主机安全标签选，4:自选主机
	HostRange *int64 `json:"HostRange,omitnil,omitempty" name:"HostRange"`

	// 项目或标签的名称列表，自选主机时为空
	// 注意：此字段可能返回 null，表示取不到有效值。
	ItemLabels []*string `json:"ItemLabels,omitnil,omitempty" name:"ItemLabels"`

	// 机器列表
	// 注意：此字段可能返回 null，表示取不到有效值。
	Quuids []*string `json:"Quuids,omitnil,omitempty" name:"Quuids"`

	// 机器列表总数量
	// 注意：此字段可能返回 null，表示取不到有效值。
	TotalCount *int64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// 项目或标签的id列表，自选主机时为空
	// 注意：此字段可能返回 null，表示取不到有效值。
	ItemLabelIds []*string `json:"ItemLabelIds,omitnil,omitempty" name:"ItemLabelIds"`

	// 需排除的机器列表
	ExcludedQuuids []*string `json:"ExcludedQuuids,omitnil,omitempty" name:"ExcludedQuuids"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeWarningHostConfigResponse struct {
	*tchttp.BaseResponse
	Response *DescribeWarningHostConfigResponseParams `json:"Response"`
}

func (r *DescribeWarningHostConfigResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeWarningHostConfigResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeWarningListRequestParams struct {

}

type DescribeWarningListRequest struct {
	*tchttp.BaseRequest
	
}

func (r *DescribeWarningListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeWarningListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeWarningListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeWarningListResponseParams struct {
	// 获取告警列表
	WarningInfoList []*WarningInfoObj `json:"WarningInfoList,omitnil,omitempty" name:"WarningInfoList"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeWarningListResponse struct {
	*tchttp.BaseResponse
	Response *DescribeWarningListResponseParams `json:"Response"`
}

func (r *DescribeWarningListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeWarningListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeWebHookPolicyRequestParams struct {
	// 过滤条件
	Filter []*Filter `json:"Filter,omitnil,omitempty" name:"Filter"`

	// 偏移量，默认为0。
	Offset *int64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 需要返回的数量，默认为10，最大值为100
	Limit *int64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 排序方式 [asc:升序|desc:降序]
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 排序字段
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

type DescribeWebHookPolicyRequest struct {
	*tchttp.BaseRequest
	
	// 过滤条件
	Filter []*Filter `json:"Filter,omitnil,omitempty" name:"Filter"`

	// 偏移量，默认为0。
	Offset *int64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 需要返回的数量，默认为10，最大值为100
	Limit *int64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 排序方式 [asc:升序|desc:降序]
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 排序字段
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

func (r *DescribeWebHookPolicyRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeWebHookPolicyRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Filter")
	delete(f, "Offset")
	delete(f, "Limit")
	delete(f, "Order")
	delete(f, "By")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeWebHookPolicyRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeWebHookPolicyResponseParams struct {
	// 策略列表
	// 注意：此字段可能返回 null，表示取不到有效值。
	List []*WebHookPolicy `json:"List,omitnil,omitempty" name:"List"`

	// 策略列表总数
	TotalCount *int64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeWebHookPolicyResponse struct {
	*tchttp.BaseResponse
	Response *DescribeWebHookPolicyResponseParams `json:"Response"`
}

func (r *DescribeWebHookPolicyResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeWebHookPolicyResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeWebHookReceiverRequestParams struct {
	// 过滤条件
	Filter []*Filter `json:"Filter,omitnil,omitempty" name:"Filter"`

	// 偏移量，默认为0。
	Offset *int64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 需要返回的数量，默认为10，最大值为100
	Limit *int64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 排序方式 [asc:升序|desc:降序]
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 排序字段
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

type DescribeWebHookReceiverRequest struct {
	*tchttp.BaseRequest
	
	// 过滤条件
	Filter []*Filter `json:"Filter,omitnil,omitempty" name:"Filter"`

	// 偏移量，默认为0。
	Offset *int64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 需要返回的数量，默认为10，最大值为100
	Limit *int64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 排序方式 [asc:升序|desc:降序]
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 排序字段
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

func (r *DescribeWebHookReceiverRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeWebHookReceiverRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Filter")
	delete(f, "Offset")
	delete(f, "Limit")
	delete(f, "Order")
	delete(f, "By")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeWebHookReceiverRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeWebHookReceiverResponseParams struct {
	// 告警接收人列表
	List []*WebHookReceiver `json:"List,omitnil,omitempty" name:"List"`

	// 个数
	TotalCount *int64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeWebHookReceiverResponse struct {
	*tchttp.BaseResponse
	Response *DescribeWebHookReceiverResponseParams `json:"Response"`
}

func (r *DescribeWebHookReceiverResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeWebHookReceiverResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeWebHookReceiverUsageRequestParams struct {
	// 告警接收人列表
	List []*WebHookReceiver `json:"List,omitnil,omitempty" name:"List"`
}

type DescribeWebHookReceiverUsageRequest struct {
	*tchttp.BaseRequest
	
	// 告警接收人列表
	List []*WebHookReceiver `json:"List,omitnil,omitempty" name:"List"`
}

func (r *DescribeWebHookReceiverUsageRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeWebHookReceiverUsageRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "List")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeWebHookReceiverUsageRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeWebHookReceiverUsageResponseParams struct {
	// 告警接收人的关联策略使用信息
	List []*WebHookReceiverUsage `json:"List,omitnil,omitempty" name:"List"`

	// 个数
	TotalCount *int64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeWebHookReceiverUsageResponse struct {
	*tchttp.BaseResponse
	Response *DescribeWebHookReceiverUsageResponseParams `json:"Response"`
}

func (r *DescribeWebHookReceiverUsageResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeWebHookReceiverUsageResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeWebHookRuleRequestParams struct {
	// 规则Id
	Id *int64 `json:"Id,omitnil,omitempty" name:"Id"`
}

type DescribeWebHookRuleRequest struct {
	*tchttp.BaseRequest
	
	// 规则Id
	Id *int64 `json:"Id,omitnil,omitempty" name:"Id"`
}

func (r *DescribeWebHookRuleRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeWebHookRuleRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Id")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeWebHookRuleRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeWebHookRuleResponseParams struct {
	// 规则内容
	Data *WebHookRuleDetail `json:"Data,omitnil,omitempty" name:"Data"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeWebHookRuleResponse struct {
	*tchttp.BaseResponse
	Response *DescribeWebHookRuleResponseParams `json:"Response"`
}

func (r *DescribeWebHookRuleResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeWebHookRuleResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeWebHookRulesRequestParams struct {
	// 过滤条件
	Filter []*Filter `json:"Filter,omitnil,omitempty" name:"Filter"`

	// 偏移量，默认为0。
	Offset *int64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 需要返回的数量，默认为10，最大值为100
	Limit *int64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 排序方式 [asc:升序|desc:降序]
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 排序字段
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

type DescribeWebHookRulesRequest struct {
	*tchttp.BaseRequest
	
	// 过滤条件
	Filter []*Filter `json:"Filter,omitnil,omitempty" name:"Filter"`

	// 偏移量，默认为0。
	Offset *int64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 需要返回的数量，默认为10，最大值为100
	Limit *int64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 排序方式 [asc:升序|desc:降序]
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 排序字段
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

func (r *DescribeWebHookRulesRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeWebHookRulesRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Filter")
	delete(f, "Offset")
	delete(f, "Limit")
	delete(f, "Order")
	delete(f, "By")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeWebHookRulesRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeWebHookRulesResponseParams struct {
	// 总数
	TotalCount *int64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// 规则内容
	List []*WebHookRuleSummary `json:"List,omitnil,omitempty" name:"List"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeWebHookRulesResponse struct {
	*tchttp.BaseResponse
	Response *DescribeWebHookRulesResponseParams `json:"Response"`
}

func (r *DescribeWebHookRulesResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeWebHookRulesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeWebPageEventListRequestParams struct {
	// 过滤条件
	// <li>IpOrAlias - String - 是否必填：否 - 主机ip或别名筛选</li>
	// <li>EventType - String - 是否必填：否 - 事件类型</li>
	// <li>EventStatus - String - 是否必填：否 - 事件状态</li>
	Filters []*AssetFilters `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 返回数量，默认为10，最大值为100。
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 排序方式：CreateTime 或 RestoreTime，默认为CreateTime
	By *string `json:"By,omitnil,omitempty" name:"By"`

	// 排序方式，0降序，1升序，默认为0
	Order *uint64 `json:"Order,omitnil,omitempty" name:"Order"`
}

type DescribeWebPageEventListRequest struct {
	*tchttp.BaseRequest
	
	// 过滤条件
	// <li>IpOrAlias - String - 是否必填：否 - 主机ip或别名筛选</li>
	// <li>EventType - String - 是否必填：否 - 事件类型</li>
	// <li>EventStatus - String - 是否必填：否 - 事件状态</li>
	Filters []*AssetFilters `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 返回数量，默认为10，最大值为100。
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 排序方式：CreateTime 或 RestoreTime，默认为CreateTime
	By *string `json:"By,omitnil,omitempty" name:"By"`

	// 排序方式，0降序，1升序，默认为0
	Order *uint64 `json:"Order,omitnil,omitempty" name:"Order"`
}

func (r *DescribeWebPageEventListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeWebPageEventListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Filters")
	delete(f, "Offset")
	delete(f, "Limit")
	delete(f, "By")
	delete(f, "Order")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeWebPageEventListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeWebPageEventListResponseParams struct {
	// 防护事件列表信息
	List []*ProtectEventLists `json:"List,omitnil,omitempty" name:"List"`

	// 总数
	TotalCount *uint64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeWebPageEventListResponse struct {
	*tchttp.BaseResponse
	Response *DescribeWebPageEventListResponseParams `json:"Response"`
}

func (r *DescribeWebPageEventListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeWebPageEventListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeWebPageGeneralizeRequestParams struct {

}

type DescribeWebPageGeneralizeRequest struct {
	*tchttp.BaseRequest
	
}

func (r *DescribeWebPageGeneralizeRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeWebPageGeneralizeRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeWebPageGeneralizeRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeWebPageGeneralizeResponseParams struct {
	// 防护监测 0 未开启 1 已开启 2 异常
	ProtectMonitor *uint64 `json:"ProtectMonitor,omitnil,omitempty" name:"ProtectMonitor"`

	// 防护目录数
	ProtectDirNum *uint64 `json:"ProtectDirNum,omitnil,omitempty" name:"ProtectDirNum"`

	// 防护文件数
	ProtectFileNum *uint64 `json:"ProtectFileNum,omitnil,omitempty" name:"ProtectFileNum"`

	// 篡改文件数
	TamperFileNum *uint64 `json:"TamperFileNum,omitnil,omitempty" name:"TamperFileNum"`

	// 篡改数
	TamperNum *uint64 `json:"TamperNum,omitnil,omitempty" name:"TamperNum"`

	// 今日防护数
	ProtectToday *uint64 `json:"ProtectToday,omitnil,omitempty" name:"ProtectToday"`

	// 防护主机数
	ProtectHostNum *uint64 `json:"ProtectHostNum,omitnil,omitempty" name:"ProtectHostNum"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeWebPageGeneralizeResponse struct {
	*tchttp.BaseResponse
	Response *DescribeWebPageGeneralizeResponseParams `json:"Response"`
}

func (r *DescribeWebPageGeneralizeResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeWebPageGeneralizeResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeWebPageProtectStatRequestParams struct {

}

type DescribeWebPageProtectStatRequest struct {
	*tchttp.BaseRequest
	
}

func (r *DescribeWebPageProtectStatRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeWebPageProtectStatRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeWebPageProtectStatRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeWebPageProtectStatResponseParams struct {
	// 文件篡改信息
	FileTamperNum []*ProtectStat `json:"FileTamperNum,omitnil,omitempty" name:"FileTamperNum"`

	// 防护文件分类信息
	ProtectFileType []*ProtectStat `json:"ProtectFileType,omitnil,omitempty" name:"ProtectFileType"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeWebPageProtectStatResponse struct {
	*tchttp.BaseResponse
	Response *DescribeWebPageProtectStatResponseParams `json:"Response"`
}

func (r *DescribeWebPageProtectStatResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeWebPageProtectStatResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeWebPageServiceInfoRequestParams struct {

}

type DescribeWebPageServiceInfoRequest struct {
	*tchttp.BaseRequest
	
}

func (r *DescribeWebPageServiceInfoRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeWebPageServiceInfoRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeWebPageServiceInfoRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeWebPageServiceInfoResponseParams struct {
	// 是否已购服务：true-是，false-否
	Status *bool `json:"Status,omitnil,omitempty" name:"Status"`

	// 已使用授权数
	UsedNum *uint64 `json:"UsedNum,omitnil,omitempty" name:"UsedNum"`

	// 剩余授权数
	ResidueNum *uint64 `json:"ResidueNum,omitnil,omitempty" name:"ResidueNum"`

	// 已购授权数
	BuyNum *uint64 `json:"BuyNum,omitnil,omitempty" name:"BuyNum"`

	// 临近到期数量
	ExpireNum *uint64 `json:"ExpireNum,omitnil,omitempty" name:"ExpireNum"`

	// 所有授权机器信息
	AllAuthorizedMachines []*ProtectMachineInfo `json:"AllAuthorizedMachines,omitnil,omitempty" name:"AllAuthorizedMachines"`

	// 临近到期授权机器信息
	ExpireAuthorizedMachines []*ProtectMachine `json:"ExpireAuthorizedMachines,omitnil,omitempty" name:"ExpireAuthorizedMachines"`

	// 已过期授权数
	ExpiredNum *uint64 `json:"ExpiredNum,omitnil,omitempty" name:"ExpiredNum"`

	// 防护目录数
	ProtectDirNum *uint64 `json:"ProtectDirNum,omitnil,omitempty" name:"ProtectDirNum"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeWebPageServiceInfoResponse struct {
	*tchttp.BaseResponse
	Response *DescribeWebPageServiceInfoResponseParams `json:"Response"`
}

func (r *DescribeWebPageServiceInfoResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeWebPageServiceInfoResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DestroyOrderRequestParams struct {
	// 资源ID
	ResourceId *string `json:"ResourceId,omitnil,omitempty" name:"ResourceId"`

	// 授权类型 0 专业版-按量计费, 1专业版-包年包月 , 2 旗舰版-包年包月
	LicenseType *uint64 `json:"LicenseType,omitnil,omitempty" name:"LicenseType"`
}

type DestroyOrderRequest struct {
	*tchttp.BaseRequest
	
	// 资源ID
	ResourceId *string `json:"ResourceId,omitnil,omitempty" name:"ResourceId"`

	// 授权类型 0 专业版-按量计费, 1专业版-包年包月 , 2 旗舰版-包年包月
	LicenseType *uint64 `json:"LicenseType,omitnil,omitempty" name:"LicenseType"`
}

func (r *DestroyOrderRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DestroyOrderRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "ResourceId")
	delete(f, "LicenseType")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DestroyOrderRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DestroyOrderResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DestroyOrderResponse struct {
	*tchttp.BaseResponse
	Response *DestroyOrderResponseParams `json:"Response"`
}

func (r *DestroyOrderResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DestroyOrderResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DuplicateHosts struct {
	// Quuid
	// 注意：此字段可能返回 null，表示取不到有效值。
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// Uuid
	// 注意：此字段可能返回 null，表示取不到有效值。
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// Id
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`
}

// Predefined struct for user
type EditBashRulesRequestParams struct {
	// 规则ID（新增时不填）
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`

	// 客户端ID数组
	Uuids []*string `json:"Uuids,omitnil,omitempty" name:"Uuids"`

	// 主机IP
	HostIp *string `json:"HostIp,omitnil,omitempty" name:"HostIp"`

	// 规则名称，编辑时不可修改规则名称
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// 危险等级(0:无，1: 高危 2:中危 3: 低危)
	Level *uint64 `json:"Level,omitnil,omitempty" name:"Level"`

	// 正则表达式 ，编辑时不可修改正则表达式，需要对内容QueryEscape后再base64
	Rule *string `json:"Rule,omitnil,omitempty" name:"Rule"`

	// 是否全局规则(默认否)：1-全局，0-非全局
	IsGlobal *uint64 `json:"IsGlobal,omitnil,omitempty" name:"IsGlobal"`

	// 0=黑名单， 1=白名单
	White *uint64 `json:"White,omitnil,omitempty" name:"White"`

	// 事件列表点击“加入白名单”时,需要传EventId 事件的id
	EventId *uint64 `json:"EventId,omitnil,omitempty" name:"EventId"`

	// 是否处理旧事件为白名单 0=不处理 1=处理
	DealOldEvents *uint64 `json:"DealOldEvents,omitnil,omitempty" name:"DealOldEvents"`

	// 策略描述
	Descript *string `json:"Descript,omitnil,omitempty" name:"Descript"`

	// 生效与否  0:不生效 1:生效
	Status *int64 `json:"Status,omitnil,omitempty" name:"Status"`

	// 0:告警  1:白名单  2:拦截
	BashAction *int64 `json:"BashAction,omitnil,omitempty" name:"BashAction"`

	// 生效范围（0:一组quuid 1:所有专业版 2:所有专业版+旗舰版 3:所有主机）
	Scope *int64 `json:"Scope,omitnil,omitempty" name:"Scope"`

	// 生效主机的QUUID集合
	Quuids []*string `json:"Quuids,omitnil,omitempty" name:"Quuids"`
}

type EditBashRulesRequest struct {
	*tchttp.BaseRequest
	
	// 规则ID（新增时不填）
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`

	// 客户端ID数组
	Uuids []*string `json:"Uuids,omitnil,omitempty" name:"Uuids"`

	// 主机IP
	HostIp *string `json:"HostIp,omitnil,omitempty" name:"HostIp"`

	// 规则名称，编辑时不可修改规则名称
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// 危险等级(0:无，1: 高危 2:中危 3: 低危)
	Level *uint64 `json:"Level,omitnil,omitempty" name:"Level"`

	// 正则表达式 ，编辑时不可修改正则表达式，需要对内容QueryEscape后再base64
	Rule *string `json:"Rule,omitnil,omitempty" name:"Rule"`

	// 是否全局规则(默认否)：1-全局，0-非全局
	IsGlobal *uint64 `json:"IsGlobal,omitnil,omitempty" name:"IsGlobal"`

	// 0=黑名单， 1=白名单
	White *uint64 `json:"White,omitnil,omitempty" name:"White"`

	// 事件列表点击“加入白名单”时,需要传EventId 事件的id
	EventId *uint64 `json:"EventId,omitnil,omitempty" name:"EventId"`

	// 是否处理旧事件为白名单 0=不处理 1=处理
	DealOldEvents *uint64 `json:"DealOldEvents,omitnil,omitempty" name:"DealOldEvents"`

	// 策略描述
	Descript *string `json:"Descript,omitnil,omitempty" name:"Descript"`

	// 生效与否  0:不生效 1:生效
	Status *int64 `json:"Status,omitnil,omitempty" name:"Status"`

	// 0:告警  1:白名单  2:拦截
	BashAction *int64 `json:"BashAction,omitnil,omitempty" name:"BashAction"`

	// 生效范围（0:一组quuid 1:所有专业版 2:所有专业版+旗舰版 3:所有主机）
	Scope *int64 `json:"Scope,omitnil,omitempty" name:"Scope"`

	// 生效主机的QUUID集合
	Quuids []*string `json:"Quuids,omitnil,omitempty" name:"Quuids"`
}

func (r *EditBashRulesRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *EditBashRulesRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Id")
	delete(f, "Uuids")
	delete(f, "HostIp")
	delete(f, "Name")
	delete(f, "Level")
	delete(f, "Rule")
	delete(f, "IsGlobal")
	delete(f, "White")
	delete(f, "EventId")
	delete(f, "DealOldEvents")
	delete(f, "Descript")
	delete(f, "Status")
	delete(f, "BashAction")
	delete(f, "Scope")
	delete(f, "Quuids")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "EditBashRulesRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type EditBashRulesResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type EditBashRulesResponse struct {
	*tchttp.BaseResponse
	Response *EditBashRulesResponseParams `json:"Response"`
}

func (r *EditBashRulesResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *EditBashRulesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type EditPrivilegeRulesRequestParams struct {
	// 规则ID(新增时请留空)
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`

	// 客户端ID数组
	Uuids []*string `json:"Uuids,omitnil,omitempty" name:"Uuids"`

	// 主机IP
	HostIp *string `json:"HostIp,omitnil,omitempty" name:"HostIp"`

	// 进程名
	ProcessName *string `json:"ProcessName,omitnil,omitempty" name:"ProcessName"`

	// 是否S权限进程
	SMode *uint64 `json:"SMode,omitnil,omitempty" name:"SMode"`

	// 是否全局规则(默认否)
	IsGlobal *uint64 `json:"IsGlobal,omitnil,omitempty" name:"IsGlobal"`

	// 事件列表和详情点击加白时关联的事件id (新增规则时请留空)
	EventId *uint64 `json:"EventId,omitnil,omitempty" name:"EventId"`
}

type EditPrivilegeRulesRequest struct {
	*tchttp.BaseRequest
	
	// 规则ID(新增时请留空)
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`

	// 客户端ID数组
	Uuids []*string `json:"Uuids,omitnil,omitempty" name:"Uuids"`

	// 主机IP
	HostIp *string `json:"HostIp,omitnil,omitempty" name:"HostIp"`

	// 进程名
	ProcessName *string `json:"ProcessName,omitnil,omitempty" name:"ProcessName"`

	// 是否S权限进程
	SMode *uint64 `json:"SMode,omitnil,omitempty" name:"SMode"`

	// 是否全局规则(默认否)
	IsGlobal *uint64 `json:"IsGlobal,omitnil,omitempty" name:"IsGlobal"`

	// 事件列表和详情点击加白时关联的事件id (新增规则时请留空)
	EventId *uint64 `json:"EventId,omitnil,omitempty" name:"EventId"`
}

func (r *EditPrivilegeRulesRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *EditPrivilegeRulesRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Id")
	delete(f, "Uuids")
	delete(f, "HostIp")
	delete(f, "ProcessName")
	delete(f, "SMode")
	delete(f, "IsGlobal")
	delete(f, "EventId")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "EditPrivilegeRulesRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type EditPrivilegeRulesResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type EditPrivilegeRulesResponse struct {
	*tchttp.BaseResponse
	Response *EditPrivilegeRulesResponseParams `json:"Response"`
}

func (r *EditPrivilegeRulesResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *EditPrivilegeRulesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type EditReverseShellRulesRequestParams struct {
	// 规则ID(新增时请留空)
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`

	// 客户端ID数组
	Uuids []*string `json:"Uuids,omitnil,omitempty" name:"Uuids"`

	// 主机IP
	HostIp *string `json:"HostIp,omitnil,omitempty" name:"HostIp"`

	// 目标IP
	DestIp *string `json:"DestIp,omitnil,omitempty" name:"DestIp"`

	// 目标端口
	DestPort *string `json:"DestPort,omitnil,omitempty" name:"DestPort"`

	// 进程名
	ProcessName *string `json:"ProcessName,omitnil,omitempty" name:"ProcessName"`

	// 是否全局规则(默认否)
	IsGlobal *uint64 `json:"IsGlobal,omitnil,omitempty" name:"IsGlobal"`

	// 事件列表和详情点击加白时关联的事件id (新增规则时请留空)
	EventId *uint64 `json:"EventId,omitnil,omitempty" name:"EventId"`
}

type EditReverseShellRulesRequest struct {
	*tchttp.BaseRequest
	
	// 规则ID(新增时请留空)
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`

	// 客户端ID数组
	Uuids []*string `json:"Uuids,omitnil,omitempty" name:"Uuids"`

	// 主机IP
	HostIp *string `json:"HostIp,omitnil,omitempty" name:"HostIp"`

	// 目标IP
	DestIp *string `json:"DestIp,omitnil,omitempty" name:"DestIp"`

	// 目标端口
	DestPort *string `json:"DestPort,omitnil,omitempty" name:"DestPort"`

	// 进程名
	ProcessName *string `json:"ProcessName,omitnil,omitempty" name:"ProcessName"`

	// 是否全局规则(默认否)
	IsGlobal *uint64 `json:"IsGlobal,omitnil,omitempty" name:"IsGlobal"`

	// 事件列表和详情点击加白时关联的事件id (新增规则时请留空)
	EventId *uint64 `json:"EventId,omitnil,omitempty" name:"EventId"`
}

func (r *EditReverseShellRulesRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *EditReverseShellRulesRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Id")
	delete(f, "Uuids")
	delete(f, "HostIp")
	delete(f, "DestIp")
	delete(f, "DestPort")
	delete(f, "ProcessName")
	delete(f, "IsGlobal")
	delete(f, "EventId")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "EditReverseShellRulesRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type EditReverseShellRulesResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type EditReverseShellRulesResponse struct {
	*tchttp.BaseResponse
	Response *EditReverseShellRulesResponseParams `json:"Response"`
}

func (r *EditReverseShellRulesResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *EditReverseShellRulesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type EditTagsRequestParams struct {
	// 标签名
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// 标签ID
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`

	// Quuid
	Quuids []*string `json:"Quuids,omitnil,omitempty" name:"Quuids"`
}

type EditTagsRequest struct {
	*tchttp.BaseRequest
	
	// 标签名
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// 标签ID
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`

	// Quuid
	Quuids []*string `json:"Quuids,omitnil,omitempty" name:"Quuids"`
}

func (r *EditTagsRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *EditTagsRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Name")
	delete(f, "Id")
	delete(f, "Quuids")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "EditTagsRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type EditTagsResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type EditTagsResponse struct {
	*tchttp.BaseResponse
	Response *EditTagsResponseParams `json:"Response"`
}

func (r *EditTagsResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *EditTagsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type EffectiveMachineInfo struct {
	// 机器名称
	// 注意：此字段可能返回 null，表示取不到有效值。
	MachineName *string `json:"MachineName,omitnil,omitempty" name:"MachineName"`

	// 机器公网ip
	// 注意：此字段可能返回 null，表示取不到有效值。
	MachinePublicIp *string `json:"MachinePublicIp,omitnil,omitempty" name:"MachinePublicIp"`

	// 机器内网ip
	// 注意：此字段可能返回 null，表示取不到有效值。
	MachinePrivateIp *string `json:"MachinePrivateIp,omitnil,omitempty" name:"MachinePrivateIp"`

	// 机器标签
	// 注意：此字段可能返回 null，表示取不到有效值。
	MachineTag []*MachineTag `json:"MachineTag,omitnil,omitempty" name:"MachineTag"`

	// 机器Quuid
	// 注意：此字段可能返回 null，表示取不到有效值。
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 云镜Uuid
	// 注意：此字段可能返回 null，表示取不到有效值。
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 内核版本号
	// 注意：此字段可能返回 null，表示取不到有效值。
	KernelVersion *string `json:"KernelVersion,omitnil,omitempty" name:"KernelVersion"`

	// 在线状态 OFFLINE，ONLINE
	// 注意：此字段可能返回 null，表示取不到有效值。
	MachineStatus *string `json:"MachineStatus,omitnil,omitempty" name:"MachineStatus"`

	// 授权订单对象
	// 注意：此字段可能返回 null，表示取不到有效值。
	LicenseOrder *LicenseOrder `json:"LicenseOrder,omitnil,omitempty" name:"LicenseOrder"`

	// 漏洞数量
	// 注意：此字段可能返回 null，表示取不到有效值。
	VulNum *uint64 `json:"VulNum,omitnil,omitempty" name:"VulNum"`

	// 云标签信息
	// 注意：此字段可能返回 null，表示取不到有效值。
	CloudTags []*Tags `json:"CloudTags,omitnil,omitempty" name:"CloudTags"`

	// 机器instance ID
	// 注意：此字段可能返回 null，表示取不到有效值。
	InstanceID *string `json:"InstanceID,omitnil,omitempty" name:"InstanceID"`
}

type EmergencyResponseInfo struct {
	// 任务id
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// 主机个数
	HostNum *uint64 `json:"HostNum,omitnil,omitempty" name:"HostNum"`

	// 服务状态 0未启动，·响应中，2响应完成
	Status *uint64 `json:"Status,omitnil,omitempty" name:"Status"`

	// 服务开始时间
	StartTime *string `json:"StartTime,omitnil,omitempty" name:"StartTime"`

	// 服务结束时间
	EndTime *string `json:"EndTime,omitnil,omitempty" name:"EndTime"`

	// 报告下载地址
	ReportPath *string `json:"ReportPath,omitnil,omitempty" name:"ReportPath"`
}

type EmergencyVul struct {
	// 漏洞id
	VulId *uint64 `json:"VulId,omitnil,omitempty" name:"VulId"`

	// 漏洞级别
	Level *uint64 `json:"Level,omitnil,omitempty" name:"Level"`

	// 漏洞名称
	VulName *string `json:"VulName,omitnil,omitempty" name:"VulName"`

	// 发布日期
	PublishDate *string `json:"PublishDate,omitnil,omitempty" name:"PublishDate"`

	// 漏洞分类
	Category *uint64 `json:"Category,omitnil,omitempty" name:"Category"`

	// 漏洞状态 0未检测 1有风险 ，2无风险 ，3 检查中展示progress
	Status *uint64 `json:"Status,omitnil,omitempty" name:"Status"`

	// 最后扫描时间
	LastScanTime *string `json:"LastScanTime,omitnil,omitempty" name:"LastScanTime"`

	// 扫描进度
	Progress *uint64 `json:"Progress,omitnil,omitempty" name:"Progress"`

	// cve编号
	// 注意：此字段可能返回 null，表示取不到有效值。
	CveId *string `json:"CveId,omitnil,omitempty" name:"CveId"`

	// CVSS评分
	// 注意：此字段可能返回 null，表示取不到有效值。
	CvssScore *float64 `json:"CvssScore,omitnil,omitempty" name:"CvssScore"`

	// 漏洞标签 多个逗号分割
	// 注意：此字段可能返回 null，表示取不到有效值。
	Labels *string `json:"Labels,omitnil,omitempty" name:"Labels"`

	// 影响机器数
	// 注意：此字段可能返回 null，表示取不到有效值。
	HostCount *uint64 `json:"HostCount,omitnil,omitempty" name:"HostCount"`

	// 是否支持防御， 0:不支持 1:支持
	// 注意：此字段可能返回 null，表示取不到有效值。
	IsSupportDefense *uint64 `json:"IsSupportDefense,omitnil,omitempty" name:"IsSupportDefense"`

	// 已防御的攻击次数
	// 注意：此字段可能返回 null，表示取不到有效值。
	DefenseAttackCount *uint64 `json:"DefenseAttackCount,omitnil,omitempty" name:"DefenseAttackCount"`

	// 检测规则 0 - 版本比对, 1 - POC验证
	// 注意：此字段可能返回 null，表示取不到有效值。
	Method *uint64 `json:"Method,omitnil,omitempty" name:"Method"`

	// 攻击热度级别
	// 注意：此字段可能返回 null，表示取不到有效值。
	AttackLevel *uint64 `json:"AttackLevel,omitnil,omitempty" name:"AttackLevel"`

	// 是否有漏洞主机开启漏洞防御
	// 注意：此字段可能返回 null，表示取不到有效值。
	DefenseState *bool `json:"DefenseState,omitnil,omitempty" name:"DefenseState"`
}

type EventStat struct {
	// 事件数
	EventsNum *uint64 `json:"EventsNum,omitnil,omitempty" name:"EventsNum"`

	// 受影响的主机数
	MachineAffectNum *uint64 `json:"MachineAffectNum,omitnil,omitempty" name:"MachineAffectNum"`
}

type ExpertServiceOrderInfo struct {
	// 订单id
	OrderId *uint64 `json:"OrderId,omitnil,omitempty" name:"OrderId"`

	// 订单类型 1应急 2 旗舰重保 3 安全管家
	InquireType *uint64 `json:"InquireType,omitnil,omitempty" name:"InquireType"`

	// 服务数量
	InquireNum *uint64 `json:"InquireNum,omitnil,omitempty" name:"InquireNum"`

	// 服务开始时间
	BeginTime *string `json:"BeginTime,omitnil,omitempty" name:"BeginTime"`

	// 服务结束时间
	EndTime *string `json:"EndTime,omitnil,omitempty" name:"EndTime"`

	// 服务时长几个月
	ServiceTime *uint64 `json:"ServiceTime,omitnil,omitempty" name:"ServiceTime"`

	// 订单状态 0 未启动 1 服务中 2已过期 3完成，4退费销毁
	Status *uint64 `json:"Status,omitnil,omitempty" name:"Status"`
}

// Predefined struct for user
type ExportAssetAppListRequestParams struct {
	// 查询指定Quuid主机的信息
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 过滤条件。<li>AppName- string - 是否必填：否 - 应用名搜索</li><li>IP - String - 是否必填：否 - 主机ip</li><li>MachineName - String - 是否必填：否 - 主机名称</li><li>InstanceID - string - 是否必填：否 - 实例ID</li><li>Type - int - 是否必填：否 - 类型	: 仅linux0: 全部1: 运维2 : 数据库3 : 安全4 : 可疑应用5 : 系统架构6 : 系统应用7 : WEB服务99:其他</li><li>OsType - uint64 - 是否必填：否 - Windows/Linux</li>
	Filters []*AssetFilters `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 排序方式，asc升序 或 desc降序
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 排序方式：[FirstTime|ProcessCount]
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

type ExportAssetAppListRequest struct {
	*tchttp.BaseRequest
	
	// 查询指定Quuid主机的信息
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 过滤条件。<li>AppName- string - 是否必填：否 - 应用名搜索</li><li>IP - String - 是否必填：否 - 主机ip</li><li>MachineName - String - 是否必填：否 - 主机名称</li><li>InstanceID - string - 是否必填：否 - 实例ID</li><li>Type - int - 是否必填：否 - 类型	: 仅linux0: 全部1: 运维2 : 数据库3 : 安全4 : 可疑应用5 : 系统架构6 : 系统应用7 : WEB服务99:其他</li><li>OsType - uint64 - 是否必填：否 - Windows/Linux</li>
	Filters []*AssetFilters `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 排序方式，asc升序 或 desc降序
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 排序方式：[FirstTime|ProcessCount]
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

func (r *ExportAssetAppListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportAssetAppListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Quuid")
	delete(f, "Filters")
	delete(f, "Order")
	delete(f, "By")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ExportAssetAppListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportAssetAppListResponseParams struct {
	// 异步下载任务ID，需要配合ExportTasks接口使用
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ExportAssetAppListResponse struct {
	*tchttp.BaseResponse
	Response *ExportAssetAppListResponseParams `json:"Response"`
}

func (r *ExportAssetAppListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportAssetAppListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportAssetCoreModuleListRequestParams struct {
	// 服务器Uuid
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 服务器Quuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 过滤条件。
	// <li>Name- string - 是否必填：否 - 包名</li>
	// <li>User- string - 是否必填：否 - 用户名</li>
	Filters []*AssetFilters `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 排序方式，asc升序 或 desc降序
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 排序依据[FirstTime|Size|ProcessCount|ModuleCount]
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

type ExportAssetCoreModuleListRequest struct {
	*tchttp.BaseRequest
	
	// 服务器Uuid
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 服务器Quuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 过滤条件。
	// <li>Name- string - 是否必填：否 - 包名</li>
	// <li>User- string - 是否必填：否 - 用户名</li>
	Filters []*AssetFilters `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 排序方式，asc升序 或 desc降序
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 排序依据[FirstTime|Size|ProcessCount|ModuleCount]
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

func (r *ExportAssetCoreModuleListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportAssetCoreModuleListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Uuid")
	delete(f, "Quuid")
	delete(f, "Filters")
	delete(f, "Order")
	delete(f, "By")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ExportAssetCoreModuleListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportAssetCoreModuleListResponseParams struct {
	// 异步下载任务ID，需要配合ExportTasks接口使用
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ExportAssetCoreModuleListResponse struct {
	*tchttp.BaseResponse
	Response *ExportAssetCoreModuleListResponseParams `json:"Response"`
}

func (r *ExportAssetCoreModuleListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportAssetCoreModuleListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportAssetDatabaseListRequestParams struct {
	// 过滤条件。
	// <li>User- string - 是否必填：否 - 运行用户</li>
	// <li>Ip - String - 是否必填：否 - 绑定IP</li>
	// <li>Port - Int - 是否必填：否 - 端口</li>
	// <li>Name - Int - 是否必填：否 - 数据库名称
	// 0:全部
	// 1:MySQL
	// 2:Redis
	// 3:Oracle
	// 4:MongoDB
	// 5:MemCache
	// 6:PostgreSQL
	// 7:HBase
	// 8:DB2
	// 9:Sybase
	// 10:TiDB</li>
	// <li>Proto - String - 是否必填：否 - 协议：1:TCP, 2:UDP, 3:未知</li>
	// <li>OsType - String - 是否必填：否 - 操作系统: linux/windows</li>
	Filters []*AssetFilters `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 查询指定Quuid主机的信息
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 排序方式，asc升序 或 desc降序
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 排序方式：[FirstTime]
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

type ExportAssetDatabaseListRequest struct {
	*tchttp.BaseRequest
	
	// 过滤条件。
	// <li>User- string - 是否必填：否 - 运行用户</li>
	// <li>Ip - String - 是否必填：否 - 绑定IP</li>
	// <li>Port - Int - 是否必填：否 - 端口</li>
	// <li>Name - Int - 是否必填：否 - 数据库名称
	// 0:全部
	// 1:MySQL
	// 2:Redis
	// 3:Oracle
	// 4:MongoDB
	// 5:MemCache
	// 6:PostgreSQL
	// 7:HBase
	// 8:DB2
	// 9:Sybase
	// 10:TiDB</li>
	// <li>Proto - String - 是否必填：否 - 协议：1:TCP, 2:UDP, 3:未知</li>
	// <li>OsType - String - 是否必填：否 - 操作系统: linux/windows</li>
	Filters []*AssetFilters `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 查询指定Quuid主机的信息
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 排序方式，asc升序 或 desc降序
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 排序方式：[FirstTime]
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

func (r *ExportAssetDatabaseListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportAssetDatabaseListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Filters")
	delete(f, "Quuid")
	delete(f, "Order")
	delete(f, "By")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ExportAssetDatabaseListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportAssetDatabaseListResponseParams struct {
	// 异步下载任务ID，需要配合ExportTasks接口使用
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ExportAssetDatabaseListResponse struct {
	*tchttp.BaseResponse
	Response *ExportAssetDatabaseListResponseParams `json:"Response"`
}

func (r *ExportAssetDatabaseListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportAssetDatabaseListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportAssetEnvListRequestParams struct {
	// 服务器Uuid
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 服务器Quuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 过滤条件。
	// <li>Name- string - 是否必填：否 - 环境变量名</li>
	// <li>Type- int - 是否必填：否 - 类型：0用户变量，1系统变量</li>
	Filters []*AssetFilters `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 排序方式，asc升序 或 desc降序
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 排序方式：[FirstTime]
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

type ExportAssetEnvListRequest struct {
	*tchttp.BaseRequest
	
	// 服务器Uuid
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 服务器Quuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 过滤条件。
	// <li>Name- string - 是否必填：否 - 环境变量名</li>
	// <li>Type- int - 是否必填：否 - 类型：0用户变量，1系统变量</li>
	Filters []*AssetFilters `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 排序方式，asc升序 或 desc降序
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 排序方式：[FirstTime]
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

func (r *ExportAssetEnvListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportAssetEnvListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Uuid")
	delete(f, "Quuid")
	delete(f, "Filters")
	delete(f, "Order")
	delete(f, "By")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ExportAssetEnvListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportAssetEnvListResponseParams struct {
	// 异步下载任务ID，需要配合ExportTasks接口使用
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ExportAssetEnvListResponse struct {
	*tchttp.BaseResponse
	Response *ExportAssetEnvListResponseParams `json:"Response"`
}

func (r *ExportAssetEnvListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportAssetEnvListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportAssetInitServiceListRequestParams struct {
	// 服务器Uuid
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 服务器Quuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 过滤条件。
	// <li>Name- string - 是否必填：否 - 包名</li>
	// <li>User- string - 是否必填：否 - 用户</li>
	// <li>Status- string - 是否必填：否 - 默认启用状态：0未启用， 1启用 仅linux</li>
	// <li>Type- string - 是否必填：否 - 类型：类型 仅windows：
	// 1:编码器
	// 2:IE插件
	// 3:网络提供者
	// 4:镜像劫持
	// 5:LSA提供者
	// 6:KnownDLLs
	// 7:启动执行
	// 8:WMI
	// 9:计划任务
	// 10:Winsock提供者
	// 11:打印监控器
	// 12:资源管理器
	// 13:驱动服务
	// 14:登录</li>
	Filters []*AssetFilters `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 排序方式，asc升序 或 desc降序
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 排序方式：[FirstTime]
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

type ExportAssetInitServiceListRequest struct {
	*tchttp.BaseRequest
	
	// 服务器Uuid
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 服务器Quuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 过滤条件。
	// <li>Name- string - 是否必填：否 - 包名</li>
	// <li>User- string - 是否必填：否 - 用户</li>
	// <li>Status- string - 是否必填：否 - 默认启用状态：0未启用， 1启用 仅linux</li>
	// <li>Type- string - 是否必填：否 - 类型：类型 仅windows：
	// 1:编码器
	// 2:IE插件
	// 3:网络提供者
	// 4:镜像劫持
	// 5:LSA提供者
	// 6:KnownDLLs
	// 7:启动执行
	// 8:WMI
	// 9:计划任务
	// 10:Winsock提供者
	// 11:打印监控器
	// 12:资源管理器
	// 13:驱动服务
	// 14:登录</li>
	Filters []*AssetFilters `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 排序方式，asc升序 或 desc降序
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 排序方式：[FirstTime]
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

func (r *ExportAssetInitServiceListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportAssetInitServiceListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Uuid")
	delete(f, "Quuid")
	delete(f, "Filters")
	delete(f, "Order")
	delete(f, "By")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ExportAssetInitServiceListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportAssetInitServiceListResponseParams struct {
	// 异步下载任务ID，需要配合ExportTasks接口使用
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ExportAssetInitServiceListResponse struct {
	*tchttp.BaseResponse
	Response *ExportAssetInitServiceListResponseParams `json:"Response"`
}

func (r *ExportAssetInitServiceListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportAssetInitServiceListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportAssetJarListRequestParams struct {
	// 过滤条件。
	// <li>Name- string - 是否必填：否 - 包名</li>
	// <li>Type- uint - 是否必填：否 - 类型	
	// 1: 应用程序
	// 2 : 系统类库
	// 3 : Web服务自带库
	// 4 : 其他依赖包</li>
	// <li>Status- string - 是否必填：否 - 是否可执行：0否，1是</li>
	Filters []*AssetFilters `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 服务器Uuid
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 服务器Quuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 排序方式，asc升序 或 desc降序
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 排序方式：[FirstTime]
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

type ExportAssetJarListRequest struct {
	*tchttp.BaseRequest
	
	// 过滤条件。
	// <li>Name- string - 是否必填：否 - 包名</li>
	// <li>Type- uint - 是否必填：否 - 类型	
	// 1: 应用程序
	// 2 : 系统类库
	// 3 : Web服务自带库
	// 4 : 其他依赖包</li>
	// <li>Status- string - 是否必填：否 - 是否可执行：0否，1是</li>
	Filters []*AssetFilters `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 服务器Uuid
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 服务器Quuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 排序方式，asc升序 或 desc降序
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 排序方式：[FirstTime]
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

func (r *ExportAssetJarListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportAssetJarListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Filters")
	delete(f, "Uuid")
	delete(f, "Quuid")
	delete(f, "Order")
	delete(f, "By")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ExportAssetJarListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportAssetJarListResponseParams struct {
	// 异步下载任务ID，需要配合ExportTasks接口使用
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ExportAssetJarListResponse struct {
	*tchttp.BaseResponse
	Response *ExportAssetJarListResponseParams `json:"Response"`
}

func (r *ExportAssetJarListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportAssetJarListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportAssetMachineDetailRequestParams struct {
	// 服务器Quuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 服务器Uuid
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`
}

type ExportAssetMachineDetailRequest struct {
	*tchttp.BaseRequest
	
	// 服务器Quuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 服务器Uuid
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`
}

func (r *ExportAssetMachineDetailRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportAssetMachineDetailRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Quuid")
	delete(f, "Uuid")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ExportAssetMachineDetailRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportAssetMachineDetailResponseParams struct {
	// 下载地址
	DownloadUrl *string `json:"DownloadUrl,omitnil,omitempty" name:"DownloadUrl"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ExportAssetMachineDetailResponse struct {
	*tchttp.BaseResponse
	Response *ExportAssetMachineDetailResponseParams `json:"Response"`
}

func (r *ExportAssetMachineDetailResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportAssetMachineDetailResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportAssetMachineListRequestParams struct {
	// 过滤条件。
	// <li>IP - String - 是否必填：否 - 主机ip</li>
	// <li>MachineName - String - 是否必填：否 - 主机名称</li>
	// <li>InstanceID - string - 是否必填：否 - 实例ID</li>
	// <li>OsType - String - 是否必填：否 - windows或linux</li>
	// <li>CpuLoad - Int - 是否必填：否 - 
	// 0: 0%或未知  1: 0%～20%
	// 2: 20%～50%  3: 50%～80%
	// 4: 80%～100%</li>
	// <li>DiskLoad - Int - 是否必填：否 - 
	// 0: 0%或未知  1: 0%～20%
	// 2: 20%～50%  3: 50%～80%
	// 4: 80%～100%</li>
	// <li>MemLoad - Int - 是否必填：否 - 
	// 0: 0%或未知  1: 0%～20%
	// 2: 20%～50%  3: 50%～80%
	// 4: 80%～100%</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 排序方式，asc升序 或 desc降序
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 可选排序[FirstTime|PartitionCount]
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

type ExportAssetMachineListRequest struct {
	*tchttp.BaseRequest
	
	// 过滤条件。
	// <li>IP - String - 是否必填：否 - 主机ip</li>
	// <li>MachineName - String - 是否必填：否 - 主机名称</li>
	// <li>InstanceID - string - 是否必填：否 - 实例ID</li>
	// <li>OsType - String - 是否必填：否 - windows或linux</li>
	// <li>CpuLoad - Int - 是否必填：否 - 
	// 0: 0%或未知  1: 0%～20%
	// 2: 20%～50%  3: 50%～80%
	// 4: 80%～100%</li>
	// <li>DiskLoad - Int - 是否必填：否 - 
	// 0: 0%或未知  1: 0%～20%
	// 2: 20%～50%  3: 50%～80%
	// 4: 80%～100%</li>
	// <li>MemLoad - Int - 是否必填：否 - 
	// 0: 0%或未知  1: 0%～20%
	// 2: 20%～50%  3: 50%～80%
	// 4: 80%～100%</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 排序方式，asc升序 或 desc降序
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 可选排序[FirstTime|PartitionCount]
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

func (r *ExportAssetMachineListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportAssetMachineListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Filters")
	delete(f, "Order")
	delete(f, "By")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ExportAssetMachineListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportAssetMachineListResponseParams struct {
	// 异步下载任务ID，需要配合ExportTasks接口使用
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ExportAssetMachineListResponse struct {
	*tchttp.BaseResponse
	Response *ExportAssetMachineListResponseParams `json:"Response"`
}

func (r *ExportAssetMachineListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportAssetMachineListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportAssetPlanTaskListRequestParams struct {
	// 服务器Uuid
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 服务器Quuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 过滤条件。
	// <li>User- string - 是否必填：否 - 用户</li>
	// <li>Status- int - 是否必填：否 - 默认启用状态：0未启用， 1启用 </li>
	Filters []*AssetFilters `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 排序方式，asc升序 或 desc降序
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 排序方式：[FirstTime]
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

type ExportAssetPlanTaskListRequest struct {
	*tchttp.BaseRequest
	
	// 服务器Uuid
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 服务器Quuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 过滤条件。
	// <li>User- string - 是否必填：否 - 用户</li>
	// <li>Status- int - 是否必填：否 - 默认启用状态：0未启用， 1启用 </li>
	Filters []*AssetFilters `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 排序方式，asc升序 或 desc降序
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 排序方式：[FirstTime]
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

func (r *ExportAssetPlanTaskListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportAssetPlanTaskListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Uuid")
	delete(f, "Quuid")
	delete(f, "Filters")
	delete(f, "Order")
	delete(f, "By")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ExportAssetPlanTaskListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportAssetPlanTaskListResponseParams struct {
	// 异步下载任务ID，需要配合ExportTasks接口使用
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ExportAssetPlanTaskListResponse struct {
	*tchttp.BaseResponse
	Response *ExportAssetPlanTaskListResponseParams `json:"Response"`
}

func (r *ExportAssetPlanTaskListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportAssetPlanTaskListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportAssetPortInfoListRequestParams struct {
	// 查询指定Quuid主机的信息
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 过滤条件。
	// <li>Port - uint64 - 是否必填：否 - 端口</li>
	// <li>Ip - String - 是否必填：否 - 绑定IP</li>
	// <li>ProcessName - String - 是否必填：否 - 监听进程</li>
	// <li>Pid - uint64 - 是否必填：否 - PID</li>
	// <li>User - String - 是否必填：否 - 运行用户</li>
	// <li>Group - String - 是否必填：否 - 所属用户组</li>
	// <li>Ppid - uint64 - 是否必填：否 - PPID</li>
	// <li>Proto - string - 是否必填：否 - tcp/udp或“”(空字符串筛选未知状态)</li>
	// <li>OsType - uint64 - 是否必填：否 - windows/linux</li>
	// <li>RunTimeStart - String - 是否必填：否 - 运行开始时间</li>
	// <li>RunTimeEnd - String - 是否必填：否 - 运行结束时间</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 排序方式，asc升序 或 desc降序
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 排序方式：[FirstTime|StartTime]
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

type ExportAssetPortInfoListRequest struct {
	*tchttp.BaseRequest
	
	// 查询指定Quuid主机的信息
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 过滤条件。
	// <li>Port - uint64 - 是否必填：否 - 端口</li>
	// <li>Ip - String - 是否必填：否 - 绑定IP</li>
	// <li>ProcessName - String - 是否必填：否 - 监听进程</li>
	// <li>Pid - uint64 - 是否必填：否 - PID</li>
	// <li>User - String - 是否必填：否 - 运行用户</li>
	// <li>Group - String - 是否必填：否 - 所属用户组</li>
	// <li>Ppid - uint64 - 是否必填：否 - PPID</li>
	// <li>Proto - string - 是否必填：否 - tcp/udp或“”(空字符串筛选未知状态)</li>
	// <li>OsType - uint64 - 是否必填：否 - windows/linux</li>
	// <li>RunTimeStart - String - 是否必填：否 - 运行开始时间</li>
	// <li>RunTimeEnd - String - 是否必填：否 - 运行结束时间</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 排序方式，asc升序 或 desc降序
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 排序方式：[FirstTime|StartTime]
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

func (r *ExportAssetPortInfoListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportAssetPortInfoListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Quuid")
	delete(f, "Filters")
	delete(f, "Order")
	delete(f, "By")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ExportAssetPortInfoListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportAssetPortInfoListResponseParams struct {
	// 异步下载任务ID，需要配合ExportTasks接口使用
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ExportAssetPortInfoListResponse struct {
	*tchttp.BaseResponse
	Response *ExportAssetPortInfoListResponseParams `json:"Response"`
}

func (r *ExportAssetPortInfoListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportAssetPortInfoListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportAssetProcessInfoListRequestParams struct {
	// 查询指定Quuid主机的信息
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 过滤条件。
	// <li>Name - String - 是否必填：否 - 进程名</li>
	// <li>User - String - 是否必填：否 - 进程用户</li>
	// <li>Group - String - 是否必填：否 - 进程用户组</li>
	// <li>Pid - uint64 - 是否必填：否 - 进程ID</li>
	// <li>Ppid - uint64 - 是否必填：否 - 父进程ID</li>
	// <li>OsType - uint64 - 是否必填：否 - windows/linux</li>
	// <li>Status - string - 是否必填：否 - 进程状态：
	// 0:全部
	// 1:R 可执行
	// 2:S 可中断
	// 3:不可中断</li>
	// <li>RunTimeStart - String - 是否必填：否 - 运行开始时间</li>
	// <li>RunTimeEnd - String - 是否必填：否 - 运行结束时间</li>
	// <li>InstallByPackage - uint64 - 是否必填：否 - 是否包安装：0否，1是</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 排序方式，asc升序 或 desc降序
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 排序方式：[FirstTime|StartTime]
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

type ExportAssetProcessInfoListRequest struct {
	*tchttp.BaseRequest
	
	// 查询指定Quuid主机的信息
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 过滤条件。
	// <li>Name - String - 是否必填：否 - 进程名</li>
	// <li>User - String - 是否必填：否 - 进程用户</li>
	// <li>Group - String - 是否必填：否 - 进程用户组</li>
	// <li>Pid - uint64 - 是否必填：否 - 进程ID</li>
	// <li>Ppid - uint64 - 是否必填：否 - 父进程ID</li>
	// <li>OsType - uint64 - 是否必填：否 - windows/linux</li>
	// <li>Status - string - 是否必填：否 - 进程状态：
	// 0:全部
	// 1:R 可执行
	// 2:S 可中断
	// 3:不可中断</li>
	// <li>RunTimeStart - String - 是否必填：否 - 运行开始时间</li>
	// <li>RunTimeEnd - String - 是否必填：否 - 运行结束时间</li>
	// <li>InstallByPackage - uint64 - 是否必填：否 - 是否包安装：0否，1是</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 排序方式，asc升序 或 desc降序
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 排序方式：[FirstTime|StartTime]
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

func (r *ExportAssetProcessInfoListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportAssetProcessInfoListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Quuid")
	delete(f, "Filters")
	delete(f, "Order")
	delete(f, "By")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ExportAssetProcessInfoListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportAssetProcessInfoListResponseParams struct {
	// 异步下载任务ID，需要配合ExportTasks接口使用
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ExportAssetProcessInfoListResponse struct {
	*tchttp.BaseResponse
	Response *ExportAssetProcessInfoListResponseParams `json:"Response"`
}

func (r *ExportAssetProcessInfoListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportAssetProcessInfoListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportAssetRecentMachineInfoRequestParams struct {
	// 开始时间。
	BeginDate *string `json:"BeginDate,omitnil,omitempty" name:"BeginDate"`

	// 结束时间。
	EndDate *string `json:"EndDate,omitnil,omitempty" name:"EndDate"`
}

type ExportAssetRecentMachineInfoRequest struct {
	*tchttp.BaseRequest
	
	// 开始时间。
	BeginDate *string `json:"BeginDate,omitnil,omitempty" name:"BeginDate"`

	// 结束时间。
	EndDate *string `json:"EndDate,omitnil,omitempty" name:"EndDate"`
}

func (r *ExportAssetRecentMachineInfoRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportAssetRecentMachineInfoRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "BeginDate")
	delete(f, "EndDate")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ExportAssetRecentMachineInfoRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportAssetRecentMachineInfoResponseParams struct {
	// 下载地址
	DownloadUrl *string `json:"DownloadUrl,omitnil,omitempty" name:"DownloadUrl"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ExportAssetRecentMachineInfoResponse struct {
	*tchttp.BaseResponse
	Response *ExportAssetRecentMachineInfoResponseParams `json:"Response"`
}

func (r *ExportAssetRecentMachineInfoResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportAssetRecentMachineInfoResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportAssetSystemPackageListRequestParams struct {
	// 主机Uuid
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 主机Quuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 过滤条件。
	// <li>Name - String - 是否必填：否 - 包 名</li>
	// <li>StartTime - String - 是否必填：否 - 安装开始时间</li>
	// <li>EndTime - String - 是否必填：否 - 安装开始时间</li>
	// <li>Type - int - 是否必填：否 - 安装包类型：
	// 1:rpm
	// 2:dpkg
	// 3:java
	// 4:system</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 排序方式，asc升序 或 desc降序
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 排序方式可选：[FistTime|InstallTime:安装时间]
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

type ExportAssetSystemPackageListRequest struct {
	*tchttp.BaseRequest
	
	// 主机Uuid
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 主机Quuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 过滤条件。
	// <li>Name - String - 是否必填：否 - 包 名</li>
	// <li>StartTime - String - 是否必填：否 - 安装开始时间</li>
	// <li>EndTime - String - 是否必填：否 - 安装开始时间</li>
	// <li>Type - int - 是否必填：否 - 安装包类型：
	// 1:rpm
	// 2:dpkg
	// 3:java
	// 4:system</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 排序方式，asc升序 或 desc降序
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 排序方式可选：[FistTime|InstallTime:安装时间]
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

func (r *ExportAssetSystemPackageListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportAssetSystemPackageListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Uuid")
	delete(f, "Quuid")
	delete(f, "Filters")
	delete(f, "Order")
	delete(f, "By")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ExportAssetSystemPackageListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportAssetSystemPackageListResponseParams struct {
	// 异步下载任务ID，需要配合ExportTasks接口使用
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ExportAssetSystemPackageListResponse struct {
	*tchttp.BaseResponse
	Response *ExportAssetSystemPackageListResponseParams `json:"Response"`
}

func (r *ExportAssetSystemPackageListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportAssetSystemPackageListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportAssetUserListRequestParams struct {
	// 查询指定Quuid主机的信息
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	//   过滤条件。<li>Name - String - 是否必填：否 - 账户名</li> <li>Uid - uint64 - 是否必填：否 - Uid</li><li>Guid - uint64 - 是否必填：否 - Guid</li> <li>LoginTimeStart - String - 是否必填：否 - 开始时间，如：2021-01-11</li><li>LoginTimeEnd - String - 是否必填：否 - 结束时间，如：2021-01-11</li> <li>LoginType - uint64 - 是否必填：否 - 0-不可登录；1-只允许key登录；2只允许密码登录；3-允许key和密码 仅linux</li> <li>OsType - String - 是否必填：否 - windows或linux</li><li>Status - uint64 - 是否必填：否 - 账号状态：0-禁用；1-启用</li> <li>Type - uint64 - 是否必填：否 - 账号类型：0访客用户，1标准用户，2管理员用户 仅windows</li> <li>IsDomain - uint64 - 是否必填：否 - 是否域账号：0 不是，1是 仅windows</li> <li>IsRoot - uint64 - 是否必填：否 - 是否Root权限：0 不是，1是 仅linux</li> <li>IsSudo - uint64 - 是否必填：否 - 是否Sudo权限：0 不是，1是 仅linux</li> <li>IsSshLogin - uint64 - 是否必填：否 - 是否ssh登录：0 不是，1是 仅linux</li> <li>ShellLoginStatus - uint64 - 是否必填：否 - 是否shell登录性，0不是；1是 仅linux</li> <li>PasswordStatus - uint64 - 是否必填：否 - 密码状态：1正常 2即将过期 3已过期 4已锁定 仅linux</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 排序方式，asc升序 或 desc降序
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 可选排序：[FirstTime|LoginTime|ChangePasswordTime|PasswordDuaTime]
	// PasswordLockDays
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

type ExportAssetUserListRequest struct {
	*tchttp.BaseRequest
	
	// 查询指定Quuid主机的信息
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	//   过滤条件。<li>Name - String - 是否必填：否 - 账户名</li> <li>Uid - uint64 - 是否必填：否 - Uid</li><li>Guid - uint64 - 是否必填：否 - Guid</li> <li>LoginTimeStart - String - 是否必填：否 - 开始时间，如：2021-01-11</li><li>LoginTimeEnd - String - 是否必填：否 - 结束时间，如：2021-01-11</li> <li>LoginType - uint64 - 是否必填：否 - 0-不可登录；1-只允许key登录；2只允许密码登录；3-允许key和密码 仅linux</li> <li>OsType - String - 是否必填：否 - windows或linux</li><li>Status - uint64 - 是否必填：否 - 账号状态：0-禁用；1-启用</li> <li>Type - uint64 - 是否必填：否 - 账号类型：0访客用户，1标准用户，2管理员用户 仅windows</li> <li>IsDomain - uint64 - 是否必填：否 - 是否域账号：0 不是，1是 仅windows</li> <li>IsRoot - uint64 - 是否必填：否 - 是否Root权限：0 不是，1是 仅linux</li> <li>IsSudo - uint64 - 是否必填：否 - 是否Sudo权限：0 不是，1是 仅linux</li> <li>IsSshLogin - uint64 - 是否必填：否 - 是否ssh登录：0 不是，1是 仅linux</li> <li>ShellLoginStatus - uint64 - 是否必填：否 - 是否shell登录性，0不是；1是 仅linux</li> <li>PasswordStatus - uint64 - 是否必填：否 - 密码状态：1正常 2即将过期 3已过期 4已锁定 仅linux</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 排序方式，asc升序 或 desc降序
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 可选排序：[FirstTime|LoginTime|ChangePasswordTime|PasswordDuaTime]
	// PasswordLockDays
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

func (r *ExportAssetUserListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportAssetUserListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Quuid")
	delete(f, "Filters")
	delete(f, "Order")
	delete(f, "By")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ExportAssetUserListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportAssetUserListResponseParams struct {
	// 异步下载任务ID，需要配合ExportTasks接口使用
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ExportAssetUserListResponse struct {
	*tchttp.BaseResponse
	Response *ExportAssetUserListResponseParams `json:"Response"`
}

func (r *ExportAssetUserListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportAssetUserListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportAssetWebAppListRequestParams struct {
	// 查询指定Quuid主机的信息
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 过滤条件。
	// <li>Name - String - 是否必填：否 - 应用名</li>
	// <li>Domain - String - 是否必填：否 - 站点域名</li>
	// <li>Type - int - 是否必填：否 - 服务类型：
	// 0：全部
	// 1:Tomcat
	// 2:Apache
	// 3:Nginx
	// 4:WebLogic
	// 5:Websphere
	// 6:JBoss
	// 7:Jetty
	// 8:IHS
	// 9:Tengine</li>
	// <li>OsType - String - 是否必填：否 - windows/linux</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 排序方式，asc升序 或 desc降序
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 可选排序：[FirstTime|PluginCount]
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

type ExportAssetWebAppListRequest struct {
	*tchttp.BaseRequest
	
	// 查询指定Quuid主机的信息
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 过滤条件。
	// <li>Name - String - 是否必填：否 - 应用名</li>
	// <li>Domain - String - 是否必填：否 - 站点域名</li>
	// <li>Type - int - 是否必填：否 - 服务类型：
	// 0：全部
	// 1:Tomcat
	// 2:Apache
	// 3:Nginx
	// 4:WebLogic
	// 5:Websphere
	// 6:JBoss
	// 7:Jetty
	// 8:IHS
	// 9:Tengine</li>
	// <li>OsType - String - 是否必填：否 - windows/linux</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 排序方式，asc升序 或 desc降序
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 可选排序：[FirstTime|PluginCount]
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

func (r *ExportAssetWebAppListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportAssetWebAppListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Quuid")
	delete(f, "Filters")
	delete(f, "Order")
	delete(f, "By")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ExportAssetWebAppListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportAssetWebAppListResponseParams struct {
	// 异步下载任务ID，需要配合ExportTasks接口使用
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ExportAssetWebAppListResponse struct {
	*tchttp.BaseResponse
	Response *ExportAssetWebAppListResponseParams `json:"Response"`
}

func (r *ExportAssetWebAppListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportAssetWebAppListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportAssetWebFrameListRequestParams struct {
	// 查询指定Quuid主机的信息
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 过滤条件。
	// <li>Name - String - 是否必填：否 - 框架名</li>
	// <li>Lang - String - 是否必填：否 - 框架语言:java/python</li>
	// <li>Type - String - 是否必填：否 - 服务类型：
	// 0：全部
	// 1:Tomcat
	// 2:Apache
	// 3:Nginx
	// 4:WebLogic
	// 5:Websphere
	// 6:JBoss
	// 7:WildFly
	// 8:Jetty
	// 9:IHS
	// 10:Tengine</li>
	// <li>OsType - String - 是否必填：否 - windows/linux</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 排序方式，asc升序 或 desc降序
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 可选排序：[FirstTime|JarCount]
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

type ExportAssetWebFrameListRequest struct {
	*tchttp.BaseRequest
	
	// 查询指定Quuid主机的信息
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 过滤条件。
	// <li>Name - String - 是否必填：否 - 框架名</li>
	// <li>Lang - String - 是否必填：否 - 框架语言:java/python</li>
	// <li>Type - String - 是否必填：否 - 服务类型：
	// 0：全部
	// 1:Tomcat
	// 2:Apache
	// 3:Nginx
	// 4:WebLogic
	// 5:Websphere
	// 6:JBoss
	// 7:WildFly
	// 8:Jetty
	// 9:IHS
	// 10:Tengine</li>
	// <li>OsType - String - 是否必填：否 - windows/linux</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 排序方式，asc升序 或 desc降序
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 可选排序：[FirstTime|JarCount]
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

func (r *ExportAssetWebFrameListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportAssetWebFrameListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Quuid")
	delete(f, "Filters")
	delete(f, "Order")
	delete(f, "By")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ExportAssetWebFrameListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportAssetWebFrameListResponseParams struct {
	// 异步下载任务ID，需要配合ExportTasks接口使用
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ExportAssetWebFrameListResponse struct {
	*tchttp.BaseResponse
	Response *ExportAssetWebFrameListResponseParams `json:"Response"`
}

func (r *ExportAssetWebFrameListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportAssetWebFrameListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportAssetWebLocationListRequestParams struct {
	// 查询指定Quuid主机的信息
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 过滤条件。
	// <li>Name - String - 是否必填：否 - 域名</li>
	// <li>User - String - 是否必填：否 - 运行用户</li>
	// <li>Port - uint64 - 是否必填：否 - 站点端口</li>
	// <li>Proto - uint64 - 是否必填：否 - 站点协议：1:HTTP,2:HTTPS</li>
	// <li>ServiceType - uint64 - 是否必填：否 - 服务类型：
	// 1:Tomcat
	// 2：Apache
	// 3:Nginx
	// 4:WebLogic
	// 5:Websphere
	// 6:JBoss
	// 7:WildFly
	// 8:Jetty
	// 9:IHS
	// 10:Tengine</li>
	// <li>OsType - String - 是否必填：否 - windows/linux</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 排序方式，asc升序 或 desc降序
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 可选排序：[FirstTime|PathCount]
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

type ExportAssetWebLocationListRequest struct {
	*tchttp.BaseRequest
	
	// 查询指定Quuid主机的信息
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 过滤条件。
	// <li>Name - String - 是否必填：否 - 域名</li>
	// <li>User - String - 是否必填：否 - 运行用户</li>
	// <li>Port - uint64 - 是否必填：否 - 站点端口</li>
	// <li>Proto - uint64 - 是否必填：否 - 站点协议：1:HTTP,2:HTTPS</li>
	// <li>ServiceType - uint64 - 是否必填：否 - 服务类型：
	// 1:Tomcat
	// 2：Apache
	// 3:Nginx
	// 4:WebLogic
	// 5:Websphere
	// 6:JBoss
	// 7:WildFly
	// 8:Jetty
	// 9:IHS
	// 10:Tengine</li>
	// <li>OsType - String - 是否必填：否 - windows/linux</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 排序方式，asc升序 或 desc降序
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 可选排序：[FirstTime|PathCount]
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

func (r *ExportAssetWebLocationListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportAssetWebLocationListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Quuid")
	delete(f, "Filters")
	delete(f, "Order")
	delete(f, "By")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ExportAssetWebLocationListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportAssetWebLocationListResponseParams struct {
	// 异步下载任务ID，需要配合ExportTasks接口使用
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ExportAssetWebLocationListResponse struct {
	*tchttp.BaseResponse
	Response *ExportAssetWebLocationListResponseParams `json:"Response"`
}

func (r *ExportAssetWebLocationListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportAssetWebLocationListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportAssetWebServiceInfoListRequestParams struct {
	// 查询指定Quuid主机的信息
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 过滤条件。
	// <li>User- string - 是否必填：否 - 运行用户</li>
	// <li>Name- string - 是否必填：否 - Web服务名：
	// 1:Tomcat
	// 2:Apache
	// 3:Nginx
	// 4:WebLogic
	// 5:Websphere
	// 6:JBoss
	// 7:WildFly
	// 8:Jetty
	// 9:IHS
	// 10:Tengine</li>
	// <li>OsType- string - 是否必填：否 - Windows/linux</li>
	Filters []*AssetFilters `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 排序方式，asc升序 或 desc降序
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 可选排序：[FirstTime|ProcessCount]
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

type ExportAssetWebServiceInfoListRequest struct {
	*tchttp.BaseRequest
	
	// 查询指定Quuid主机的信息
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 过滤条件。
	// <li>User- string - 是否必填：否 - 运行用户</li>
	// <li>Name- string - 是否必填：否 - Web服务名：
	// 1:Tomcat
	// 2:Apache
	// 3:Nginx
	// 4:WebLogic
	// 5:Websphere
	// 6:JBoss
	// 7:WildFly
	// 8:Jetty
	// 9:IHS
	// 10:Tengine</li>
	// <li>OsType- string - 是否必填：否 - Windows/linux</li>
	Filters []*AssetFilters `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 排序方式，asc升序 或 desc降序
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 可选排序：[FirstTime|ProcessCount]
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

func (r *ExportAssetWebServiceInfoListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportAssetWebServiceInfoListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Quuid")
	delete(f, "Filters")
	delete(f, "Order")
	delete(f, "By")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ExportAssetWebServiceInfoListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportAssetWebServiceInfoListResponseParams struct {
	// 异步下载任务ID，需要配合ExportTasks接口使用
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ExportAssetWebServiceInfoListResponse struct {
	*tchttp.BaseResponse
	Response *ExportAssetWebServiceInfoListResponseParams `json:"Response"`
}

func (r *ExportAssetWebServiceInfoListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportAssetWebServiceInfoListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportAttackEventsRequestParams struct {
	// 过滤参数。
	// <li>IpOrAlias - String - 是否必填：否 - 主机ip或别名筛选</li>
	// <li>FilePath - String - 是否必填：否 - 路径筛选</li>
	// <li>VirusName - String - 是否必填：否 - 描述筛选</li>
	// <li>CreateBeginTime - String - 是否必填：否 - 创建时间筛选-开始时间</li>
	// <li>CreateEndTime - String - 是否必填：否 - 创建时间筛选-结束时间</li>
	// <li>Status - String - 是否必填：否 - 状态筛选</li>
	Filters []*Filters `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 排序值 CreateTime
	By *string `json:"By,omitnil,omitempty" name:"By"`

	// 排序 方式 ，ASC，DESC
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`
}

type ExportAttackEventsRequest struct {
	*tchttp.BaseRequest
	
	// 过滤参数。
	// <li>IpOrAlias - String - 是否必填：否 - 主机ip或别名筛选</li>
	// <li>FilePath - String - 是否必填：否 - 路径筛选</li>
	// <li>VirusName - String - 是否必填：否 - 描述筛选</li>
	// <li>CreateBeginTime - String - 是否必填：否 - 创建时间筛选-开始时间</li>
	// <li>CreateEndTime - String - 是否必填：否 - 创建时间筛选-结束时间</li>
	// <li>Status - String - 是否必填：否 - 状态筛选</li>
	Filters []*Filters `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 排序值 CreateTime
	By *string `json:"By,omitnil,omitempty" name:"By"`

	// 排序 方式 ，ASC，DESC
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`
}

func (r *ExportAttackEventsRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportAttackEventsRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Filters")
	delete(f, "By")
	delete(f, "Order")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ExportAttackEventsRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportAttackEventsResponseParams struct {
	// 任务ID,需要到接口“异步导出任务”ExportTasks获取DownloadUrl下载地址
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ExportAttackEventsResponse struct {
	*tchttp.BaseResponse
	Response *ExportAttackEventsResponseParams `json:"Response"`
}

func (r *ExportAttackEventsResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportAttackEventsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportBaselineEffectHostListRequestParams struct {
	// 基线id
	BaselineId *uint64 `json:"BaselineId,omitnil,omitempty" name:"BaselineId"`

	// 筛选条件
	// <li>AliasName- String- 主机别名</li>
	Filters []*Filters `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 策略id
	StrategyId *uint64 `json:"StrategyId,omitnil,omitempty" name:"StrategyId"`

	// 主机uuid数组
	UuidList []*string `json:"UuidList,omitnil,omitempty" name:"UuidList"`

	// 基线名称
	BaselineName *string `json:"BaselineName,omitnil,omitempty" name:"BaselineName"`
}

type ExportBaselineEffectHostListRequest struct {
	*tchttp.BaseRequest
	
	// 基线id
	BaselineId *uint64 `json:"BaselineId,omitnil,omitempty" name:"BaselineId"`

	// 筛选条件
	// <li>AliasName- String- 主机别名</li>
	Filters []*Filters `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 策略id
	StrategyId *uint64 `json:"StrategyId,omitnil,omitempty" name:"StrategyId"`

	// 主机uuid数组
	UuidList []*string `json:"UuidList,omitnil,omitempty" name:"UuidList"`

	// 基线名称
	BaselineName *string `json:"BaselineName,omitnil,omitempty" name:"BaselineName"`
}

func (r *ExportBaselineEffectHostListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportBaselineEffectHostListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "BaselineId")
	delete(f, "Filters")
	delete(f, "StrategyId")
	delete(f, "UuidList")
	delete(f, "BaselineName")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ExportBaselineEffectHostListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportBaselineEffectHostListResponseParams struct {
	// 该参数已废弃
	// 注意：此字段可能返回 null，表示取不到有效值。
	DownloadUrl *string `json:"DownloadUrl,omitnil,omitempty" name:"DownloadUrl"`

	// 任务ID,需要到接口“异步导出任务”ExportTasks获取DownloadUrl下载地址
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ExportBaselineEffectHostListResponse struct {
	*tchttp.BaseResponse
	Response *ExportBaselineEffectHostListResponseParams `json:"Response"`
}

func (r *ExportBaselineEffectHostListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportBaselineEffectHostListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportBaselineFixListRequestParams struct {
	// <li>ItemName - String - 是否必填：否 - 项名称</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 0:过滤的结果导出；1:全部导出
	ExportAll *int64 `json:"ExportAll,omitnil,omitempty" name:"ExportAll"`
}

type ExportBaselineFixListRequest struct {
	*tchttp.BaseRequest
	
	// <li>ItemName - String - 是否必填：否 - 项名称</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 0:过滤的结果导出；1:全部导出
	ExportAll *int64 `json:"ExportAll,omitnil,omitempty" name:"ExportAll"`
}

func (r *ExportBaselineFixListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportBaselineFixListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Filters")
	delete(f, "ExportAll")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ExportBaselineFixListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportBaselineFixListResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ExportBaselineFixListResponse struct {
	*tchttp.BaseResponse
	Response *ExportBaselineFixListResponseParams `json:"Response"`
}

func (r *ExportBaselineFixListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportBaselineFixListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportBaselineHostDetectListRequestParams struct {
	// <li>HostTag - string - 是否必填：否 - 主机标签</li><li>ItemId - int64 - 是否必填：否 - 项Id</li><li>RuleId - int64 - 是否必填：否 - 规则Id</li><li>IsPassed - int - 是否必填：否 - 是否通过</li><li>RiskTier - int - 是否必填：否 - 风险等级</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 0:过滤的结果导出；1:全部导出
	ExportAll *int64 `json:"ExportAll,omitnil,omitempty" name:"ExportAll"`

	// 0:导出界面展示；1:导出全部结果事件
	IsExportDetail *int64 `json:"IsExportDetail,omitnil,omitempty" name:"IsExportDetail"`
}

type ExportBaselineHostDetectListRequest struct {
	*tchttp.BaseRequest
	
	// <li>HostTag - string - 是否必填：否 - 主机标签</li><li>ItemId - int64 - 是否必填：否 - 项Id</li><li>RuleId - int64 - 是否必填：否 - 规则Id</li><li>IsPassed - int - 是否必填：否 - 是否通过</li><li>RiskTier - int - 是否必填：否 - 风险等级</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 0:过滤的结果导出；1:全部导出
	ExportAll *int64 `json:"ExportAll,omitnil,omitempty" name:"ExportAll"`

	// 0:导出界面展示；1:导出全部结果事件
	IsExportDetail *int64 `json:"IsExportDetail,omitnil,omitempty" name:"IsExportDetail"`
}

func (r *ExportBaselineHostDetectListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportBaselineHostDetectListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Filters")
	delete(f, "ExportAll")
	delete(f, "IsExportDetail")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ExportBaselineHostDetectListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportBaselineHostDetectListResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ExportBaselineHostDetectListResponse struct {
	*tchttp.BaseResponse
	Response *ExportBaselineHostDetectListResponseParams `json:"Response"`
}

func (r *ExportBaselineHostDetectListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportBaselineHostDetectListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportBaselineItemDetectListRequestParams struct {
	// <li>HostId - string - 是否必填：否 - 主机Id</li><li>RuleId - int64 - 是否必填：否 - 规则Id</li><li>IsPassed - int - 是否必填：否 - 是否通过</li><li>RiskTier - int - 是否必填：否 - 风险等级</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 0:过滤的结果导出；1:全部导出
	ExportAll *int64 `json:"ExportAll,omitnil,omitempty" name:"ExportAll"`

	// 0:导出界面展示；1:导出全部结果事件
	IsExportDetail *int64 `json:"IsExportDetail,omitnil,omitempty" name:"IsExportDetail"`
}

type ExportBaselineItemDetectListRequest struct {
	*tchttp.BaseRequest
	
	// <li>HostId - string - 是否必填：否 - 主机Id</li><li>RuleId - int64 - 是否必填：否 - 规则Id</li><li>IsPassed - int - 是否必填：否 - 是否通过</li><li>RiskTier - int - 是否必填：否 - 风险等级</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 0:过滤的结果导出；1:全部导出
	ExportAll *int64 `json:"ExportAll,omitnil,omitempty" name:"ExportAll"`

	// 0:导出界面展示；1:导出全部结果事件
	IsExportDetail *int64 `json:"IsExportDetail,omitnil,omitempty" name:"IsExportDetail"`
}

func (r *ExportBaselineItemDetectListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportBaselineItemDetectListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Filters")
	delete(f, "ExportAll")
	delete(f, "IsExportDetail")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ExportBaselineItemDetectListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportBaselineItemDetectListResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ExportBaselineItemDetectListResponse struct {
	*tchttp.BaseResponse
	Response *ExportBaselineItemDetectListResponseParams `json:"Response"`
}

func (r *ExportBaselineItemDetectListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportBaselineItemDetectListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportBaselineItemListRequestParams struct {
	// <li>PolicyId - int64 - 是否必填：否 - 策略Id</li>
	// <li>RuleId - int64 - 是否必填：否 - 规则Id</li>
	// <li>HostId - string - 是否必填：否 - 主机Id</li>
	// <li>HostName - string - 是否必填：否 - 主机名</li>
	// <li>HostIp - string - 是否必填：否 - 主机IP</li>
	// <li>ItemId - String - 是否必填：否 - 检测项Id</li>
	// <li>ItemName - String - 是否必填：否 - 项名称</li>
	// <li>DetectStatus - int - 是否必填：否 - 检测状态[0:未通过|3:通过|5:检测中]</li>
	// <li>Level - int - 是否必填：否 - 风险等级</li>
	// <li>StartTime - string - 是否必填：否 - 开始时间</li>
	// <li>EndTime - string - 是否必填：否 - 结束时间</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 0:过滤的结果导出；1:全部导出
	ExportAll *int64 `json:"ExportAll,omitnil,omitempty" name:"ExportAll"`
}

type ExportBaselineItemListRequest struct {
	*tchttp.BaseRequest
	
	// <li>PolicyId - int64 - 是否必填：否 - 策略Id</li>
	// <li>RuleId - int64 - 是否必填：否 - 规则Id</li>
	// <li>HostId - string - 是否必填：否 - 主机Id</li>
	// <li>HostName - string - 是否必填：否 - 主机名</li>
	// <li>HostIp - string - 是否必填：否 - 主机IP</li>
	// <li>ItemId - String - 是否必填：否 - 检测项Id</li>
	// <li>ItemName - String - 是否必填：否 - 项名称</li>
	// <li>DetectStatus - int - 是否必填：否 - 检测状态[0:未通过|3:通过|5:检测中]</li>
	// <li>Level - int - 是否必填：否 - 风险等级</li>
	// <li>StartTime - string - 是否必填：否 - 开始时间</li>
	// <li>EndTime - string - 是否必填：否 - 结束时间</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 0:过滤的结果导出；1:全部导出
	ExportAll *int64 `json:"ExportAll,omitnil,omitempty" name:"ExportAll"`
}

func (r *ExportBaselineItemListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportBaselineItemListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Filters")
	delete(f, "ExportAll")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ExportBaselineItemListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportBaselineItemListResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ExportBaselineItemListResponse struct {
	*tchttp.BaseResponse
	Response *ExportBaselineItemListResponseParams `json:"Response"`
}

func (r *ExportBaselineItemListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportBaselineItemListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportBaselineListRequestParams struct {
	// 过滤条件：
	// <li>StrategyId- Uint64 - 基线策略id</li>
	// <li>Status - Uint64 - 事件状态：0-未通过，1-忽略，3-通过，5-检测中</li>
	// <li>BaselineName  - String - 基线名称</li>
	// <li>AliasName- String - 服务器名称/服务器ip</li>
	// <li>Uuid- String - 主机uuid</li>
	Filters []*Filters `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 已废弃
	IfDetail *uint64 `json:"IfDetail,omitnil,omitempty" name:"IfDetail"`
}

type ExportBaselineListRequest struct {
	*tchttp.BaseRequest
	
	// 过滤条件：
	// <li>StrategyId- Uint64 - 基线策略id</li>
	// <li>Status - Uint64 - 事件状态：0-未通过，1-忽略，3-通过，5-检测中</li>
	// <li>BaselineName  - String - 基线名称</li>
	// <li>AliasName- String - 服务器名称/服务器ip</li>
	// <li>Uuid- String - 主机uuid</li>
	Filters []*Filters `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 已废弃
	IfDetail *uint64 `json:"IfDetail,omitnil,omitempty" name:"IfDetail"`
}

func (r *ExportBaselineListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportBaselineListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Filters")
	delete(f, "IfDetail")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ExportBaselineListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportBaselineListResponseParams struct {
	// 导出文件下载地址（已弃用）
	// 注意：此字段可能返回 null，表示取不到有效值。
	DownloadUrl *string `json:"DownloadUrl,omitnil,omitempty" name:"DownloadUrl"`

	// 任务ID,需要到接口“异步导出任务”ExportTasks获取DownloadUrl下载地址
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ExportBaselineListResponse struct {
	*tchttp.BaseResponse
	Response *ExportBaselineListResponseParams `json:"Response"`
}

func (r *ExportBaselineListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportBaselineListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportBaselineRuleDetectListRequestParams struct {
	// <li>RuleName - string - 是否必填：否 - 规则名称</li><li>IsPassed - int - 是否必填：否 - 是否通过</li><li>RiskTier - int - 是否必填：否 - 风险等级</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 0:过滤的结果导出；1:全部导出
	ExportAll *int64 `json:"ExportAll,omitnil,omitempty" name:"ExportAll"`

	// 0:导出界面展示；1:导出全部结果事件
	IsExportDetail *int64 `json:"IsExportDetail,omitnil,omitempty" name:"IsExportDetail"`
}

type ExportBaselineRuleDetectListRequest struct {
	*tchttp.BaseRequest
	
	// <li>RuleName - string - 是否必填：否 - 规则名称</li><li>IsPassed - int - 是否必填：否 - 是否通过</li><li>RiskTier - int - 是否必填：否 - 风险等级</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 0:过滤的结果导出；1:全部导出
	ExportAll *int64 `json:"ExportAll,omitnil,omitempty" name:"ExportAll"`

	// 0:导出界面展示；1:导出全部结果事件
	IsExportDetail *int64 `json:"IsExportDetail,omitnil,omitempty" name:"IsExportDetail"`
}

func (r *ExportBaselineRuleDetectListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportBaselineRuleDetectListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Filters")
	delete(f, "ExportAll")
	delete(f, "IsExportDetail")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ExportBaselineRuleDetectListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportBaselineRuleDetectListResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ExportBaselineRuleDetectListResponse struct {
	*tchttp.BaseResponse
	Response *ExportBaselineRuleDetectListResponseParams `json:"Response"`
}

func (r *ExportBaselineRuleDetectListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportBaselineRuleDetectListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportBaselineWeakPasswordListRequestParams struct {
	// <li>WeakPassword - string - 是否必填：否 - 弱口令</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 0:过滤的结果导出；1:全部导出
	ExportAll *int64 `json:"ExportAll,omitnil,omitempty" name:"ExportAll"`
}

type ExportBaselineWeakPasswordListRequest struct {
	*tchttp.BaseRequest
	
	// <li>WeakPassword - string - 是否必填：否 - 弱口令</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 0:过滤的结果导出；1:全部导出
	ExportAll *int64 `json:"ExportAll,omitnil,omitempty" name:"ExportAll"`
}

func (r *ExportBaselineWeakPasswordListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportBaselineWeakPasswordListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Filters")
	delete(f, "ExportAll")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ExportBaselineWeakPasswordListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportBaselineWeakPasswordListResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ExportBaselineWeakPasswordListResponse struct {
	*tchttp.BaseResponse
	Response *ExportBaselineWeakPasswordListResponseParams `json:"Response"`
}

func (r *ExportBaselineWeakPasswordListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportBaselineWeakPasswordListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportBashEventsNewRequestParams struct {
	// 过滤参数
	Filters []*Filters `json:"Filters,omitnil,omitempty" name:"Filters"`
}

type ExportBashEventsNewRequest struct {
	*tchttp.BaseRequest
	
	// 过滤参数
	Filters []*Filters `json:"Filters,omitnil,omitempty" name:"Filters"`
}

func (r *ExportBashEventsNewRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportBashEventsNewRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Filters")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ExportBashEventsNewRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportBashEventsNewResponseParams struct {
	// 该参数已废弃
	DownloadUrl *string `json:"DownloadUrl,omitnil,omitempty" name:"DownloadUrl"`

	// 任务ID,需要到接口“异步导出任务”ExportTasks获取DownloadUrl下载地址
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ExportBashEventsNewResponse struct {
	*tchttp.BaseResponse
	Response *ExportBashEventsNewResponseParams `json:"Response"`
}

func (r *ExportBashEventsNewResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportBashEventsNewResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportBashEventsRequestParams struct {
	// 过滤参数
	Filters []*Filters `json:"Filters,omitnil,omitempty" name:"Filters"`
}

type ExportBashEventsRequest struct {
	*tchttp.BaseRequest
	
	// 过滤参数
	Filters []*Filters `json:"Filters,omitnil,omitempty" name:"Filters"`
}

func (r *ExportBashEventsRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportBashEventsRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Filters")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ExportBashEventsRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportBashEventsResponseParams struct {
	// 导出文件下载链接地址。
	DownloadUrl *string `json:"DownloadUrl,omitnil,omitempty" name:"DownloadUrl"`

	// 任务ID,需要到接口“异步导出任务”ExportTasks获取DownloadUrl下载地址
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ExportBashEventsResponse struct {
	*tchttp.BaseResponse
	Response *ExportBashEventsResponseParams `json:"Response"`
}

func (r *ExportBashEventsResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportBashEventsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportBashPoliciesRequestParams struct {
	// 过滤参数
	Filters []*Filters `json:"Filters,omitnil,omitempty" name:"Filters"`
}

type ExportBashPoliciesRequest struct {
	*tchttp.BaseRequest
	
	// 过滤参数
	Filters []*Filters `json:"Filters,omitnil,omitempty" name:"Filters"`
}

func (r *ExportBashPoliciesRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportBashPoliciesRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Filters")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ExportBashPoliciesRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportBashPoliciesResponseParams struct {
	// 该参数已废弃
	DownloadUrl *string `json:"DownloadUrl,omitnil,omitempty" name:"DownloadUrl"`

	// 任务ID,需要到接口“异步导出任务”ExportTasks获取DownloadUrl下载地址
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ExportBashPoliciesResponse struct {
	*tchttp.BaseResponse
	Response *ExportBashPoliciesResponseParams `json:"Response"`
}

func (r *ExportBashPoliciesResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportBashPoliciesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportBruteAttacksRequestParams struct {
	// 过滤参数
	Filters []*Filters `json:"Filters,omitnil,omitempty" name:"Filters"`
}

type ExportBruteAttacksRequest struct {
	*tchttp.BaseRequest
	
	// 过滤参数
	Filters []*Filters `json:"Filters,omitnil,omitempty" name:"Filters"`
}

func (r *ExportBruteAttacksRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportBruteAttacksRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Filters")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ExportBruteAttacksRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportBruteAttacksResponseParams struct {
	// 该参数已废弃
	DownloadUrl *string `json:"DownloadUrl,omitnil,omitempty" name:"DownloadUrl"`

	// 任务ID,需要到接口“异步导出任务”ExportTasks获取DownloadUrl下载地址
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ExportBruteAttacksResponse struct {
	*tchttp.BaseResponse
	Response *ExportBruteAttacksResponseParams `json:"Response"`
}

func (r *ExportBruteAttacksResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportBruteAttacksResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportFileTamperEventsRequestParams struct {
	// 过滤条件。
	// <li>Status - String - 是否必填：否 - 处理状态  0 -- 待处理 1 -- 已加白 2 -- 已删除 3 - 已忽略</li>
	// <li>ModifyTime - String - 是否必填：否 - 最近发生时间</li>
	// <li>Uuid- String - 是否必填：否 - 主机uuid查询</li>
	// <li>RuleCategory- string - 是否必填：否 - 规则类别 0 系统规则 1 自定义规则</li>
	Filters []*Filters `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 需要导出的字段
	//
	// Deprecated: Fileds is deprecated.
	Fileds []*string `json:"Fileds,omitnil,omitempty" name:"Fileds"`

	// 需要导出的字段
	Fields *string `json:"Fields,omitnil,omitempty" name:"Fields"`
}

type ExportFileTamperEventsRequest struct {
	*tchttp.BaseRequest
	
	// 过滤条件。
	// <li>Status - String - 是否必填：否 - 处理状态  0 -- 待处理 1 -- 已加白 2 -- 已删除 3 - 已忽略</li>
	// <li>ModifyTime - String - 是否必填：否 - 最近发生时间</li>
	// <li>Uuid- String - 是否必填：否 - 主机uuid查询</li>
	// <li>RuleCategory- string - 是否必填：否 - 规则类别 0 系统规则 1 自定义规则</li>
	Filters []*Filters `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 需要导出的字段
	Fileds []*string `json:"Fileds,omitnil,omitempty" name:"Fileds"`

	// 需要导出的字段
	Fields *string `json:"Fields,omitnil,omitempty" name:"Fields"`
}

func (r *ExportFileTamperEventsRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportFileTamperEventsRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Filters")
	delete(f, "Fileds")
	delete(f, "Fields")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ExportFileTamperEventsRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportFileTamperEventsResponseParams struct {
	// 导出任务ID 可通过ExportTasks接口下载
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ExportFileTamperEventsResponse struct {
	*tchttp.BaseResponse
	Response *ExportFileTamperEventsResponseParams `json:"Response"`
}

func (r *ExportFileTamperEventsResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportFileTamperEventsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportFileTamperRulesRequestParams struct {
	// 过滤条件。
	// <li>RuleCategory- string- 规则类别  0=系统规则，1=用户规则</li>
	// <li>Name- String - 规则名称</li>
	Filters []*Filters `json:"Filters,omitnil,omitempty" name:"Filters"`
}

type ExportFileTamperRulesRequest struct {
	*tchttp.BaseRequest
	
	// 过滤条件。
	// <li>RuleCategory- string- 规则类别  0=系统规则，1=用户规则</li>
	// <li>Name- String - 规则名称</li>
	Filters []*Filters `json:"Filters,omitnil,omitempty" name:"Filters"`
}

func (r *ExportFileTamperRulesRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportFileTamperRulesRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Filters")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ExportFileTamperRulesRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportFileTamperRulesResponseParams struct {
	// 导出任务ID 可通过ExportTasks接口下载
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ExportFileTamperRulesResponse struct {
	*tchttp.BaseResponse
	Response *ExportFileTamperRulesResponseParams `json:"Response"`
}

func (r *ExportFileTamperRulesResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportFileTamperRulesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportIgnoreBaselineRuleRequestParams struct {
	// 检测项名称
	RuleName *string `json:"RuleName,omitnil,omitempty" name:"RuleName"`
}

type ExportIgnoreBaselineRuleRequest struct {
	*tchttp.BaseRequest
	
	// 检测项名称
	RuleName *string `json:"RuleName,omitnil,omitempty" name:"RuleName"`
}

func (r *ExportIgnoreBaselineRuleRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportIgnoreBaselineRuleRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "RuleName")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ExportIgnoreBaselineRuleRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportIgnoreBaselineRuleResponseParams struct {
	// 该参数已废弃
	DownloadUrl *string `json:"DownloadUrl,omitnil,omitempty" name:"DownloadUrl"`

	// 任务ID,需要到接口“异步导出任务”ExportTasks获取DownloadUrl下载地址
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ExportIgnoreBaselineRuleResponse struct {
	*tchttp.BaseResponse
	Response *ExportIgnoreBaselineRuleResponseParams `json:"Response"`
}

func (r *ExportIgnoreBaselineRuleResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportIgnoreBaselineRuleResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportIgnoreRuleEffectHostListRequestParams struct {
	// 检测项id
	RuleId *uint64 `json:"RuleId,omitnil,omitempty" name:"RuleId"`

	// 过滤条件。
	// <li>AliasName- String- 主机别名</li>
	Filters []*Filters `json:"Filters,omitnil,omitempty" name:"Filters"`
}

type ExportIgnoreRuleEffectHostListRequest struct {
	*tchttp.BaseRequest
	
	// 检测项id
	RuleId *uint64 `json:"RuleId,omitnil,omitempty" name:"RuleId"`

	// 过滤条件。
	// <li>AliasName- String- 主机别名</li>
	Filters []*Filters `json:"Filters,omitnil,omitempty" name:"Filters"`
}

func (r *ExportIgnoreRuleEffectHostListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportIgnoreRuleEffectHostListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "RuleId")
	delete(f, "Filters")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ExportIgnoreRuleEffectHostListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportIgnoreRuleEffectHostListResponseParams struct {
	// 该参数已废弃
	DownloadUrl *string `json:"DownloadUrl,omitnil,omitempty" name:"DownloadUrl"`

	// 任务ID,需要到接口“异步导出任务”ExportTasks获取DownloadUrl下载地址
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ExportIgnoreRuleEffectHostListResponse struct {
	*tchttp.BaseResponse
	Response *ExportIgnoreRuleEffectHostListResponseParams `json:"Response"`
}

func (r *ExportIgnoreRuleEffectHostListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportIgnoreRuleEffectHostListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ExportInfo struct {
	// 日志导出任务ID
	ExportId *string `json:"ExportId,omitnil,omitempty" name:"ExportId"`

	// 日志导出查询语句
	Query *string `json:"Query,omitnil,omitempty" name:"Query"`

	// 日志导出文件名
	FileName *string `json:"FileName,omitnil,omitempty" name:"FileName"`

	// 日志文件大小
	FileSize *int64 `json:"FileSize,omitnil,omitempty" name:"FileSize"`

	// 日志导出时间排序
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 日志导出格式
	Format *string `json:"Format,omitnil,omitempty" name:"Format"`

	// 日志导出数量
	Count *int64 `json:"Count,omitnil,omitempty" name:"Count"`

	// 日志下载状态。Processing:导出正在进行中，Complete:导出完成，Failed:导出失败，Expired:日志导出已过期（三天有效期）。
	Status *string `json:"Status,omitnil,omitempty" name:"Status"`

	// 日志导出起始时间，uinx毫秒时间戳
	StartTime *int64 `json:"StartTime,omitnil,omitempty" name:"StartTime"`

	// 日志导出结束时间，uinx毫秒时间戳
	EndTime *int64 `json:"EndTime,omitnil,omitempty" name:"EndTime"`

	// 日志导出路径
	CosPath *string `json:"CosPath,omitnil,omitempty" name:"CosPath"`

	// 日志导出创建时间
	CreateTime *string `json:"CreateTime,omitnil,omitempty" name:"CreateTime"`
}

// Predefined struct for user
type ExportJavaMemShellPluginsRequestParams struct {
	// 过滤条件：Keywords: ip或者主机名模糊查询, Pid精确匹配，MainClass模糊匹配
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 导出字段
	Where []*string `json:"Where,omitnil,omitempty" name:"Where"`
}

type ExportJavaMemShellPluginsRequest struct {
	*tchttp.BaseRequest
	
	// 过滤条件：Keywords: ip或者主机名模糊查询, Pid精确匹配，MainClass模糊匹配
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 导出字段
	Where []*string `json:"Where,omitnil,omitempty" name:"Where"`
}

func (r *ExportJavaMemShellPluginsRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportJavaMemShellPluginsRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Filters")
	delete(f, "Where")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ExportJavaMemShellPluginsRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportJavaMemShellPluginsResponseParams struct {
	// 任务ID,需要到接口“异步导出任务”ExportTasks获取DownloadUrl下载地址
	// 注意：此字段可能返回 null，表示取不到有效值。
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ExportJavaMemShellPluginsResponse struct {
	*tchttp.BaseResponse
	Response *ExportJavaMemShellPluginsResponseParams `json:"Response"`
}

func (r *ExportJavaMemShellPluginsResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportJavaMemShellPluginsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportJavaMemShellsRequestParams struct {
	// 过滤条件：InstanceID、IP、
	// 
	// MachineName主机名模糊查询, Type，Status精确匹配，CreateBeginTime，CreateEndTime时间段
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 导出字段
	Where []*string `json:"Where,omitnil,omitempty" name:"Where"`
}

type ExportJavaMemShellsRequest struct {
	*tchttp.BaseRequest
	
	// 过滤条件：InstanceID、IP、
	// 
	// MachineName主机名模糊查询, Type，Status精确匹配，CreateBeginTime，CreateEndTime时间段
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 导出字段
	Where []*string `json:"Where,omitnil,omitempty" name:"Where"`
}

func (r *ExportJavaMemShellsRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportJavaMemShellsRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Filters")
	delete(f, "Where")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ExportJavaMemShellsRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportJavaMemShellsResponseParams struct {
	// 任务ID,需要到接口 <a href="https://cloud.tencent.com/document/product/296/52508" target="_blank" >异步导出任务</a>获取DownloadUrl下载地址
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ExportJavaMemShellsResponse struct {
	*tchttp.BaseResponse
	Response *ExportJavaMemShellsResponseParams `json:"Response"`
}

func (r *ExportJavaMemShellsResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportJavaMemShellsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportLicenseDetailRequestParams struct {
	// 多个条件筛选时 LicenseStatus,DeadlineStatus,ResourceId,Keywords 取交集
	// <li> LicenseType  授权类型, 0 专业版-按量计费, 1专业版-包年包月 , 2 旗舰版-包年包月</li>
	// <li>ResourceId 资源ID</li>
	Filters []*Filters `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 是否导出全部授权详情
	IsHistory *bool `json:"IsHistory,omitnil,omitempty" name:"IsHistory"`

	// 标签筛选,平台标签能力,这里传入 标签键,标签值作为一个对象
	Tags []*Tags `json:"Tags,omitnil,omitempty" name:"Tags"`

	// 导出月份, 该参数仅在IsHistory 时可选.
	ExportMonth *string `json:"ExportMonth,omitnil,omitempty" name:"ExportMonth"`
}

type ExportLicenseDetailRequest struct {
	*tchttp.BaseRequest
	
	// 多个条件筛选时 LicenseStatus,DeadlineStatus,ResourceId,Keywords 取交集
	// <li> LicenseType  授权类型, 0 专业版-按量计费, 1专业版-包年包月 , 2 旗舰版-包年包月</li>
	// <li>ResourceId 资源ID</li>
	Filters []*Filters `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 是否导出全部授权详情
	IsHistory *bool `json:"IsHistory,omitnil,omitempty" name:"IsHistory"`

	// 标签筛选,平台标签能力,这里传入 标签键,标签值作为一个对象
	Tags []*Tags `json:"Tags,omitnil,omitempty" name:"Tags"`

	// 导出月份, 该参数仅在IsHistory 时可选.
	ExportMonth *string `json:"ExportMonth,omitnil,omitempty" name:"ExportMonth"`
}

func (r *ExportLicenseDetailRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportLicenseDetailRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Filters")
	delete(f, "IsHistory")
	delete(f, "Tags")
	delete(f, "ExportMonth")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ExportLicenseDetailRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportLicenseDetailResponseParams struct {
	// 下载地址,该字段废弃
	DownloadUrl *string `json:"DownloadUrl,omitnil,omitempty" name:"DownloadUrl"`

	// 任务ID,需要到接口“异步导出任务”ExportTasks获取DownloadUrl下载地址
	TaskId *uint64 `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ExportLicenseDetailResponse struct {
	*tchttp.BaseResponse
	Response *ExportLicenseDetailResponseParams `json:"Response"`
}

func (r *ExportLicenseDetailResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportLicenseDetailResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportMaliciousRequestsRequestParams struct {
	// 过滤参数
	Filters []*Filters `json:"Filters,omitnil,omitempty" name:"Filters"`
}

type ExportMaliciousRequestsRequest struct {
	*tchttp.BaseRequest
	
	// 过滤参数
	Filters []*Filters `json:"Filters,omitnil,omitempty" name:"Filters"`
}

func (r *ExportMaliciousRequestsRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportMaliciousRequestsRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Filters")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ExportMaliciousRequestsRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportMaliciousRequestsResponseParams struct {
	// 该参数已废弃
	DownloadUrl *string `json:"DownloadUrl,omitnil,omitempty" name:"DownloadUrl"`

	// 任务ID,需要到接口“异步导出任务”ExportTasks获取DownloadUrl下载地址
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ExportMaliciousRequestsResponse struct {
	*tchttp.BaseResponse
	Response *ExportMaliciousRequestsResponseParams `json:"Response"`
}

func (r *ExportMaliciousRequestsResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportMaliciousRequestsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportMalwaresRequestParams struct {
	// 限制条数,默认10
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量 默认0
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 过滤参数。
	// <li>IpOrAlias - String - 是否必填：否 - 主机ip或别名筛选</li>
	// <li>FilePath - String - 是否必填：否 - 路径筛选</li>
	// <li>VirusName - String - 是否必填：否 - 描述筛选</li>
	// <li>CreateBeginTime - String - 是否必填：否 - 创建时间筛选-开始时间</li>
	// <li>CreateEndTime - String - 是否必填：否 - 创建时间筛选-结束时间</li>
	// <li>Status - String - 是否必填：否 - 状态筛选</li>
	Filters []*Filters `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 排序值 CreateTime
	By *string `json:"By,omitnil,omitempty" name:"By"`

	// 排序 方式 ，ASC，DESC
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`
}

type ExportMalwaresRequest struct {
	*tchttp.BaseRequest
	
	// 限制条数,默认10
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量 默认0
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`

	// 过滤参数。
	// <li>IpOrAlias - String - 是否必填：否 - 主机ip或别名筛选</li>
	// <li>FilePath - String - 是否必填：否 - 路径筛选</li>
	// <li>VirusName - String - 是否必填：否 - 描述筛选</li>
	// <li>CreateBeginTime - String - 是否必填：否 - 创建时间筛选-开始时间</li>
	// <li>CreateEndTime - String - 是否必填：否 - 创建时间筛选-结束时间</li>
	// <li>Status - String - 是否必填：否 - 状态筛选</li>
	Filters []*Filters `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 排序值 CreateTime
	By *string `json:"By,omitnil,omitempty" name:"By"`

	// 排序 方式 ，ASC，DESC
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`
}

func (r *ExportMalwaresRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportMalwaresRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Limit")
	delete(f, "Offset")
	delete(f, "Filters")
	delete(f, "By")
	delete(f, "Order")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ExportMalwaresRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportMalwaresResponseParams struct {
	// 该参数已废弃
	DownloadUrl *string `json:"DownloadUrl,omitnil,omitempty" name:"DownloadUrl"`

	// 任务ID,需要到接口“异步导出任务”ExportTasks获取DownloadUrl下载地址
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ExportMalwaresResponse struct {
	*tchttp.BaseResponse
	Response *ExportMalwaresResponseParams `json:"Response"`
}

func (r *ExportMalwaresResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportMalwaresResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportNonlocalLoginPlacesRequestParams struct {
	// <li>Status - int - 是否必填：否 - 状态筛选1:正常登录；2：异地登录</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`
}

type ExportNonlocalLoginPlacesRequest struct {
	*tchttp.BaseRequest
	
	// <li>Status - int - 是否必填：否 - 状态筛选1:正常登录；2：异地登录</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`
}

func (r *ExportNonlocalLoginPlacesRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportNonlocalLoginPlacesRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Filters")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ExportNonlocalLoginPlacesRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportNonlocalLoginPlacesResponseParams struct {
	// 该参数已废弃
	DownloadUrl *string `json:"DownloadUrl,omitnil,omitempty" name:"DownloadUrl"`

	// 任务ID,需要到接口“异步导出任务”ExportTasks获取DownloadUrl下载地址
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ExportNonlocalLoginPlacesResponse struct {
	*tchttp.BaseResponse
	Response *ExportNonlocalLoginPlacesResponseParams `json:"Response"`
}

func (r *ExportNonlocalLoginPlacesResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportNonlocalLoginPlacesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportPrivilegeEventsRequestParams struct {
	// 过滤参数
	Filters []*Filters `json:"Filters,omitnil,omitempty" name:"Filters"`
}

type ExportPrivilegeEventsRequest struct {
	*tchttp.BaseRequest
	
	// 过滤参数
	Filters []*Filters `json:"Filters,omitnil,omitempty" name:"Filters"`
}

func (r *ExportPrivilegeEventsRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportPrivilegeEventsRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Filters")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ExportPrivilegeEventsRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportPrivilegeEventsResponseParams struct {
	// 该参数已废弃
	DownloadUrl *string `json:"DownloadUrl,omitnil,omitempty" name:"DownloadUrl"`

	// 任务ID,需要到接口“异步导出任务”ExportTasks获取DownloadUrl下载地址
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ExportPrivilegeEventsResponse struct {
	*tchttp.BaseResponse
	Response *ExportPrivilegeEventsResponseParams `json:"Response"`
}

func (r *ExportPrivilegeEventsResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportPrivilegeEventsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportProtectDirListRequestParams struct {
	// DirName 网站名称
	// DirPath 网站防护目录地址
	Filters []*AssetFilters `json:"Filters,omitnil,omitempty" name:"Filters"`

	// asc：升序/desc：降序
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 排序字段
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

type ExportProtectDirListRequest struct {
	*tchttp.BaseRequest
	
	// DirName 网站名称
	// DirPath 网站防护目录地址
	Filters []*AssetFilters `json:"Filters,omitnil,omitempty" name:"Filters"`

	// asc：升序/desc：降序
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 排序字段
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

func (r *ExportProtectDirListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportProtectDirListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Filters")
	delete(f, "Order")
	delete(f, "By")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ExportProtectDirListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportProtectDirListResponseParams struct {
	// 任务ID,需要到接口“异步导出任务”ExportTasks获取DownloadUrl下载地址
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ExportProtectDirListResponse struct {
	*tchttp.BaseResponse
	Response *ExportProtectDirListResponseParams `json:"Response"`
}

func (r *ExportProtectDirListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportProtectDirListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportRansomDefenseBackupListRequestParams struct {
	// 主机Quuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 过滤条件。
	// <li>Status - Int - 是否必填：否 - 通过勒索状态查询：0未勒索，1已勒索 </li>
	// <li>CreateTimeBegin - string - 是否必填：否 - 创建时间开始 </li>
	// <li>CreateTimeEnd - string - 是否必填：否 - 创建时间结束 </li>
	Filters []*Filters `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 排序方法 ASC DESC
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 排序字段支持CreateTime
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

type ExportRansomDefenseBackupListRequest struct {
	*tchttp.BaseRequest
	
	// 主机Quuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 过滤条件。
	// <li>Status - Int - 是否必填：否 - 通过勒索状态查询：0未勒索，1已勒索 </li>
	// <li>CreateTimeBegin - string - 是否必填：否 - 创建时间开始 </li>
	// <li>CreateTimeEnd - string - 是否必填：否 - 创建时间结束 </li>
	Filters []*Filters `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 排序方法 ASC DESC
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 排序字段支持CreateTime
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

func (r *ExportRansomDefenseBackupListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportRansomDefenseBackupListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Quuid")
	delete(f, "Filters")
	delete(f, "Order")
	delete(f, "By")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ExportRansomDefenseBackupListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportRansomDefenseBackupListResponseParams struct {
	// 任务ID,需要到接口“异步导出任务”ExportTasks获取DownloadUrl下载地址
	// 注意：此字段可能返回 null，表示取不到有效值。
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ExportRansomDefenseBackupListResponse struct {
	*tchttp.BaseResponse
	Response *ExportRansomDefenseBackupListResponseParams `json:"Response"`
}

func (r *ExportRansomDefenseBackupListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportRansomDefenseBackupListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportRansomDefenseEventsListRequestParams struct {
	// 过滤条件。
	// <li>HostName- string- 主机名称</li>
	// <li>Status - Uint64 - 0待处理，1已处理，2已信任</li>
	// <li>HostIp- String - 主机ip</li>
	Filters []*Filters `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 排序方法 ASC DESC
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 排序字段支持CreateTime
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

type ExportRansomDefenseEventsListRequest struct {
	*tchttp.BaseRequest
	
	// 过滤条件。
	// <li>HostName- string- 主机名称</li>
	// <li>Status - Uint64 - 0待处理，1已处理，2已信任</li>
	// <li>HostIp- String - 主机ip</li>
	Filters []*Filters `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 排序方法 ASC DESC
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 排序字段支持CreateTime
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

func (r *ExportRansomDefenseEventsListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportRansomDefenseEventsListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Filters")
	delete(f, "Order")
	delete(f, "By")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ExportRansomDefenseEventsListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportRansomDefenseEventsListResponseParams struct {
	// 任务ID,需要到接口“异步导出任务”ExportTasks获取DownloadUrl下载地址
	// 注意：此字段可能返回 null，表示取不到有效值。
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ExportRansomDefenseEventsListResponse struct {
	*tchttp.BaseResponse
	Response *ExportRansomDefenseEventsListResponseParams `json:"Response"`
}

func (r *ExportRansomDefenseEventsListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportRansomDefenseEventsListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportRansomDefenseMachineListRequestParams struct {
	// 过滤条件。
	// <li>Ips - String - 是否必填：否 - 通过ip查询 </li>
	// <li>MachineNames - String - 是否必填：否 - 通过实例名查询 </li>
	// <li>Names - String - 是否必填：否 - 通过实例名查询 </li>
	// <li>Status - String - 是否必填：否 - 策略状态：0备份中，1备份成功，2备份失败 </li>
	// <li>LastBackupTimeBegin - String - 是否必填：否 - 最近一次备份时间开始</li>
	// <li>LastBackupTimeEnd - String - 是否必填：否 - 最近一次备份时间结束</li>
	Filters []*Filters `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 排序方法 ASC DESC
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 排序字段支持CreateTime、MachineCount
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

type ExportRansomDefenseMachineListRequest struct {
	*tchttp.BaseRequest
	
	// 过滤条件。
	// <li>Ips - String - 是否必填：否 - 通过ip查询 </li>
	// <li>MachineNames - String - 是否必填：否 - 通过实例名查询 </li>
	// <li>Names - String - 是否必填：否 - 通过实例名查询 </li>
	// <li>Status - String - 是否必填：否 - 策略状态：0备份中，1备份成功，2备份失败 </li>
	// <li>LastBackupTimeBegin - String - 是否必填：否 - 最近一次备份时间开始</li>
	// <li>LastBackupTimeEnd - String - 是否必填：否 - 最近一次备份时间结束</li>
	Filters []*Filters `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 排序方法 ASC DESC
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 排序字段支持CreateTime、MachineCount
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

func (r *ExportRansomDefenseMachineListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportRansomDefenseMachineListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Filters")
	delete(f, "Order")
	delete(f, "By")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ExportRansomDefenseMachineListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportRansomDefenseMachineListResponseParams struct {
	// 任务ID,需要到接口“异步导出任务”ExportTasks获取DownloadUrl下载地址
	// 注意：此字段可能返回 null，表示取不到有效值。
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ExportRansomDefenseMachineListResponse struct {
	*tchttp.BaseResponse
	Response *ExportRansomDefenseMachineListResponseParams `json:"Response"`
}

func (r *ExportRansomDefenseMachineListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportRansomDefenseMachineListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportRansomDefenseStrategyListRequestParams struct {
	// 过滤条件。
	// <li>Ips - String - 是否必填：否 - 通过ip查询 </li>
	// <li>MachineNames - String - 是否必填：否 - 通过实例名查询 </li>
	// <li>Names - String - 是否必填：否 - 通过实例名查询 </li>
	// <li>Dirs - String - 是否必填：否 - 诱饵目录 </li>
	// <li>Status - String - 是否必填：否 - 策略状态：0关闭，1开启 </li>
	// <li>BackupType - String - 是否必填：否 - 备份模式：0-按周;1-按天 </li>
	Filters []*Filters `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 排序方法 ASC DESC
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 排序字段支持CreateTime、MachineCount
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

type ExportRansomDefenseStrategyListRequest struct {
	*tchttp.BaseRequest
	
	// 过滤条件。
	// <li>Ips - String - 是否必填：否 - 通过ip查询 </li>
	// <li>MachineNames - String - 是否必填：否 - 通过实例名查询 </li>
	// <li>Names - String - 是否必填：否 - 通过实例名查询 </li>
	// <li>Dirs - String - 是否必填：否 - 诱饵目录 </li>
	// <li>Status - String - 是否必填：否 - 策略状态：0关闭，1开启 </li>
	// <li>BackupType - String - 是否必填：否 - 备份模式：0-按周;1-按天 </li>
	Filters []*Filters `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 排序方法 ASC DESC
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 排序字段支持CreateTime、MachineCount
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

func (r *ExportRansomDefenseStrategyListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportRansomDefenseStrategyListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Filters")
	delete(f, "Order")
	delete(f, "By")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ExportRansomDefenseStrategyListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportRansomDefenseStrategyListResponseParams struct {
	// 任务ID,需要到接口“异步导出任务”ExportTasks获取DownloadUrl下载地址
	// 注意：此字段可能返回 null，表示取不到有效值。
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ExportRansomDefenseStrategyListResponse struct {
	*tchttp.BaseResponse
	Response *ExportRansomDefenseStrategyListResponseParams `json:"Response"`
}

func (r *ExportRansomDefenseStrategyListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportRansomDefenseStrategyListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportRansomDefenseStrategyMachinesRequestParams struct {
	// 过滤条件。
	// <li>Ips - String - 是否必填：否 - 通过ip查询 </li>
	// <li>MachineNames - String - 是否必填：否 - 通过实例名查询 </li>
	// <li>Names - String - 是否必填：否 - 通过实例名查询 </li>
	// <li>Status - String - 是否必填：否 - 策略状态：0备份中，1备份成功，2备份失败 </li>
	// <li>LastBackupTimeBegin - String - 是否必填：否 - 最近一次备份时间开始</li>
	// <li>LastBackupTimeEnd - String - 是否必填：否 - 最近一次备份时间结束</li>
	Filters []*Filters `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 排序方法 ASC DESC
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 排序字段支持CreateTime、MachineCount
	By *string `json:"By,omitnil,omitempty" name:"By"`

	// 策略id
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`
}

type ExportRansomDefenseStrategyMachinesRequest struct {
	*tchttp.BaseRequest
	
	// 过滤条件。
	// <li>Ips - String - 是否必填：否 - 通过ip查询 </li>
	// <li>MachineNames - String - 是否必填：否 - 通过实例名查询 </li>
	// <li>Names - String - 是否必填：否 - 通过实例名查询 </li>
	// <li>Status - String - 是否必填：否 - 策略状态：0备份中，1备份成功，2备份失败 </li>
	// <li>LastBackupTimeBegin - String - 是否必填：否 - 最近一次备份时间开始</li>
	// <li>LastBackupTimeEnd - String - 是否必填：否 - 最近一次备份时间结束</li>
	Filters []*Filters `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 排序方法 ASC DESC
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 排序字段支持CreateTime、MachineCount
	By *string `json:"By,omitnil,omitempty" name:"By"`

	// 策略id
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`
}

func (r *ExportRansomDefenseStrategyMachinesRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportRansomDefenseStrategyMachinesRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Filters")
	delete(f, "Order")
	delete(f, "By")
	delete(f, "Id")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ExportRansomDefenseStrategyMachinesRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportRansomDefenseStrategyMachinesResponseParams struct {
	// 任务ID,需要到接口“异步导出任务”ExportTasks获取DownloadUrl下载地址
	// 注意：此字段可能返回 null，表示取不到有效值。
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ExportRansomDefenseStrategyMachinesResponse struct {
	*tchttp.BaseResponse
	Response *ExportRansomDefenseStrategyMachinesResponseParams `json:"Response"`
}

func (r *ExportRansomDefenseStrategyMachinesResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportRansomDefenseStrategyMachinesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportReverseShellEventsRequestParams struct {
	// 过滤参数
	Filters []*Filters `json:"Filters,omitnil,omitempty" name:"Filters"`
}

type ExportReverseShellEventsRequest struct {
	*tchttp.BaseRequest
	
	// 过滤参数
	Filters []*Filters `json:"Filters,omitnil,omitempty" name:"Filters"`
}

func (r *ExportReverseShellEventsRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportReverseShellEventsRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Filters")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ExportReverseShellEventsRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportReverseShellEventsResponseParams struct {
	// 该参数已废弃
	DownloadUrl *string `json:"DownloadUrl,omitnil,omitempty" name:"DownloadUrl"`

	// 任务ID,需要到接口“异步导出任务”ExportTasks获取DownloadUrl下载地址
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ExportReverseShellEventsResponse struct {
	*tchttp.BaseResponse
	Response *ExportReverseShellEventsResponseParams `json:"Response"`
}

func (r *ExportReverseShellEventsResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportReverseShellEventsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportRiskDnsEventListRequestParams struct {
	// <li>IpOrName - String - 是否必填：否 - 主机Ip或别名筛选</li>
	// <li>HostId - String - 是否必填：否 - 主机Id</li>
	// <li>AgentId - String - 是否必填：否 - 客户端Id</li>
	// <li>PolicyType - String - 是否必填：否 - 策略类型,0:系统策略1:用户自定义策略</li>
	// <li>Domain - String - 是否必填：否 - 域名(先对域名做urlencode,再base64)</li>
	// <li>HandleStatus - String - 是否必填：否 - 状态筛选0:待处理；2:信任；3:不信任</li>
	// <li>BeginTime - String - 是否必填：否 - 最近访问开始时间</li>
	// <li>EndTime - String - 是否必填：否 - 最近访问结束时间</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 排序方式：[ASC:升序|DESC:降序]
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 排序字段：[AccessCount:请求次数|LastTime:最近请求时间]
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

type ExportRiskDnsEventListRequest struct {
	*tchttp.BaseRequest
	
	// <li>IpOrName - String - 是否必填：否 - 主机Ip或别名筛选</li>
	// <li>HostId - String - 是否必填：否 - 主机Id</li>
	// <li>AgentId - String - 是否必填：否 - 客户端Id</li>
	// <li>PolicyType - String - 是否必填：否 - 策略类型,0:系统策略1:用户自定义策略</li>
	// <li>Domain - String - 是否必填：否 - 域名(先对域名做urlencode,再base64)</li>
	// <li>HandleStatus - String - 是否必填：否 - 状态筛选0:待处理；2:信任；3:不信任</li>
	// <li>BeginTime - String - 是否必填：否 - 最近访问开始时间</li>
	// <li>EndTime - String - 是否必填：否 - 最近访问结束时间</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 排序方式：[ASC:升序|DESC:降序]
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 排序字段：[AccessCount:请求次数|LastTime:最近请求时间]
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

func (r *ExportRiskDnsEventListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportRiskDnsEventListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Filters")
	delete(f, "Order")
	delete(f, "By")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ExportRiskDnsEventListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportRiskDnsEventListResponseParams struct {
	// 任务ID,需要到接口“异步导出任务”ExportTasks获取DownloadUrl下载地址
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ExportRiskDnsEventListResponse struct {
	*tchttp.BaseResponse
	Response *ExportRiskDnsEventListResponseParams `json:"Response"`
}

func (r *ExportRiskDnsEventListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportRiskDnsEventListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportRiskDnsPolicyListRequestParams struct {
	// <li>PolicyType - int - 是否必填：否 - 策略类型</li>
	// <li>PolicyName - string - 是否必填：否 - 策略名称</li>
	// <li>Domain - string - 是否必填：否 - 域名(先对域名做urlencode,再base64)</li>
	// <li>PolicyAction- int - 是否必填：否 - 策略动作</li>
	// <li>IsEnabled - int - 是否必填：否 - 是否生效</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 排序方式: [ASC:升序|DESC:降序]
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 可选排序列: [PolicyName|HostType]
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

type ExportRiskDnsPolicyListRequest struct {
	*tchttp.BaseRequest
	
	// <li>PolicyType - int - 是否必填：否 - 策略类型</li>
	// <li>PolicyName - string - 是否必填：否 - 策略名称</li>
	// <li>Domain - string - 是否必填：否 - 域名(先对域名做urlencode,再base64)</li>
	// <li>PolicyAction- int - 是否必填：否 - 策略动作</li>
	// <li>IsEnabled - int - 是否必填：否 - 是否生效</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 排序方式: [ASC:升序|DESC:降序]
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// 可选排序列: [PolicyName|HostType]
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

func (r *ExportRiskDnsPolicyListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportRiskDnsPolicyListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Filters")
	delete(f, "Order")
	delete(f, "By")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ExportRiskDnsPolicyListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportRiskDnsPolicyListResponseParams struct {
	// 异步下载任务ID，需要配合ExportTasks接口使用
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ExportRiskDnsPolicyListResponse struct {
	*tchttp.BaseResponse
	Response *ExportRiskDnsPolicyListResponseParams `json:"Response"`
}

func (r *ExportRiskDnsPolicyListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportRiskDnsPolicyListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportRiskProcessEventsRequestParams struct {
	// 过滤条件。
	// <li>HostId - String - 是否必填：否 - 主机ID</li>
	// <li>IpOrName - String - 是否必填：否 - 主机IP或主机名</li>
	// <li>VirusName - String - 是否必填：否 - 病毒名</li>
	// <li>ProcessId - String - 是否必填：否 - 进程ID</li>
	// <li>ProcessPath - String - 是否必填：否 - 进程路径</li>
	// <li>BeginTime - String - 是否必填：否 - 进程启动时间-开始</li>
	// <li>EndTime - String - 是否必填：否 - 进程启动时间-结束</li>
	// <li>Status - String - 是否必填：否 - 状态筛选 0待处理；1查杀中；2已查杀；3已退出;4已信任</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 排序方式：[ASC:升序|DESC:降序]
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// [StartTime:进程启动时间|DetectTime:最后检测时间]
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

type ExportRiskProcessEventsRequest struct {
	*tchttp.BaseRequest
	
	// 过滤条件。
	// <li>HostId - String - 是否必填：否 - 主机ID</li>
	// <li>IpOrName - String - 是否必填：否 - 主机IP或主机名</li>
	// <li>VirusName - String - 是否必填：否 - 病毒名</li>
	// <li>ProcessId - String - 是否必填：否 - 进程ID</li>
	// <li>ProcessPath - String - 是否必填：否 - 进程路径</li>
	// <li>BeginTime - String - 是否必填：否 - 进程启动时间-开始</li>
	// <li>EndTime - String - 是否必填：否 - 进程启动时间-结束</li>
	// <li>Status - String - 是否必填：否 - 状态筛选 0待处理；1查杀中；2已查杀；3已退出;4已信任</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 排序方式：[ASC:升序|DESC:降序]
	Order *string `json:"Order,omitnil,omitempty" name:"Order"`

	// [StartTime:进程启动时间|DetectTime:最后检测时间]
	By *string `json:"By,omitnil,omitempty" name:"By"`
}

func (r *ExportRiskProcessEventsRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportRiskProcessEventsRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Filters")
	delete(f, "Order")
	delete(f, "By")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ExportRiskProcessEventsRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportRiskProcessEventsResponseParams struct {
	// 任务ID,需要到接口“异步导出任务”ExportTasks获取DownloadUrl下载地址
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ExportRiskProcessEventsResponse struct {
	*tchttp.BaseResponse
	Response *ExportRiskProcessEventsResponseParams `json:"Response"`
}

func (r *ExportRiskProcessEventsResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportRiskProcessEventsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportScanTaskDetailsRequestParams struct {
	// 本次检测的任务id（不同于出参的导出本次检测Excel的任务Id）
	TaskId *uint64 `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// 模块类型，当前提供：Malware 木马 , Vul 漏洞 , Baseline 基线
	ModuleType *string `json:"ModuleType,omitnil,omitempty" name:"ModuleType"`

	// 过滤参数：ipOrAlias（服务器名/ip）
	Filters []*Filters `json:"Filters,omitnil,omitempty" name:"Filters"`
}

type ExportScanTaskDetailsRequest struct {
	*tchttp.BaseRequest
	
	// 本次检测的任务id（不同于出参的导出本次检测Excel的任务Id）
	TaskId *uint64 `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// 模块类型，当前提供：Malware 木马 , Vul 漏洞 , Baseline 基线
	ModuleType *string `json:"ModuleType,omitnil,omitempty" name:"ModuleType"`

	// 过滤参数：ipOrAlias（服务器名/ip）
	Filters []*Filters `json:"Filters,omitnil,omitempty" name:"Filters"`
}

func (r *ExportScanTaskDetailsRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportScanTaskDetailsRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "TaskId")
	delete(f, "ModuleType")
	delete(f, "Filters")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ExportScanTaskDetailsRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportScanTaskDetailsResponseParams struct {
	// 任务ID,需要到接口“异步导出任务”ExportTasks获取DownloadUrl下载地址(不同于入参的本次检测任务id)
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ExportScanTaskDetailsResponse struct {
	*tchttp.BaseResponse
	Response *ExportScanTaskDetailsResponseParams `json:"Response"`
}

func (r *ExportScanTaskDetailsResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportScanTaskDetailsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportSecurityTrendsRequestParams struct {
	// 开始时间。
	BeginDate *string `json:"BeginDate,omitnil,omitempty" name:"BeginDate"`

	// 结束时间。
	EndDate *string `json:"EndDate,omitnil,omitempty" name:"EndDate"`
}

type ExportSecurityTrendsRequest struct {
	*tchttp.BaseRequest
	
	// 开始时间。
	BeginDate *string `json:"BeginDate,omitnil,omitempty" name:"BeginDate"`

	// 结束时间。
	EndDate *string `json:"EndDate,omitnil,omitempty" name:"EndDate"`
}

func (r *ExportSecurityTrendsRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportSecurityTrendsRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "BeginDate")
	delete(f, "EndDate")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ExportSecurityTrendsRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportSecurityTrendsResponseParams struct {
	// 导出文件下载链接地址。
	DownloadUrl *string `json:"DownloadUrl,omitnil,omitempty" name:"DownloadUrl"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ExportSecurityTrendsResponse struct {
	*tchttp.BaseResponse
	Response *ExportSecurityTrendsResponseParams `json:"Response"`
}

func (r *ExportSecurityTrendsResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportSecurityTrendsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportTasksRequestParams struct {
	// 任务ID
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`
}

type ExportTasksRequest struct {
	*tchttp.BaseRequest
	
	// 任务ID
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`
}

func (r *ExportTasksRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportTasksRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "TaskId")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ExportTasksRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportTasksResponseParams struct {
	// PENDING：正在生成下载链接，FINISHED：下载链接已生成，ERROR：网络异常等异常情况
	Status *string `json:"Status,omitnil,omitempty" name:"Status"`

	// 下载链接
	DownloadUrl *string `json:"DownloadUrl,omitnil,omitempty" name:"DownloadUrl"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ExportTasksResponse struct {
	*tchttp.BaseResponse
	Response *ExportTasksResponseParams `json:"Response"`
}

func (r *ExportTasksResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportTasksResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportVulDefenceEventRequestParams struct {
	// 过滤条件：Keywords: ip或者主机名, VulKeywords漏洞名或者CveId模糊查询; Quuid，VulId，EventType，Status精确匹配，CreateBeginTime，CreateEndTime时间段查询
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 导出字段，默认全导出
	Where []*string `json:"Where,omitnil,omitempty" name:"Where"`
}

type ExportVulDefenceEventRequest struct {
	*tchttp.BaseRequest
	
	// 过滤条件：Keywords: ip或者主机名, VulKeywords漏洞名或者CveId模糊查询; Quuid，VulId，EventType，Status精确匹配，CreateBeginTime，CreateEndTime时间段查询
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 导出字段，默认全导出
	Where []*string `json:"Where,omitnil,omitempty" name:"Where"`
}

func (r *ExportVulDefenceEventRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportVulDefenceEventRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Filters")
	delete(f, "Where")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ExportVulDefenceEventRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportVulDefenceEventResponseParams struct {
	// 导出文件Id 可通过ExportTasks接口下载
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ExportVulDefenceEventResponse struct {
	*tchttp.BaseResponse
	Response *ExportVulDefenceEventResponseParams `json:"Response"`
}

func (r *ExportVulDefenceEventResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportVulDefenceEventResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportVulDefenceListRequestParams struct {
	// 过滤条件：Keywords: 漏洞名称或CVE编号模糊匹配, Level精确匹配
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 导出字段，默认全导出
	Where []*string `json:"Where,omitnil,omitempty" name:"Where"`
}

type ExportVulDefenceListRequest struct {
	*tchttp.BaseRequest
	
	// 过滤条件：Keywords: 漏洞名称或CVE编号模糊匹配, Level精确匹配
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 导出字段，默认全导出
	Where []*string `json:"Where,omitnil,omitempty" name:"Where"`
}

func (r *ExportVulDefenceListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportVulDefenceListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Filters")
	delete(f, "Where")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ExportVulDefenceListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportVulDefenceListResponseParams struct {
	// 导出文件Id 可通过ExportTasks接口下载
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ExportVulDefenceListResponse struct {
	*tchttp.BaseResponse
	Response *ExportVulDefenceListResponseParams `json:"Response"`
}

func (r *ExportVulDefenceListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportVulDefenceListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportVulDefencePluginEventRequestParams struct {
	// Keywords: ip或者主机名模糊匹配，Quuid，Exception、Status精确匹配
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 导出字段，默认全导出
	Where []*string `json:"Where,omitnil,omitempty" name:"Where"`
}

type ExportVulDefencePluginEventRequest struct {
	*tchttp.BaseRequest
	
	// Keywords: ip或者主机名模糊匹配，Quuid，Exception、Status精确匹配
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 导出字段，默认全导出
	Where []*string `json:"Where,omitnil,omitempty" name:"Where"`
}

func (r *ExportVulDefencePluginEventRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportVulDefencePluginEventRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Filters")
	delete(f, "Where")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ExportVulDefencePluginEventRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportVulDefencePluginEventResponseParams struct {
	// 导出文件Id 可通过ExportTasks接口下载
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ExportVulDefencePluginEventResponse struct {
	*tchttp.BaseResponse
	Response *ExportVulDefencePluginEventResponseParams `json:"Response"`
}

func (r *ExportVulDefencePluginEventResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportVulDefencePluginEventResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportVulDetectionExcelRequestParams struct {
	// 本次漏洞检测任务id（不同于出参的导出本次漏洞检测Excel的任务Id）
	TaskId *uint64 `json:"TaskId,omitnil,omitempty" name:"TaskId"`
}

type ExportVulDetectionExcelRequest struct {
	*tchttp.BaseRequest
	
	// 本次漏洞检测任务id（不同于出参的导出本次漏洞检测Excel的任务Id）
	TaskId *uint64 `json:"TaskId,omitnil,omitempty" name:"TaskId"`
}

func (r *ExportVulDetectionExcelRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportVulDetectionExcelRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "TaskId")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ExportVulDetectionExcelRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportVulDetectionExcelResponseParams struct {
	// 该参数已废弃
	DownloadUrl *string `json:"DownloadUrl,omitnil,omitempty" name:"DownloadUrl"`

	// 任务ID,需要到接口“异步导出任务”ExportTasks获取DownloadUrl下载地址（不同于入参的本次漏洞检测任务id）
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ExportVulDetectionExcelResponse struct {
	*tchttp.BaseResponse
	Response *ExportVulDetectionExcelResponseParams `json:"Response"`
}

func (r *ExportVulDetectionExcelResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportVulDetectionExcelResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportVulDetectionReportRequestParams struct {
	// 漏洞扫描任务id（不同于出参的导出检测报告的任务Id）
	TaskId *uint64 `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// 过滤参数
	Filters []*Filters `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 需要返回的数量，默认为10，最大值为100
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`
}

type ExportVulDetectionReportRequest struct {
	*tchttp.BaseRequest
	
	// 漏洞扫描任务id（不同于出参的导出检测报告的任务Id）
	TaskId *uint64 `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// 过滤参数
	Filters []*Filters `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 需要返回的数量，默认为10，最大值为100
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// 偏移量，默认为0。
	Offset *uint64 `json:"Offset,omitnil,omitempty" name:"Offset"`
}

func (r *ExportVulDetectionReportRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportVulDetectionReportRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "TaskId")
	delete(f, "Filters")
	delete(f, "Limit")
	delete(f, "Offset")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ExportVulDetectionReportRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportVulDetectionReportResponseParams struct {
	// 导出文件下载链接地址
	DownloadUrl *string `json:"DownloadUrl,omitnil,omitempty" name:"DownloadUrl"`

	// 导出检测报告的任务Id（不同于入参的漏洞扫描任务id）
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ExportVulDetectionReportResponse struct {
	*tchttp.BaseResponse
	Response *ExportVulDetectionReportResponseParams `json:"Response"`
}

func (r *ExportVulDetectionReportResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportVulDetectionReportResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportVulEffectHostListRequestParams struct {
	// 漏洞id
	VulId *uint64 `json:"VulId,omitnil,omitempty" name:"VulId"`

	// 过滤条件。
	// <li>AliasName - String - 主机名筛选</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`
}

type ExportVulEffectHostListRequest struct {
	*tchttp.BaseRequest
	
	// 漏洞id
	VulId *uint64 `json:"VulId,omitnil,omitempty" name:"VulId"`

	// 过滤条件。
	// <li>AliasName - String - 主机名筛选</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`
}

func (r *ExportVulEffectHostListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportVulEffectHostListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "VulId")
	delete(f, "Filters")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ExportVulEffectHostListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportVulEffectHostListResponseParams struct {
	// 已废弃
	// 注意：此字段可能返回 null，表示取不到有效值。
	DownloadUrl *string `json:"DownloadUrl,omitnil,omitempty" name:"DownloadUrl"`

	// 导出任务Id , 可通过ExportTasks 接口下载
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ExportVulEffectHostListResponse struct {
	*tchttp.BaseResponse
	Response *ExportVulEffectHostListResponseParams `json:"Response"`
}

func (r *ExportVulEffectHostListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportVulEffectHostListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportVulInfoRequestParams struct {
	// 漏洞id
	VulId *uint64 `json:"VulId,omitnil,omitempty" name:"VulId"`
}

type ExportVulInfoRequest struct {
	*tchttp.BaseRequest
	
	// 漏洞id
	VulId *uint64 `json:"VulId,omitnil,omitempty" name:"VulId"`
}

func (r *ExportVulInfoRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportVulInfoRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "VulId")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ExportVulInfoRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportVulInfoResponseParams struct {
	// 导出任务Id , 可通过ExportTasks 接口下载
	TaskId *uint64 `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ExportVulInfoResponse struct {
	*tchttp.BaseResponse
	Response *ExportVulInfoResponseParams `json:"Response"`
}

func (r *ExportVulInfoResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportVulInfoResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportVulListRequestParams struct {
	// 过滤条件。
	// <li>VulCategory - int - 是否必填：否 - 漏洞分类筛选1: web-cms漏洞 2:应用漏洞  4: Linux软件漏洞 5: Windows系统漏洞</li>
	// <li>IfEmergency - String - 是否必填：否 - 是否为应急漏洞，查询应急漏洞传:yes</li>
	// <li>Status - String - 是否必填：是 - 漏洞状态筛选，0: 待处理 1:忽略  3:已修复  5:检测中， 控制台仅处理0,1,3,5四种状态</li>
	// <li>Level - String - 是否必填：否 - 漏洞等级筛选 1:低 2:中 3:高 4:提示</li>
	// <li>VulName- String - 是否必填：否 - 漏洞名称搜索</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 是否导出详情,1是 0不是
	IfDetail *uint64 `json:"IfDetail,omitnil,omitempty" name:"IfDetail"`
}

type ExportVulListRequest struct {
	*tchttp.BaseRequest
	
	// 过滤条件。
	// <li>VulCategory - int - 是否必填：否 - 漏洞分类筛选1: web-cms漏洞 2:应用漏洞  4: Linux软件漏洞 5: Windows系统漏洞</li>
	// <li>IfEmergency - String - 是否必填：否 - 是否为应急漏洞，查询应急漏洞传:yes</li>
	// <li>Status - String - 是否必填：是 - 漏洞状态筛选，0: 待处理 1:忽略  3:已修复  5:检测中， 控制台仅处理0,1,3,5四种状态</li>
	// <li>Level - String - 是否必填：否 - 漏洞等级筛选 1:低 2:中 3:高 4:提示</li>
	// <li>VulName- String - 是否必填：否 - 漏洞名称搜索</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 是否导出详情,1是 0不是
	IfDetail *uint64 `json:"IfDetail,omitnil,omitempty" name:"IfDetail"`
}

func (r *ExportVulListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportVulListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Filters")
	delete(f, "IfDetail")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ExportVulListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportVulListResponseParams struct {
	// 导出的文件下载url（已弃用！）
	// 注意：此字段可能返回 null，表示取不到有效值。
	DownloadUrl *string `json:"DownloadUrl,omitnil,omitempty" name:"DownloadUrl"`

	// 导出文件Id 可通过ExportTasks接口下载
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ExportVulListResponse struct {
	*tchttp.BaseResponse
	Response *ExportVulListResponseParams `json:"Response"`
}

func (r *ExportVulListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportVulListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportWebPageEventListRequestParams struct {
	// 过滤条件
	// <li>IpOrAlias - String - 是否必填：否 - 主机ip或别名筛选</li>
	// <li>EventType - String - 是否必填：否 - 事件类型</li>
	// <li>EventStatus - String - 是否必填：否 - 事件状态</li>
	Filters []*AssetFilters `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 排序方式：CreateTime 或 RestoreTime，默认为CreateTime
	By *string `json:"By,omitnil,omitempty" name:"By"`

	// 排序方式，0降序，1升序，默认为0
	Order *uint64 `json:"Order,omitnil,omitempty" name:"Order"`
}

type ExportWebPageEventListRequest struct {
	*tchttp.BaseRequest
	
	// 过滤条件
	// <li>IpOrAlias - String - 是否必填：否 - 主机ip或别名筛选</li>
	// <li>EventType - String - 是否必填：否 - 事件类型</li>
	// <li>EventStatus - String - 是否必填：否 - 事件状态</li>
	Filters []*AssetFilters `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 排序方式：CreateTime 或 RestoreTime，默认为CreateTime
	By *string `json:"By,omitnil,omitempty" name:"By"`

	// 排序方式，0降序，1升序，默认为0
	Order *uint64 `json:"Order,omitnil,omitempty" name:"Order"`
}

func (r *ExportWebPageEventListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportWebPageEventListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Filters")
	delete(f, "By")
	delete(f, "Order")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ExportWebPageEventListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ExportWebPageEventListResponseParams struct {
	// 任务id 可通过 ExportTasks接口下载
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ExportWebPageEventListResponse struct {
	*tchttp.BaseResponse
	Response *ExportWebPageEventListResponseParams `json:"Response"`
}

func (r *ExportWebPageEventListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ExportWebPageEventListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type FieldValueRatioInfo struct {
	// 个数
	Count *int64 `json:"Count,omitnil,omitempty" name:"Count"`

	// 比例
	Ratio *float64 `json:"Ratio,omitnil,omitempty" name:"Ratio"`

	// 值
	Value *string `json:"Value,omitnil,omitempty" name:"Value"`
}

type FileTamperEvent struct {
	// 机器名称
	HostName *string `json:"HostName,omitnil,omitempty" name:"HostName"`

	// 机器IP
	HostIp *string `json:"HostIp,omitnil,omitempty" name:"HostIp"`

	// 发生时间
	CreateTime *string `json:"CreateTime,omitnil,omitempty" name:"CreateTime"`

	// 最近发生时间
	ModifyTime *string `json:"ModifyTime,omitnil,omitempty" name:"ModifyTime"`

	// 事件id
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`

	// 主机uuid
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// cvm id
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 事件类型/动作  0 -- 告警
	Type *uint64 `json:"Type,omitnil,omitempty" name:"Type"`

	// 进程路径
	ProcessExe *string `json:"ProcessExe,omitnil,omitempty" name:"ProcessExe"`

	// 进程参数
	ProcessArgv *string `json:"ProcessArgv,omitnil,omitempty" name:"ProcessArgv"`

	// 目标文件路径
	Target *string `json:"Target,omitnil,omitempty" name:"Target"`

	// 处理状态  0 -- 待处理 1 -- 已加白 2 -- 已删除 3 - 已忽略 4-已手动处理
	Status *uint64 `json:"Status,omitnil,omitempty" name:"Status"`

	// 事件产生次数
	EventCount *uint64 `json:"EventCount,omitnil,omitempty" name:"EventCount"`

	// 规则id
	RuleId *uint64 `json:"RuleId,omitnil,omitempty" name:"RuleId"`

	// 规则名称
	RuleName *string `json:"RuleName,omitnil,omitempty" name:"RuleName"`

	// 事件详情: json格式
	Pstree *string `json:"Pstree,omitnil,omitempty" name:"Pstree"`

	// 规则类型 0系统规则 1自定义规则
	RuleCategory *uint64 `json:"RuleCategory,omitnil,omitempty" name:"RuleCategory"`

	// 主机在线信息 ONLINE、OFFLINE
	MachineStatus *string `json:"MachineStatus,omitnil,omitempty" name:"MachineStatus"`

	// 危害描述
	Description *string `json:"Description,omitnil,omitempty" name:"Description"`

	// 修护建议
	Suggestion *string `json:"Suggestion,omitnil,omitempty" name:"Suggestion"`

	// 内网ip
	PrivateIp *string `json:"PrivateIp,omitnil,omitempty" name:"PrivateIp"`

	// 进程权限
	ExePermission *string `json:"ExePermission,omitnil,omitempty" name:"ExePermission"`

	// 用户名
	UserName *string `json:"UserName,omitnil,omitempty" name:"UserName"`

	// 用户组
	UserGroup *string `json:"UserGroup,omitnil,omitempty" name:"UserGroup"`

	// 进程名
	ExeMd5 *string `json:"ExeMd5,omitnil,omitempty" name:"ExeMd5"`

	// 进程文件大小
	ExeSize *uint64 `json:"ExeSize,omitnil,omitempty" name:"ExeSize"`

	// 进程执行时长
	ExeTime *uint64 `json:"ExeTime,omitnil,omitempty" name:"ExeTime"`

	// 目标文件大小
	TargetSize *uint64 `json:"TargetSize,omitnil,omitempty" name:"TargetSize"`

	// 目标文件权限
	TargetPermission *string `json:"TargetPermission,omitnil,omitempty" name:"TargetPermission"`

	// 目标文件更新时间
	// 注意：此字段可能返回 null，表示取不到有效值。
	TargetModifyTime *string `json:"TargetModifyTime,omitnil,omitempty" name:"TargetModifyTime"`

	// 目标文件创建时间
	// 注意：此字段可能返回 null，表示取不到有效值。
	TargetCreatTime *string `json:"TargetCreatTime,omitnil,omitempty" name:"TargetCreatTime"`

	// 进程pid
	ExePid *uint64 `json:"ExePid,omitnil,omitempty" name:"ExePid"`

	// 文件名称
	TargetName *string `json:"TargetName,omitnil,omitempty" name:"TargetName"`

	// 参考链接
	Reference *string `json:"Reference,omitnil,omitempty" name:"Reference"`

	// 风险等级 0：无， 1: 高危， 2:中危， 3: 低危
	Level *uint64 `json:"Level,omitnil,omitempty" name:"Level"`

	// 进程名称
	// 注意：此字段可能返回 null，表示取不到有效值。
	ExeName *string `json:"ExeName,omitnil,omitempty" name:"ExeName"`

	//  主机额外信息
	// 注意：此字段可能返回 null，表示取不到有效值。
	MachineExtraInfo *MachineExtraInfo `json:"MachineExtraInfo,omitnil,omitempty" name:"MachineExtraInfo"`

	// 文件威胁行为
	// <li>read 读取文件</li>
	// <li>write 修改文件</li>
	// 注意：此字段可能返回 null，表示取不到有效值。
	FileAction *string `json:"FileAction,omitnil,omitempty" name:"FileAction"`
}

type FileTamperRule struct {
	// 进程路径
	ProcessPath *string `json:"ProcessPath,omitnil,omitempty" name:"ProcessPath"`

	// 被访问文件路径
	Target *string `json:"Target,omitnil,omitempty" name:"Target"`

	// 执行动作 跳过：skip，告警：alert
	Action *string `json:"Action,omitnil,omitempty" name:"Action"`

	// 监控行为
	// <li>read 读取文件</li>
	// <li>write 修改文件</li>
	// <li>read-write 读取修改文件</li>
	FileAction *string `json:"FileAction,omitnil,omitempty" name:"FileAction"`
}

type FileTamperRuleCount struct {
	// 主机uuid
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 关联规则的数量
	Count *uint64 `json:"Count,omitnil,omitempty" name:"Count"`

	// 关联规则的名称（仅展示其中一条）
	// 注意：此字段可能返回 null，表示取不到有效值。
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`
}

type FileTamperRuleDetail struct {
	// 规则名称
	// 注意：此字段可能返回 null，表示取不到有效值。
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// 更新时间
	ModifyTime *string `json:"ModifyTime,omitnil,omitempty" name:"ModifyTime"`

	// 创建时间
	CreateTime *string `json:"CreateTime,omitnil,omitempty" name:"CreateTime"`

	// 状态 0: 启用 1: 已关闭
	Status *uint64 `json:"Status,omitnil,omitempty" name:"Status"`

	// 规则
	Rule []*FileTamperRule `json:"Rule,omitnil,omitempty" name:"Rule"`

	// 生效主机uuid,空表示全部主机，通过参数可控制返回的条数
	// 注意：此字段可能返回 null，表示取不到有效值。
	Uuids []*string `json:"Uuids,omitnil,omitempty" name:"Uuids"`

	// 规则id
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`

	// 是否全局规则(默认否) 0：否 ，1：是
	IsGlobal *uint64 `json:"IsGlobal,omitnil,omitempty" name:"IsGlobal"`

	// 风险等级 0：无， 1: 高危， 2:中危， 3: 低危
	Level *uint64 `json:"Level,omitnil,omitempty" name:"Level"`

	// 生效主机的总数
	UuidTotalCount *uint64 `json:"UuidTotalCount,omitnil,omitempty" name:"UuidTotalCount"`

	// 加白处理类型
	// <li>cur 仅对当前加白</li>
	// <li>all 所有符合条件加白</li>
	// 注意：此字段可能返回 null，表示取不到有效值。
	AddWhiteType *string `json:"AddWhiteType,omitnil,omitempty" name:"AddWhiteType"`
}

type FileTamperRuleInfo struct {
	// 规则名称
	// 注意：此字段可能返回 null，表示取不到有效值。
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// 规则类型 0 ：系统规则  1：用户规则
	RuleCategory *uint64 `json:"RuleCategory,omitnil,omitempty" name:"RuleCategory"`

	// 影响主机数
	// 注意：此字段可能返回 null，表示取不到有效值。
	HostCount *uint64 `json:"HostCount,omitnil,omitempty" name:"HostCount"`

	// 更新时间
	ModifyTime *string `json:"ModifyTime,omitnil,omitempty" name:"ModifyTime"`

	// 创建时间
	CreateTime *string `json:"CreateTime,omitnil,omitempty" name:"CreateTime"`

	// 状态 0: 启用 1: 已关闭
	Status *uint64 `json:"Status,omitnil,omitempty" name:"Status"`

	// 规则id，系统的规则时为0。
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`

	// 是否是全局的 0：否 ，1：是
	IsGlobal *uint64 `json:"IsGlobal,omitnil,omitempty" name:"IsGlobal"`

	// 风险等级 0：无， 1: 高危， 2:中危， 3: 低危
	Level *uint64 `json:"Level,omitnil,omitempty" name:"Level"`

	// 子规则写条目数
	// 注意：此字段可能返回 null，表示取不到有效值。
	WriteRuleCount *uint64 `json:"WriteRuleCount,omitnil,omitempty" name:"WriteRuleCount"`

	// 子规则读条目数
	// 注意：此字段可能返回 null，表示取不到有效值。
	ReadRuleCount *uint64 `json:"ReadRuleCount,omitnil,omitempty" name:"ReadRuleCount"`

	// 子规则读写条目数
	// 注意：此字段可能返回 null，表示取不到有效值。
	ReadWriteRuleCount *uint64 `json:"ReadWriteRuleCount,omitnil,omitempty" name:"ReadWriteRuleCount"`

	// 监控行为
	// <li>read 读取文件</li>
	// <li>write 修改文件</li>
	// <li>read-write 读取修改文件</li>
	// 注意：此字段可能返回 null，表示取不到有效值。
	FileAction *string `json:"FileAction,omitnil,omitempty" name:"FileAction"`

	// 加白处理类型
	// <li>cur 仅对当前加白</li>
	// <li>all 所有符合条件加白</li>
	// 注意：此字段可能返回 null，表示取不到有效值。
	AddWhiteType *string `json:"AddWhiteType,omitnil,omitempty" name:"AddWhiteType"`
}

type Filter struct {
	// 过滤键的名称。
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// 一个或者多个过滤值。
	Values []*string `json:"Values,omitnil,omitempty" name:"Values"`

	// 模糊搜索
	ExactMatch *bool `json:"ExactMatch,omitnil,omitempty" name:"ExactMatch"`
}

type Filters struct {
	// 过滤键的名称。
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// 一个或者多个过滤值。
	Values []*string `json:"Values,omitnil,omitempty" name:"Values"`

	// 是否模糊匹配，前端框架会带上，可以不管
	ExactMatch *bool `json:"ExactMatch,omitnil,omitempty" name:"ExactMatch"`
}

// Predefined struct for user
type FixBaselineDetectRequestParams struct {
	// 主机Id
	HostId *string `json:"HostId,omitnil,omitempty" name:"HostId"`

	// 项Id
	ItemId *int64 `json:"ItemId,omitnil,omitempty" name:"ItemId"`

	// 修复内容
	Data []*string `json:"Data,omitnil,omitempty" name:"Data"`
}

type FixBaselineDetectRequest struct {
	*tchttp.BaseRequest
	
	// 主机Id
	HostId *string `json:"HostId,omitnil,omitempty" name:"HostId"`

	// 项Id
	ItemId *int64 `json:"ItemId,omitnil,omitempty" name:"ItemId"`

	// 修复内容
	Data []*string `json:"Data,omitnil,omitempty" name:"Data"`
}

func (r *FixBaselineDetectRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *FixBaselineDetectRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "HostId")
	delete(f, "ItemId")
	delete(f, "Data")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "FixBaselineDetectRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type FixBaselineDetectResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type FixBaselineDetectResponse struct {
	*tchttp.BaseResponse
	Response *FixBaselineDetectResponseParams `json:"Response"`
}

func (r *FixBaselineDetectResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *FixBaselineDetectResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type FullTextInfo struct {
	// 是否大小写敏感
	CaseSensitive *bool `json:"CaseSensitive,omitnil,omitempty" name:"CaseSensitive"`

	// 分词符
	Tokenizer *string `json:"Tokenizer,omitnil,omitempty" name:"Tokenizer"`

	// 是否包含中文
	ContainZH *bool `json:"ContainZH,omitnil,omitempty" name:"ContainZH"`
}

// Predefined struct for user
type GetLocalStorageItemRequestParams struct {
	// 键
	Key *string `json:"Key,omitnil,omitempty" name:"Key"`
}

type GetLocalStorageItemRequest struct {
	*tchttp.BaseRequest
	
	// 键
	Key *string `json:"Key,omitnil,omitempty" name:"Key"`
}

func (r *GetLocalStorageItemRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *GetLocalStorageItemRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Key")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "GetLocalStorageItemRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type GetLocalStorageItemResponseParams struct {
	// 值
	Value *string `json:"Value,omitnil,omitempty" name:"Value"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type GetLocalStorageItemResponse struct {
	*tchttp.BaseResponse
	Response *GetLocalStorageItemResponseParams `json:"Response"`
}

func (r *GetLocalStorageItemResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *GetLocalStorageItemResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type HistoryAccount struct {
	// 唯一ID。
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`

	// 主机安全客户端唯一Uuid。
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 主机内网IP。
	MachineIp *string `json:"MachineIp,omitnil,omitempty" name:"MachineIp"`

	// 主机名。
	MachineName *string `json:"MachineName,omitnil,omitempty" name:"MachineName"`

	// 帐号名。
	Username *string `json:"Username,omitnil,omitempty" name:"Username"`

	// 帐号变更类型。
	// <li>CREATE：表示新增帐号</li>
	// <li>MODIFY：表示修改帐号</li>
	// <li>DELETE：表示删除帐号</li>
	ModifyType *string `json:"ModifyType,omitnil,omitempty" name:"ModifyType"`

	// 变更时间。
	ModifyTime *string `json:"ModifyTime,omitnil,omitempty" name:"ModifyTime"`
}

type HostDesc struct {
	// 云镜客户端ID
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 主机ID
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 机器名
	MachineName *string `json:"MachineName,omitnil,omitempty" name:"MachineName"`

	// 机器IP:已销毁的服务器IP为空
	MachineIp *string `json:"MachineIp,omitnil,omitempty" name:"MachineIp"`

	// 公网IP:已销毁的服务器IP为空
	MachineWanIp *string `json:"MachineWanIp,omitnil,omitempty" name:"MachineWanIp"`

	// 标签信息数组
	Tags []*MachineTag `json:"Tags,omitnil,omitempty" name:"Tags"`
}

type HostInfo struct {
	// 主机Quuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// Uuid主机
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`
}

type HostLoginList struct {
	// 记录Id
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`

	// Uuid串
	// 注意：此字段可能返回 null，表示取不到有效值。
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 主机ip
	// 注意：此字段可能返回 null，表示取不到有效值。
	MachineIp *string `json:"MachineIp,omitnil,omitempty" name:"MachineIp"`

	// 主机名
	// 注意：此字段可能返回 null，表示取不到有效值。
	MachineName *string `json:"MachineName,omitnil,omitempty" name:"MachineName"`

	// 用户名
	// 注意：此字段可能返回 null，表示取不到有效值。
	UserName *string `json:"UserName,omitnil,omitempty" name:"UserName"`

	// 来源ip
	// 注意：此字段可能返回 null，表示取不到有效值。
	SrcIp *string `json:"SrcIp,omitnil,omitempty" name:"SrcIp"`

	// 1:正常登录；2异地登录； 5已加白； 14：已处理；15：已忽略。
	Status *uint64 `json:"Status,omitnil,omitempty" name:"Status"`

	// 国家id
	// 注意：此字段可能返回 null，表示取不到有效值。
	Country *uint64 `json:"Country,omitnil,omitempty" name:"Country"`

	// 城市id
	// 注意：此字段可能返回 null，表示取不到有效值。
	City *uint64 `json:"City,omitnil,omitempty" name:"City"`

	// 省份id
	// 注意：此字段可能返回 null，表示取不到有效值。
	Province *uint64 `json:"Province,omitnil,omitempty" name:"Province"`

	// 登录时间
	// 注意：此字段可能返回 null，表示取不到有效值。
	LoginTime *string `json:"LoginTime,omitnil,omitempty" name:"LoginTime"`

	// 修改时间
	// 注意：此字段可能返回 null，表示取不到有效值。
	ModifyTime *string `json:"ModifyTime,omitnil,omitempty" name:"ModifyTime"`

	// 是否命中异地登录异常  1表示命中此类异常, 0表示未命中
	// 注意：此字段可能返回 null，表示取不到有效值。
	IsRiskArea *uint64 `json:"IsRiskArea,omitnil,omitempty" name:"IsRiskArea"`

	// 是否命中异常用户异常 1表示命中此类异常, 0表示未命中
	// 注意：此字段可能返回 null，表示取不到有效值。
	IsRiskUser *uint64 `json:"IsRiskUser,omitnil,omitempty" name:"IsRiskUser"`

	// 是否命中异常时间异常 1表示命中此类异常, 0表示未命中
	// 注意：此字段可能返回 null，表示取不到有效值。
	IsRiskTime *uint64 `json:"IsRiskTime,omitnil,omitempty" name:"IsRiskTime"`

	// 是否命中异常IP异常 1表示命中此类异常, 0表示未命中
	// 注意：此字段可能返回 null，表示取不到有效值。
	IsRiskSrcIp *uint64 `json:"IsRiskSrcIp,omitnil,omitempty" name:"IsRiskSrcIp"`

	// 危险等级：
	// 0 高危
	// 1 可疑
	// 注意：此字段可能返回 null，表示取不到有效值。
	RiskLevel *uint64 `json:"RiskLevel,omitnil,omitempty" name:"RiskLevel"`

	// 位置名称
	// 注意：此字段可能返回 null，表示取不到有效值。
	Location *string `json:"Location,omitnil,omitempty" name:"Location"`

	// 主机quuid
	// 注意：此字段可能返回 null，表示取不到有效值。
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 高危信息说明：
	// ABROAD - 海外IP；
	// XTI - 威胁情报
	// 注意：此字段可能返回 null，表示取不到有效值。
	Desc *string `json:"Desc,omitnil,omitempty" name:"Desc"`

	// 附加信息
	// 注意：此字段可能返回 null，表示取不到有效值。
	MachineExtraInfo *MachineExtraInfo `json:"MachineExtraInfo,omitnil,omitempty" name:"MachineExtraInfo"`

	// 请求目的端口
	// 注意：此字段可能返回 null，表示取不到有效值。
	Port *int64 `json:"Port,omitnil,omitempty" name:"Port"`
}

type HostLoginWhiteObj struct {
	// 加白地域
	Places []*Place `json:"Places,omitnil,omitempty" name:"Places"`

	// 加白源IP，支持网段，多个IP以逗号隔开
	SrcIp *string `json:"SrcIp,omitnil,omitempty" name:"SrcIp"`

	// 加白用户名，多个用户名以逗号隔开
	UserName *string `json:"UserName,omitnil,omitempty" name:"UserName"`

	// 是否对全局生效, 1：全局有效 0: 仅针对单台主机'
	IsGlobal *uint64 `json:"IsGlobal,omitnil,omitempty" name:"IsGlobal"`

	// 白名单生效的机器信息列表
	HostInfos []*HostInfo `json:"HostInfos,omitnil,omitempty" name:"HostInfos"`

	// 备注
	Remark *string `json:"Remark,omitnil,omitempty" name:"Remark"`

	// 开始时间
	StartTime *string `json:"StartTime,omitnil,omitempty" name:"StartTime"`

	// 结束时间
	EndTime *string `json:"EndTime,omitnil,omitempty" name:"EndTime"`
}

type HostRiskLevelCount struct {
	// 主机ID
	HostId *string `json:"HostId,omitnil,omitempty" name:"HostId"`

	// 主机名
	// 注意：此字段可能返回 null，表示取不到有效值。
	HostName *string `json:"HostName,omitnil,omitempty" name:"HostName"`

	// 严重个数
	SeriousCount *int64 `json:"SeriousCount,omitnil,omitempty" name:"SeriousCount"`

	// 高危个数
	HighCount *int64 `json:"HighCount,omitnil,omitempty" name:"HighCount"`

	// 中危个数
	MediumCount *int64 `json:"MediumCount,omitnil,omitempty" name:"MediumCount"`

	// 低危个数
	LowCount *int64 `json:"LowCount,omitnil,omitempty" name:"LowCount"`
}

type HostTagInfo struct {
	// 主机Quuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 主机标签名数组
	TagList []*string `json:"TagList,omitnil,omitempty" name:"TagList"`

	// 主机内网Ip
	HostIp *string `json:"HostIp,omitnil,omitempty" name:"HostIp"`

	// 主机名
	AliasName *string `json:"AliasName,omitnil,omitempty" name:"AliasName"`

	// 主机公网ip
	MachineWanIp *string `json:"MachineWanIp,omitnil,omitempty" name:"MachineWanIp"`

	// 主机uuid
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 内核版本号
	KernelVersion *string `json:"KernelVersion,omitnil,omitempty" name:"KernelVersion"`

	// 主机在线状态 ONLINE，OFFLINE
	MachineStatus *string `json:"MachineStatus,omitnil,omitempty" name:"MachineStatus"`

	// 防护版本 BASIC_VERSION 基础版, PRO_VERSION 专业版 Flagship 旗舰版
	ProtectType *string `json:"ProtectType,omitnil,omitempty" name:"ProtectType"`

	// 漏洞数
	VulNum *int64 `json:"VulNum,omitnil,omitempty" name:"VulNum"`

	// 云标签信息
	CloudTags []*Tags `json:"CloudTags,omitnil,omitempty" name:"CloudTags"`

	// 主机instance ID
	InstanceID *string `json:"InstanceID,omitnil,omitempty" name:"InstanceID"`
}

type IgnoreBaselineRule struct {
	// 基线检测项名称
	// 注意：此字段可能返回 null，表示取不到有效值。
	RuleName *string `json:"RuleName,omitnil,omitempty" name:"RuleName"`

	// 基线检测项id
	// 注意：此字段可能返回 null，表示取不到有效值。
	RuleId *uint64 `json:"RuleId,omitnil,omitempty" name:"RuleId"`

	// 更新时间
	// 注意：此字段可能返回 null，表示取不到有效值。
	ModifyTime *string `json:"ModifyTime,omitnil,omitempty" name:"ModifyTime"`

	// 修复建议
	// 注意：此字段可能返回 null，表示取不到有效值。
	Fix *string `json:"Fix,omitnil,omitempty" name:"Fix"`

	// 影响主机数
	// 注意：此字段可能返回 null，表示取不到有效值。
	EffectHostCount *uint64 `json:"EffectHostCount,omitnil,omitempty" name:"EffectHostCount"`
}

// Predefined struct for user
type IgnoreImpactedHostsRequestParams struct {
	// 漏洞ID数组。
	Ids []*uint64 `json:"Ids,omitnil,omitempty" name:"Ids"`
}

type IgnoreImpactedHostsRequest struct {
	*tchttp.BaseRequest
	
	// 漏洞ID数组。
	Ids []*uint64 `json:"Ids,omitnil,omitempty" name:"Ids"`
}

func (r *IgnoreImpactedHostsRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *IgnoreImpactedHostsRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Ids")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "IgnoreImpactedHostsRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type IgnoreImpactedHostsResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type IgnoreImpactedHostsResponse struct {
	*tchttp.BaseResponse
	Response *IgnoreImpactedHostsResponseParams `json:"Response"`
}

func (r *IgnoreImpactedHostsResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *IgnoreImpactedHostsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type IgnoreRuleEffectHostInfo struct {
	// 主机名称
	HostName *string `json:"HostName,omitnil,omitempty" name:"HostName"`

	// 危害等级：1-低位，2-中危，3-高危，4-严重
	Level *uint64 `json:"Level,omitnil,omitempty" name:"Level"`

	// 主机标签数组
	TagList []*string `json:"TagList,omitnil,omitempty" name:"TagList"`

	// 状态：0-未通过，1-忽略，3-已通过，5-检测中
	Status *uint64 `json:"Status,omitnil,omitempty" name:"Status"`

	// 最后检测时间
	LastScanTime *string `json:"LastScanTime,omitnil,omitempty" name:"LastScanTime"`

	// 事件id
	EventId *uint64 `json:"EventId,omitnil,omitempty" name:"EventId"`

	// 主机quuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`
}

type IncidentVertexInfo struct {
	// 事件id
	// 注意：此字段可能返回 null，表示取不到有效值。
	IncidentId *string `json:"IncidentId,omitnil,omitempty" name:"IncidentId"`

	// 事件所在表名
	// 注意：此字段可能返回 null，表示取不到有效值。
	TableName *string `json:"TableName,omitnil,omitempty" name:"TableName"`

	// 节点信息列表，数组项中包含节点详细信息
	// 注意：此字段可能返回 null，表示取不到有效值。
	Vertex []*VertexInfo `json:"Vertex,omitnil,omitempty" name:"Vertex"`

	// 节点总个数
	// 注意：此字段可能返回 null，表示取不到有效值。
	VertexCount *int64 `json:"VertexCount,omitnil,omitempty" name:"VertexCount"`
}

type Item struct {
	// Id
	ItemId *int64 `json:"ItemId,omitnil,omitempty" name:"ItemId"`

	// 名称
	ItemName *string `json:"ItemName,omitnil,omitempty" name:"ItemName"`

	// 自定义阈值
	CustomItemValues []*uint64 `json:"CustomItemValues,omitnil,omitempty" name:"CustomItemValues"`

	// 检测项所属分类
	CategoryId *int64 `json:"CategoryId,omitnil,omitempty" name:"CategoryId"`
}

type JavaMemShellDetail struct {
	// 容器名
	InstanceName *string `json:"InstanceName,omitnil,omitempty" name:"InstanceName"`

	// 实例状态：RUNNING,STOPPED,SHUTDOWN...
	InstanceState *string `json:"InstanceState,omitnil,omitempty" name:"InstanceState"`

	// 内网IP
	PrivateIp *string `json:"PrivateIp,omitnil,omitempty" name:"PrivateIp"`

	// 公共ip
	PublicIp *string `json:"PublicIp,omitnil,omitempty" name:"PublicIp"`

	// 内存马类型  0:Filter型 1:Listener型 2:Servlet型 3:Interceptors型 4:Agent型 5:其他
	Type *uint64 `json:"Type,omitnil,omitempty" name:"Type"`

	// 说明
	Description *string `json:"Description,omitnil,omitempty" name:"Description"`

	// 首次发现时间
	CreateTime *string `json:"CreateTime,omitnil,omitempty" name:"CreateTime"`

	// 最近检测时间
	RecentFoundTime *string `json:"RecentFoundTime,omitnil,omitempty" name:"RecentFoundTime"`

	// 处理状态  0 -- 待处理 1 -- 已加白 2 -- 已删除 3 - 已忽略  4 - 已手动处理
	Status *uint64 `json:"Status,omitnil,omitempty" name:"Status"`

	// java加载器类名
	ClassLoaderName *string `json:"ClassLoaderName,omitnil,omitempty" name:"ClassLoaderName"`

	// 父类名
	SuperClassName *string `json:"SuperClassName,omitnil,omitempty" name:"SuperClassName"`

	// 类文件MD5
	Md5 *string `json:"Md5,omitnil,omitempty" name:"Md5"`

	// 继承的接口
	Interfaces *string `json:"Interfaces,omitnil,omitempty" name:"Interfaces"`

	// 注释
	Annotations *string `json:"Annotations,omitnil,omitempty" name:"Annotations"`

	// 进程pid
	Pid *uint64 `json:"Pid,omitnil,omitempty" name:"Pid"`

	// java进程路径
	Exe *string `json:"Exe,omitnil,omitempty" name:"Exe"`

	// java进程命令行参数
	Args *string `json:"Args,omitnil,omitempty" name:"Args"`

	// 类名
	ClassName *string `json:"ClassName,omitnil,omitempty" name:"ClassName"`

	// java内存马二进制代码(base64)
	ClassContent *string `json:"ClassContent,omitnil,omitempty" name:"ClassContent"`

	// java内存马反编译代码
	ClassContentPretty *string `json:"ClassContentPretty,omitnil,omitempty" name:"ClassContentPretty"`

	// 事件描述
	EventDescription *string `json:"EventDescription,omitnil,omitempty" name:"EventDescription"`

	// 安全建议
	SecurityAdvice *string `json:"SecurityAdvice,omitnil,omitempty" name:"SecurityAdvice"`

	//  主机额外信息
	// 注意：此字段可能返回 null，表示取不到有效值。
	MachineExtraInfo *MachineExtraInfo `json:"MachineExtraInfo,omitnil,omitempty" name:"MachineExtraInfo"`

	// agent状态：OFFLINE,ONLINE
	MachineState *string `json:"MachineState,omitnil,omitempty" name:"MachineState"`
}

type JavaMemShellInfo struct {
	// 事件ID
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`

	// 服务器名称
	// 注意：此字段可能返回 null，表示取不到有效值。
	Alias *string `json:"Alias,omitnil,omitempty" name:"Alias"`

	// 服务器IP
	// 注意：此字段可能返回 null，表示取不到有效值。
	HostIp *string `json:"HostIp,omitnil,omitempty" name:"HostIp"`

	// 内存马类型  0:Filter型 1:Listener型 2:Servlet型 3:Interceptors型 4:Agent型 5:其他
	Type *uint64 `json:"Type,omitnil,omitempty" name:"Type"`

	// 说明
	Description *string `json:"Description,omitnil,omitempty" name:"Description"`

	// 首次发现时间
	CreateTime *string `json:"CreateTime,omitnil,omitempty" name:"CreateTime"`

	// 最近检测时间
	RecentFoundTime *string `json:"RecentFoundTime,omitnil,omitempty" name:"RecentFoundTime"`

	// 处理状态  0 -- 待处理 1 -- 已加白 2 -- 已删除 3 - 已忽略  4 - 已手动处理
	Status *uint64 `json:"Status,omitnil,omitempty" name:"Status"`

	// 服务器quuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 主机额外信息
	// 注意：此字段可能返回 null，表示取不到有效值。
	MachineExtraInfo *MachineExtraInfo `json:"MachineExtraInfo,omitnil,omitempty" name:"MachineExtraInfo"`

	// 服务器uuid
	// 注意：此字段可能返回 null，表示取不到有效值。
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 类名
	// 注意：此字段可能返回 null，表示取不到有效值。
	ClassName *string `json:"ClassName,omitnil,omitempty" name:"ClassName"`

	// 父类名
	// 注意：此字段可能返回 null，表示取不到有效值。
	SuperClassName *string `json:"SuperClassName,omitnil,omitempty" name:"SuperClassName"`

	// 继承的接口
	// 注意：此字段可能返回 null，表示取不到有效值。
	Interfaces *string `json:"Interfaces,omitnil,omitempty" name:"Interfaces"`

	// 注释
	// 注意：此字段可能返回 null，表示取不到有效值。
	Annotations *string `json:"Annotations,omitnil,omitempty" name:"Annotations"`

	// 所属的类加载器
	// 注意：此字段可能返回 null，表示取不到有效值。
	LoaderClassName *string `json:"LoaderClassName,omitnil,omitempty" name:"LoaderClassName"`
}

type JavaMemShellPluginInfo struct {
	// 注入进程pid
	Pid *uint64 `json:"Pid,omitnil,omitempty" name:"Pid"`

	// 注入进程主类
	MainClass *string `json:"MainClass,omitnil,omitempty" name:"MainClass"`

	// 注入状态：0: 注入中, 1: 注入成功, 2: 插件超时, 3: 插件退出, 4: 注入失败 5: 软删除
	Status *uint64 `json:"Status,omitnil,omitempty" name:"Status"`

	// 错误日志
	ErrorLog *string `json:"ErrorLog,omitnil,omitempty" name:"ErrorLog"`
}

type JavaMemShellPluginSetting struct {
	// 容器quuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 服务器名
	Alias *string `json:"Alias,omitnil,omitempty" name:"Alias"`

	// 服务器ip
	HostIp *string `json:"HostIp,omitnil,omitempty" name:"HostIp"`

	// javashell插件开关 0: 关闭 1: 开启
	JavaShellStatus *uint64 `json:"JavaShellStatus,omitnil,omitempty" name:"JavaShellStatus"`

	// 插件是否存在异常 0: 正常 1: 异常
	Exception *uint64 `json:"Exception,omitnil,omitempty" name:"Exception"`

	// 创建时间
	CreateTime *string `json:"CreateTime,omitnil,omitempty" name:"CreateTime"`

	// 修改时间
	ModifyTime *string `json:"ModifyTime,omitnil,omitempty" name:"ModifyTime"`

	// 服务器uuid
	// 注意：此字段可能返回 null，表示取不到有效值。
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 主机额外信息
	// 注意：此字段可能返回 null，表示取不到有效值。
	MachineExtraInfo *MachineExtraInfo `json:"MachineExtraInfo,omitnil,omitempty" name:"MachineExtraInfo"`
}

type KeyValueArrayInfo struct {
	// 需要配置键值或者元字段索引的字段
	Key *string `json:"Key,omitnil,omitempty" name:"Key"`

	// 字段的索引描述信息
	Value *ValueInfo `json:"Value,omitnil,omitempty" name:"Value"`
}

type KeyValueInfo struct {
	// 是否大小写敏感
	CaseSensitive *bool `json:"CaseSensitive,omitnil,omitempty" name:"CaseSensitive"`

	// 需要建立索引的键值对信息
	// 注意：此字段可能返回 null，表示取不到有效值。
	KeyValues []*KeyValueArrayInfo `json:"KeyValues,omitnil,omitempty" name:"KeyValues"`
}

// Predefined struct for user
type KeysLocalStorageRequestParams struct {

}

type KeysLocalStorageRequest struct {
	*tchttp.BaseRequest
	
}

func (r *KeysLocalStorageRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *KeysLocalStorageRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "KeysLocalStorageRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type KeysLocalStorageResponseParams struct {
	// 键列表
	// 注意：此字段可能返回 null，表示取不到有效值。
	Keys []*string `json:"Keys,omitnil,omitempty" name:"Keys"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type KeysLocalStorageResponse struct {
	*tchttp.BaseResponse
	Response *KeysLocalStorageResponseParams `json:"Response"`
}

func (r *KeysLocalStorageResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *KeysLocalStorageResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type LicenseBindDetail struct {
	// 机器别名
	MachineName *string `json:"MachineName,omitnil,omitempty" name:"MachineName"`

	// 机器公网IP
	MachineWanIp *string `json:"MachineWanIp,omitnil,omitempty" name:"MachineWanIp"`

	// 机器内网IP
	MachineIp *string `json:"MachineIp,omitnil,omitempty" name:"MachineIp"`

	// 云服务器UUID
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 主机安全客户端UUID
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 标签信息
	Tags []*string `json:"Tags,omitnil,omitempty" name:"Tags"`

	// 主机安全客户端状态,OFFLINE 离线,ONLINE 在线,UNINSTALL 未安装
	AgentStatus *string `json:"AgentStatus,omitnil,omitempty" name:"AgentStatus"`

	// 是否允许解绑,false 不允许解绑
	IsUnBind *bool `json:"IsUnBind,omitnil,omitempty" name:"IsUnBind"`

	// 是否允许换绑,false 不允许换绑
	IsSwitchBind *bool `json:"IsSwitchBind,omitnil,omitempty" name:"IsSwitchBind"`

	// 主机额外信息
	// 注意：此字段可能返回 null，表示取不到有效值。
	MachineExtraInfo *MachineExtraInfo `json:"MachineExtraInfo,omitnil,omitempty" name:"MachineExtraInfo"`
}

type LicenseBindTaskDetail struct {
	// 云服务器UUID
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 错误信息
	ErrMsg *string `json:"ErrMsg,omitnil,omitempty" name:"ErrMsg"`

	// 0 执行中, 1 成功,2失败
	Status *uint64 `json:"Status,omitnil,omitempty" name:"Status"`

	// 修复建议
	FixMessage *string `json:"FixMessage,omitnil,omitempty" name:"FixMessage"`

	// 机器额外信息
	// 注意：此字段可能返回 null，表示取不到有效值。
	MachineExtraInfo *MachineExtraInfo `json:"MachineExtraInfo,omitnil,omitempty" name:"MachineExtraInfo"`
}

type LicenseDetail struct {
	// 授权ID
	LicenseId *uint64 `json:"LicenseId,omitnil,omitempty" name:"LicenseId"`

	// 授权类型,0 专业版-按量计费, 1专业版-包年包月 , 2 旗舰版-包年包月
	LicenseType *uint64 `json:"LicenseType,omitnil,omitempty" name:"LicenseType"`

	// 授权状态 0 未使用,1 部分使用, 2 已用完, 3 不可用
	// 注意：此字段可能返回 null，表示取不到有效值。
	LicenseStatus *uint64 `json:"LicenseStatus,omitnil,omitempty" name:"LicenseStatus"`

	// 总授权数
	LicenseCnt *uint64 `json:"LicenseCnt,omitnil,omitempty" name:"LicenseCnt"`

	// 已使用授权数
	UsedLicenseCnt *uint64 `json:"UsedLicenseCnt,omitnil,omitempty" name:"UsedLicenseCnt"`

	// 订单状态 1 正常 2隔离, 3销毁
	OrderStatus *uint64 `json:"OrderStatus,omitnil,omitempty" name:"OrderStatus"`

	// 截止日期
	Deadline *string `json:"Deadline,omitnil,omitempty" name:"Deadline"`

	// 订单资源ID
	ResourceId *string `json:"ResourceId,omitnil,omitempty" name:"ResourceId"`

	// 0 初始化,1 自动续费,2 不自动续费
	AutoRenewFlag *uint64 `json:"AutoRenewFlag,omitnil,omitempty" name:"AutoRenewFlag"`

	// 项目ID
	ProjectId *uint64 `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// 任务ID ,默认0 ,查询绑定进度用
	TaskId *uint64 `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// 购买时间
	BuyTime *string `json:"BuyTime,omitnil,omitempty" name:"BuyTime"`

	// 是否试用订单.
	SourceType *uint64 `json:"SourceType,omitnil,omitempty" name:"SourceType"`

	// 资源别名
	Alias *string `json:"Alias,omitnil,omitempty" name:"Alias"`

	// 平台标签
	// 注意：此字段可能返回 null，表示取不到有效值。
	Tags []*Tags `json:"Tags,omitnil,omitempty" name:"Tags"`

	// 冻结数,当为0时 为未冻结,非0 则表示冻结授权数额
	// 注意：此字段可能返回 null，表示取不到有效值。
	FreezeNum *int64 `json:"FreezeNum,omitnil,omitempty" name:"FreezeNum"`
}

type LicenseOrder struct {
	// 授权ID
	LicenseId *uint64 `json:"LicenseId,omitnil,omitempty" name:"LicenseId"`

	// 授权类型
	LicenseType *uint64 `json:"LicenseType,omitnil,omitempty" name:"LicenseType"`

	// 授权订单资源状态
	Status *uint64 `json:"Status,omitnil,omitempty" name:"Status"`

	// 订单类型
	SourceType *uint64 `json:"SourceType,omitnil,omitempty" name:"SourceType"`

	// 资源ID
	ResourceId *string `json:"ResourceId,omitnil,omitempty" name:"ResourceId"`
}

type LicenseUnBindRsp struct {
	// QUUID 云服务器uuid,轻量服务器uuid,边缘计算 uuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 失败原因
	ErrMsg *string `json:"ErrMsg,omitnil,omitempty" name:"ErrMsg"`
}

type LogHistogram struct {
	// 统计周期内的日志条数
	Count *int64 `json:"Count,omitnil,omitempty" name:"Count"`

	// 按 period 取整后的 unix timestamp： 单位毫秒
	TimeStamp *int64 `json:"TimeStamp,omitnil,omitempty" name:"TimeStamp"`
}

type LogInfo struct {
	// 日志内容的Json序列化字符串
	Content *string `json:"Content,omitnil,omitempty" name:"Content"`

	// 日志文件名称
	FileName *string `json:"FileName,omitnil,omitempty" name:"FileName"`

	// 日志来源IP
	Source *string `json:"Source,omitnil,omitempty" name:"Source"`

	// 日志时间，单位ms
	TimeStamp *int64 `json:"TimeStamp,omitnil,omitempty" name:"TimeStamp"`
}

type LogStorageRecord struct {
	// 年月份
	// 注意：此字段可能返回 null，表示取不到有效值。
	Month *string `json:"Month,omitnil,omitempty" name:"Month"`

	// 存储量，字节
	// 注意：此字段可能返回 null，表示取不到有效值。
	UsedSize *uint64 `json:"UsedSize,omitnil,omitempty" name:"UsedSize"`

	// 总量，字节
	// 注意：此字段可能返回 null，表示取不到有效值。
	InquireSize *uint64 `json:"InquireSize,omitnil,omitempty" name:"InquireSize"`
}

type LoginWhiteCombinedInfo struct {
	// 白名单地域
	// 注意：此字段可能返回 null，表示取不到有效值。
	Places []*Place `json:"Places,omitnil,omitempty" name:"Places"`

	// 白名单用户（多个用户逗号隔开）
	UserName *string `json:"UserName,omitnil,omitempty" name:"UserName"`

	// 白名单IP（多个IP逗号隔开）
	SrcIp *string `json:"SrcIp,omitnil,omitempty" name:"SrcIp"`

	// 地域字符串
	Locale *string `json:"Locale,omitnil,omitempty" name:"Locale"`

	// 备注
	Remark *string `json:"Remark,omitnil,omitempty" name:"Remark"`

	// 开始时间
	StartTime *string `json:"StartTime,omitnil,omitempty" name:"StartTime"`

	// 结束时间
	EndTime *string `json:"EndTime,omitnil,omitempty" name:"EndTime"`

	// 是否对全局生效, 1：全局有效 0: 对指定主机列表生效'
	IsGlobal *uint64 `json:"IsGlobal,omitnil,omitempty" name:"IsGlobal"`

	// 白名单名字：IsLocal=1时固定为：全部服务器；单台机器时为机器内网IP，多台服务器时为服务器数量，如：11台
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// 仅在单台服务器时，返回服务器名称
	Desc *string `json:"Desc,omitnil,omitempty" name:"Desc"`

	// 白名单ID
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`

	// 创建时间
	CreateTime *string `json:"CreateTime,omitnil,omitempty" name:"CreateTime"`

	// 最近修改时间
	ModifyTime *string `json:"ModifyTime,omitnil,omitempty" name:"ModifyTime"`

	// 服务器Uuid
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 登陆地
	Locations *string `json:"Locations,omitnil,omitempty" name:"Locations"`
}

type LoginWhiteLists struct {
	// 记录ID
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`

	// 云镜客户端ID
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 白名单地域
	Places []*Place `json:"Places,omitnil,omitempty" name:"Places"`

	// 白名单用户（多个用户逗号隔开）
	UserName *string `json:"UserName,omitnil,omitempty" name:"UserName"`

	// 白名单IP（多个IP逗号隔开）
	SrcIp *string `json:"SrcIp,omitnil,omitempty" name:"SrcIp"`

	// 是否为全局规则
	IsGlobal *bool `json:"IsGlobal,omitnil,omitempty" name:"IsGlobal"`

	// 创建白名单时间
	CreateTime *string `json:"CreateTime,omitnil,omitempty" name:"CreateTime"`

	// 修改白名单时间
	ModifyTime *string `json:"ModifyTime,omitnil,omitempty" name:"ModifyTime"`

	// 机器名
	MachineName *string `json:"MachineName,omitnil,omitempty" name:"MachineName"`

	// 机器IP
	HostIp *string `json:"HostIp,omitnil,omitempty" name:"HostIp"`

	// 起始时间
	StartTime *string `json:"StartTime,omitnil,omitempty" name:"StartTime"`

	// 结束时间
	EndTime *string `json:"EndTime,omitnil,omitempty" name:"EndTime"`
}

type Machine struct {
	// 主机名称。
	MachineName *string `json:"MachineName,omitnil,omitempty" name:"MachineName"`

	// 主机系统。
	MachineOs *string `json:"MachineOs,omitnil,omitempty" name:"MachineOs"`

	// 主机状态。
	// <li>OFFLINE: 离线  </li>
	// <li>ONLINE: 在线</li>
	// <li>SHUTDOWN: 已关机</li>
	// <li>UNINSTALLED: 未防护</li>
	MachineStatus *string `json:"MachineStatus,omitnil,omitempty" name:"MachineStatus"`

	// 云镜客户端唯一Uuid，若客户端长时间不在线将返回空字符。
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// CVM或BM机器唯一Uuid。
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 漏洞数。
	VulNum *int64 `json:"VulNum,omitnil,omitempty" name:"VulNum"`

	// 主机IP。
	MachineIp *string `json:"MachineIp,omitnil,omitempty" name:"MachineIp"`

	// 是否是专业版。
	// <li>true： 是</li>
	// <li>false：否</li>
	IsProVersion *bool `json:"IsProVersion,omitnil,omitempty" name:"IsProVersion"`

	// 主机外网IP。
	MachineWanIp *string `json:"MachineWanIp,omitnil,omitempty" name:"MachineWanIp"`

	// 主机状态。
	// <li>POSTPAY: 表示后付费，即按量计费  </li>
	// <li>PREPAY: 表示预付费，即包年包月</li>
	PayMode *string `json:"PayMode,omitnil,omitempty" name:"PayMode"`

	// 木马数。
	MalwareNum *int64 `json:"MalwareNum,omitnil,omitempty" name:"MalwareNum"`

	// 标签信息
	Tag []*MachineTag `json:"Tag,omitnil,omitempty" name:"Tag"`

	// 基线风险数。
	BaselineNum *int64 `json:"BaselineNum,omitnil,omitempty" name:"BaselineNum"`

	// 网络风险数。
	CyberAttackNum *int64 `json:"CyberAttackNum,omitnil,omitempty" name:"CyberAttackNum"`

	// 风险状态。
	// <li>SAFE：安全</li>
	// <li>RISK：风险</li>
	// <li>UNKNOWN：未知</li>
	SecurityStatus *string `json:"SecurityStatus,omitnil,omitempty" name:"SecurityStatus"`

	// 入侵事件数
	InvasionNum *int64 `json:"InvasionNum,omitnil,omitempty" name:"InvasionNum"`

	// 地域信息
	RegionInfo *RegionInfo `json:"RegionInfo,omitnil,omitempty" name:"RegionInfo"`

	// 实例状态 TERMINATED_PRO_VERSION 已销毁
	InstanceState *string `json:"InstanceState,omitnil,omitempty" name:"InstanceState"`

	// 防篡改 授权状态 1 授权 0 未授权
	LicenseStatus *uint64 `json:"LicenseStatus,omitnil,omitempty" name:"LicenseStatus"`

	// 项目ID
	ProjectId *int64 `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// 是否有资产扫描接口，0无，1有
	HasAssetScan *uint64 `json:"HasAssetScan,omitnil,omitempty" name:"HasAssetScan"`

	// 机器所属专区类型 CVM 云服务器, BM 黑石, ECM 边缘计算, LH 轻量应用服务器 ,Other 混合云专区
	MachineType *string `json:"MachineType,omitnil,omitempty" name:"MachineType"`

	// 内核版本
	KernelVersion *string `json:"KernelVersion,omitnil,omitempty" name:"KernelVersion"`

	// 防护版本：BASIC_VERSION 基础版， PRO_VERSION 专业版，Flagship 旗舰版，GENERAL_DISCOUNT 普惠版
	ProtectType *string `json:"ProtectType,omitnil,omitempty" name:"ProtectType"`

	// 云标签信息
	CloudTags []*Tags `json:"CloudTags,omitnil,omitempty" name:"CloudTags"`

	// 是否15天内新增的主机 0：非15天内新增的主机，1：15天内增加的主机
	IsAddedOnTheFifteen *uint64 `json:"IsAddedOnTheFifteen,omitnil,omitempty" name:"IsAddedOnTheFifteen"`

	// 主机ip列表
	IpList *string `json:"IpList,omitnil,omitempty" name:"IpList"`

	// 所属网络
	VpcId *string `json:"VpcId,omitnil,omitempty" name:"VpcId"`

	// 附加信息
	MachineExtraInfo *MachineExtraInfo `json:"MachineExtraInfo,omitnil,omitempty" name:"MachineExtraInfo"`

	// 实例ID
	InstanceId *string `json:"InstanceId,omitnil,omitempty" name:"InstanceId"`

	// 备注信息
	Remark *string `json:"Remark,omitnil,omitempty" name:"Remark"`
}

type MachineClearHistory struct {
	// ID值
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`

	// 实例ID
	InstanceId *string `json:"InstanceId,omitnil,omitempty" name:"InstanceId"`

	// 实例名称
	InstanceName *string `json:"InstanceName,omitnil,omitempty" name:"InstanceName"`

	// 公网IP
	PublicIp *string `json:"PublicIp,omitnil,omitempty" name:"PublicIp"`

	// 内网IP
	PrivateIp *string `json:"PrivateIp,omitnil,omitempty" name:"PrivateIp"`

	// 客户端最后离线时间
	AgentLastOfflineTime *string `json:"AgentLastOfflineTime,omitnil,omitempty" name:"AgentLastOfflineTime"`

	// 创建时间
	CreateTime *string `json:"CreateTime,omitnil,omitempty" name:"CreateTime"`
}

type MachineExtraInfo struct {
	// 公网IP
	WanIP *string `json:"WanIP,omitnil,omitempty" name:"WanIP"`

	// 内网IP
	PrivateIP *string `json:"PrivateIP,omitnil,omitempty" name:"PrivateIP"`

	// 网络类型，1:vpc网络 2:基础网络 3:非腾讯云网络
	NetworkType *int64 `json:"NetworkType,omitnil,omitempty" name:"NetworkType"`

	// 网络名，vpc网络情况下会返回vpc_id
	NetworkName *string `json:"NetworkName,omitnil,omitempty" name:"NetworkName"`

	// 实例ID
	InstanceID *string `json:"InstanceID,omitnil,omitempty" name:"InstanceID"`

	// 主机名
	HostName *string `json:"HostName,omitnil,omitempty" name:"HostName"`
}

type MachineFileTamperRule struct {
	// 规则名称
	// 注意：此字段可能返回 null，表示取不到有效值。
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// 规则类型 0 ：系统规则  1：用户规则
	RuleCategory *uint64 `json:"RuleCategory,omitnil,omitempty" name:"RuleCategory"`

	// 规则
	Rule []*FileTamperRule `json:"Rule,omitnil,omitempty" name:"Rule"`

	// 唯一id
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`
}

type MachineLicenseDetail struct {
	// 主机quuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 计费模式, 0 按量计费 , 1 预付费
	PayMode *uint64 `json:"PayMode,omitnil,omitempty" name:"PayMode"`

	// 资源ID
	ResourceId *string `json:"ResourceId,omitnil,omitempty" name:"ResourceId"`

	// 授权类型
	LicenseType *uint64 `json:"LicenseType,omitnil,omitempty" name:"LicenseType"`

	// 订单类型,0 默认计费订单 1 试用订单, 2 赠送 3 体验
	SourceType *uint64 `json:"SourceType,omitnil,omitempty" name:"SourceType"`

	// 废弃字段,
	InquireKey *string `json:"InquireKey,omitnil,omitempty" name:"InquireKey"`

	// 自动续费标识 0 默认不自动付费, 1 自动付费 2 手动设置不续费
	AutoRenewFlag *uint64 `json:"AutoRenewFlag,omitnil,omitempty" name:"AutoRenewFlag"`

	// 到期时间,按量付费该值为空
	Deadline *string `json:"Deadline,omitnil,omitempty" name:"Deadline"`

	// 购买时间
	BuyTime *string `json:"BuyTime,omitnil,omitempty" name:"BuyTime"`

	// 授权数量
	LicenseCnt *uint64 `json:"LicenseCnt,omitnil,omitempty" name:"LicenseCnt"`
}

type MachineSimple struct {
	// 主机名称。
	MachineName *string `json:"MachineName,omitnil,omitempty" name:"MachineName"`

	// 主机系统。
	MachineOs *string `json:"MachineOs,omitnil,omitempty" name:"MachineOs"`

	// 云镜客户端唯一Uuid，若客户端长时间不在线将返回空字符。
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// CVM或BM机器唯一Uuid。
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 主机IP。
	MachineIp *string `json:"MachineIp,omitnil,omitempty" name:"MachineIp"`

	// 是否是专业版。
	// <li>true： 是</li>
	// <li>false：否</li>
	IsProVersion *bool `json:"IsProVersion,omitnil,omitempty" name:"IsProVersion"`

	// 主机外网IP。
	MachineWanIp *string `json:"MachineWanIp,omitnil,omitempty" name:"MachineWanIp"`

	// 主机状态。
	// <li>POSTPAY: 表示后付费，即按量计费  </li>
	// <li>PREPAY: 表示预付费，即包年包月</li>
	PayMode *string `json:"PayMode,omitnil,omitempty" name:"PayMode"`

	// 标签信息
	Tag []*MachineTag `json:"Tag,omitnil,omitempty" name:"Tag"`

	// 地域信息
	RegionInfo *RegionInfo `json:"RegionInfo,omitnil,omitempty" name:"RegionInfo"`

	// 实例状态请参考CVM实例列表InstanceState值
	// https://cloud.tencent.com/document/api/213/15753#Instance
	InstanceState *string `json:"InstanceState,omitnil,omitempty" name:"InstanceState"`

	// 项目ID
	ProjectId *int64 `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// 机器所属专区类型 CVM 云服务器, BM 黑石, ECM 边缘计算, LH 轻量应用服务器 ,Other 混合云专区
	MachineType *string `json:"MachineType,omitnil,omitempty" name:"MachineType"`

	// 内核版本
	KernelVersion *string `json:"KernelVersion,omitnil,omitempty" name:"KernelVersion"`

	// 防护版本 BASIC_VERSION 基础版， PRO_VERSION 专业版，Flagship 旗舰版，GENERAL_DISCOUNT 普惠版.
	ProtectType *string `json:"ProtectType,omitnil,omitempty" name:"ProtectType"`

	// 授权订单对象
	// 注意：此字段可能返回 null，表示取不到有效值。
	LicenseOrder *LicenseOrder `json:"LicenseOrder,omitnil,omitempty" name:"LicenseOrder"`

	// 云标签信息
	// 注意：此字段可能返回 null，表示取不到有效值。
	CloudTags []*Tags `json:"CloudTags,omitnil,omitempty" name:"CloudTags"`

	// 实例ID
	// 注意：此字段可能返回 null，表示取不到有效值。
	InstanceId *string `json:"InstanceId,omitnil,omitempty" name:"InstanceId"`
}

type MachineSnapshotInfo struct {
	// cvm id
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 主机名称
	HostName *string `json:"HostName,omitnil,omitempty" name:"HostName"`

	// 主机ip
	HostIp *string `json:"HostIp,omitnil,omitempty" name:"HostIp"`

	// 快照名称
	SnapshotName *string `json:"SnapshotName,omitnil,omitempty" name:"SnapshotName"`

	// 快照创建时间
	CreateTime *string `json:"CreateTime,omitnil,omitempty" name:"CreateTime"`

	// 磁盘id
	DiskId *string `json:"DiskId,omitnil,omitempty" name:"DiskId"`

	// 实例Id
	InstanceId *string `json:"InstanceId,omitnil,omitempty" name:"InstanceId"`

	// 地区id
	RegionId *uint64 `json:"RegionId,omitnil,omitempty" name:"RegionId"`

	// 快照id
	SnapshotId *string `json:"SnapshotId,omitnil,omitempty" name:"SnapshotId"`
}

type MachineTag struct {
	// 关联标签ID
	Rid *int64 `json:"Rid,omitnil,omitempty" name:"Rid"`

	// 标签名
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// 标签ID
	TagId *uint64 `json:"TagId,omitnil,omitempty" name:"TagId"`
}

type MalWareList struct {
	// 服务器ip
	HostIp *string `json:"HostIp,omitnil,omitempty" name:"HostIp"`

	// 唯一UUID
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 路径
	FilePath *string `json:"FilePath,omitnil,omitempty" name:"FilePath"`

	// 病毒名称
	VirusName *string `json:"VirusName,omitnil,omitempty" name:"VirusName"`

	// 状态；4-:待处理，5-已信任，6-已隔离，8-文件已删除, 14:已处理，13-已加白
	Status *uint64 `json:"Status,omitnil,omitempty" name:"Status"`

	// 唯一ID
	// 注意：此字段可能返回 null，表示取不到有效值。
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`

	// 主机别名
	Alias *string `json:"Alias,omitnil,omitempty" name:"Alias"`

	// 特性标签，已废弃字段，不会再返回标签，详情中才会返回标签信息
	// 注意：此字段可能返回 null，表示取不到有效值。
	Tags []*string `json:"Tags,omitnil,omitempty" name:"Tags"`

	// 首次运行时间
	// 注意：此字段可能返回 null，表示取不到有效值。
	FileCreateTime *string `json:"FileCreateTime,omitnil,omitempty" name:"FileCreateTime"`

	// 最近运行时间
	// 注意：此字段可能返回 null，表示取不到有效值。
	FileModifierTime *string `json:"FileModifierTime,omitnil,omitempty" name:"FileModifierTime"`

	// 创建时间
	CreateTime *string `json:"CreateTime,omitnil,omitempty" name:"CreateTime"`

	// 最近扫描时间
	LatestScanTime *string `json:"LatestScanTime,omitnil,omitempty" name:"LatestScanTime"`

	// 风险等级 0未知、1低、2中、3高、4严重
	Level *uint64 `json:"Level,omitnil,omitempty" name:"Level"`

	// '木马检测平台用,分割 1云查杀引擎、2TAV、3binaryAi、4异常行为、5威胁情报
	CheckPlatform *string `json:"CheckPlatform,omitnil,omitempty" name:"CheckPlatform"`

	// 木马进程是否存在 0:不存在，1:存在
	ProcessExists *uint64 `json:"ProcessExists,omitnil,omitempty" name:"ProcessExists"`

	// 木马文件是否存在 0:不存在，1:存在
	FileExists *uint64 `json:"FileExists,omitnil,omitempty" name:"FileExists"`

	// cvm quuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 木马样本md5
	MD5 *string `json:"MD5,omitnil,omitempty" name:"MD5"`

	// 附加信息
	// 注意：此字段可能返回 null，表示取不到有效值。
	MachineExtraInfo *MachineExtraInfo `json:"MachineExtraInfo,omitnil,omitempty" name:"MachineExtraInfo"`
}

type MaliciousRequestWhiteListInfo struct {
	// 白名单id
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`

	// 域名
	Domain *string `json:"Domain,omitnil,omitempty" name:"Domain"`

	// 备注
	Mark *string `json:"Mark,omitnil,omitempty" name:"Mark"`

	// 创建时间
	CreateTime *string `json:"CreateTime,omitnil,omitempty" name:"CreateTime"`

	// 更新时间
	ModifyTime *string `json:"ModifyTime,omitnil,omitempty" name:"ModifyTime"`
}

type MalwareInfo struct {
	// 病毒名称
	VirusName *string `json:"VirusName,omitnil,omitempty" name:"VirusName"`

	// 文件大小
	FileSize *int64 `json:"FileSize,omitnil,omitempty" name:"FileSize"`

	// 文件MD5
	MD5 *string `json:"MD5,omitnil,omitempty" name:"MD5"`

	// 文件地址
	FilePath *string `json:"FilePath,omitnil,omitempty" name:"FilePath"`

	// 首次运行时间
	FileCreateTime *string `json:"FileCreateTime,omitnil,omitempty" name:"FileCreateTime"`

	// 最近一次运行时间
	FileModifierTime *string `json:"FileModifierTime,omitnil,omitempty" name:"FileModifierTime"`

	// 危害描述
	HarmDescribe *string `json:"HarmDescribe,omitnil,omitempty" name:"HarmDescribe"`

	// 建议方案
	SuggestScheme *string `json:"SuggestScheme,omitnil,omitempty" name:"SuggestScheme"`

	// 服务器名称
	ServersName *string `json:"ServersName,omitnil,omitempty" name:"ServersName"`

	// 服务器IP
	HostIp *string `json:"HostIp,omitnil,omitempty" name:"HostIp"`

	// 进程名称
	ProcessName *string `json:"ProcessName,omitnil,omitempty" name:"ProcessName"`

	// 进程ID
	ProcessID *string `json:"ProcessID,omitnil,omitempty" name:"ProcessID"`

	// 标签特性
	Tags []*string `json:"Tags,omitnil,omitempty" name:"Tags"`

	// 影响广度 // 暂时不提供
	// 注意：此字段可能返回 null，表示取不到有效值。
	Breadth *string `json:"Breadth,omitnil,omitempty" name:"Breadth"`

	// 查询热度 // 暂时不提供
	// 注意：此字段可能返回 null，表示取不到有效值。
	Heat *string `json:"Heat,omitnil,omitempty" name:"Heat"`

	// 唯一ID
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`

	// 文件名称
	FileName *string `json:"FileName,omitnil,omitempty" name:"FileName"`

	// 首次发现时间
	CreateTime *string `json:"CreateTime,omitnil,omitempty" name:"CreateTime"`

	// 最近扫描时间
	LatestScanTime *string `json:"LatestScanTime,omitnil,omitempty" name:"LatestScanTime"`

	// 参考链接
	Reference *string `json:"Reference,omitnil,omitempty" name:"Reference"`

	// 外网ip
	// 注意：此字段可能返回 null，表示取不到有效值。
	MachineWanIp *string `json:"MachineWanIp,omitnil,omitempty" name:"MachineWanIp"`

	// 进程树 json  pid:进程id，exe:文件路径 ，account:进程所属用组和用户 ,cmdline:执行命令，ssh_service: SSH服务ip, ssh_soure:登录源
	// 注意：此字段可能返回 null，表示取不到有效值。
	PsTree *string `json:"PsTree,omitnil,omitempty" name:"PsTree"`

	// 主机在线状态 OFFLINE  ONLINE
	// 注意：此字段可能返回 null，表示取不到有效值。
	MachineStatus *string `json:"MachineStatus,omitnil,omitempty" name:"MachineStatus"`

	// 状态；4-:待处理，5-已信任，6-已隔离
	// 注意：此字段可能返回 null，表示取不到有效值。
	Status *uint64 `json:"Status,omitnil,omitempty" name:"Status"`

	// 风险等级 0提示、1低、2中、3高、4严重
	// 注意：此字段可能返回 null，表示取不到有效值。
	Level *uint64 `json:"Level,omitnil,omitempty" name:"Level"`

	// 木马检测平台用,分割 1云查杀引擎、2TAV、3binaryAi、4异常行为、5威胁情报
	// 注意：此字段可能返回 null，表示取不到有效值。
	CheckPlatform *string `json:"CheckPlatform,omitnil,omitempty" name:"CheckPlatform"`

	// 主机uuid
	// 注意：此字段可能返回 null，表示取不到有效值。
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 最近修改时间
	// 注意：此字段可能返回 null，表示取不到有效值。
	ModifyTime *string `json:"ModifyTime,omitnil,omitempty" name:"ModifyTime"`

	// 最近访问时间
	// 注意：此字段可能返回 null，表示取不到有效值。
	StrFileAccessTime *string `json:"StrFileAccessTime,omitnil,omitempty" name:"StrFileAccessTime"`

	// 附加信息
	// 注意：此字段可能返回 null，表示取不到有效值。
	MachineExtraInfo *MachineExtraInfo `json:"MachineExtraInfo,omitnil,omitempty" name:"MachineExtraInfo"`

	// 参考链接
	// 注意：此字段可能返回 null，表示取不到有效值。
	References []*string `json:"References,omitnil,omitempty" name:"References"`
}

type MalwareRisk struct {
	// 机器IP
	MachineIp *string `json:"MachineIp,omitnil,omitempty" name:"MachineIp"`

	// 病毒名
	VirusName *string `json:"VirusName,omitnil,omitempty" name:"VirusName"`

	// 发现时间
	CreateTime *string `json:"CreateTime,omitnil,omitempty" name:"CreateTime"`

	// 唯一ID
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`
}

type MalwareRiskOverview struct {
	// 影响主机数
	HostCount *int64 `json:"HostCount,omitnil,omitempty" name:"HostCount"`

	// 异常进程数
	ProcessCount *int64 `json:"ProcessCount,omitnil,omitempty" name:"ProcessCount"`

	// 恶意文件数
	FileCount *int64 `json:"FileCount,omitnil,omitempty" name:"FileCount"`

	// 是否首次扫描[false:否|true:是]
	IsFirstScan *bool `json:"IsFirstScan,omitnil,omitempty" name:"IsFirstScan"`

	// 最后扫描时间
	ScanTime *string `json:"ScanTime,omitnil,omitempty" name:"ScanTime"`
}

type MalwareWhiteListAffectEvent struct {
	// 唯一ID。
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`

	// 主机ip
	HostIp *string `json:"HostIp,omitnil,omitempty" name:"HostIp"`

	// 影响的md5
	Md5 *string `json:"Md5,omitnil,omitempty" name:"Md5"`

	// 文件路径
	FilePath *string `json:"FilePath,omitnil,omitempty" name:"FilePath"`

	// 添加时间
	CreateTime *string `json:"CreateTime,omitnil,omitempty" name:"CreateTime"`
}

type MalwareWhiteListInfo struct {
	// 唯一ID。
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`

	// cvm quuid 按,分割。
	QuuidList *string `json:"QuuidList,omitnil,omitempty" name:"QuuidList"`

	// md5列表 按,分割
	Md5List *string `json:"Md5List,omitnil,omitempty" name:"Md5List"`

	// 是否全部主机； 0否，1是
	IsGlobal *uint64 `json:"IsGlobal,omitnil,omitempty" name:"IsGlobal"`

	// 白名单模式；0 MD5 ，1自定义
	Mode *uint64 `json:"Mode,omitnil,omitempty" name:"Mode"`

	// 匹配模式；0精确匹配，1模糊匹配
	MatchType *uint64 `json:"MatchType,omitnil,omitempty" name:"MatchType"`

	// 文件名；按,分割
	FileName *string `json:"FileName,omitnil,omitempty" name:"FileName"`

	// 文件目录；按,分割
	FileDirectory *string `json:"FileDirectory,omitnil,omitempty" name:"FileDirectory"`

	// 文件后缀；按,分割
	FileExtension *string `json:"FileExtension,omitnil,omitempty" name:"FileExtension"`

	// 规则创建时间
	CreateTime *string `json:"CreateTime,omitnil,omitempty" name:"CreateTime"`

	// 受影响记录
	EventsCount *uint64 `json:"EventsCount,omitnil,omitempty" name:"EventsCount"`

	// 规则修改时间
	ModifyTime *string `json:"ModifyTime,omitnil,omitempty" name:"ModifyTime"`
}

// Predefined struct for user
type ModifyAutoOpenProVersionConfigRequestParams struct {
	// 设置自动开通状态。
	// <li>CLOSE：关闭</li>
	// <li>OPEN：打开</li>
	Status *string `json:"Status,omitnil,omitempty" name:"Status"`

	// 自动加购/扩容授权开关,默认 1, 0关闭, 1开启
	AutoRepurchaseSwitch *uint64 `json:"AutoRepurchaseSwitch,omitnil,omitempty" name:"AutoRepurchaseSwitch"`

	// 自动加购的订单是否自动续费,默认0 ,0关闭, 1开启
	AutoRepurchaseRenewSwitch *uint64 `json:"AutoRepurchaseRenewSwitch,omitnil,omitempty" name:"AutoRepurchaseRenewSwitch"`

	// 手动购买的订单是否自动续费,默认0, 0关闭 ,1 开启
	RepurchaseRenewSwitch *uint64 `json:"RepurchaseRenewSwitch,omitnil,omitempty" name:"RepurchaseRenewSwitch"`
}

type ModifyAutoOpenProVersionConfigRequest struct {
	*tchttp.BaseRequest
	
	// 设置自动开通状态。
	// <li>CLOSE：关闭</li>
	// <li>OPEN：打开</li>
	Status *string `json:"Status,omitnil,omitempty" name:"Status"`

	// 自动加购/扩容授权开关,默认 1, 0关闭, 1开启
	AutoRepurchaseSwitch *uint64 `json:"AutoRepurchaseSwitch,omitnil,omitempty" name:"AutoRepurchaseSwitch"`

	// 自动加购的订单是否自动续费,默认0 ,0关闭, 1开启
	AutoRepurchaseRenewSwitch *uint64 `json:"AutoRepurchaseRenewSwitch,omitnil,omitempty" name:"AutoRepurchaseRenewSwitch"`

	// 手动购买的订单是否自动续费,默认0, 0关闭 ,1 开启
	RepurchaseRenewSwitch *uint64 `json:"RepurchaseRenewSwitch,omitnil,omitempty" name:"RepurchaseRenewSwitch"`
}

func (r *ModifyAutoOpenProVersionConfigRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyAutoOpenProVersionConfigRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Status")
	delete(f, "AutoRepurchaseSwitch")
	delete(f, "AutoRepurchaseRenewSwitch")
	delete(f, "RepurchaseRenewSwitch")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ModifyAutoOpenProVersionConfigRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyAutoOpenProVersionConfigResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ModifyAutoOpenProVersionConfigResponse struct {
	*tchttp.BaseResponse
	Response *ModifyAutoOpenProVersionConfigResponseParams `json:"Response"`
}

func (r *ModifyAutoOpenProVersionConfigResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyAutoOpenProVersionConfigResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyBanModeRequestParams struct {
	// 阻断模式，STANDARD_MODE：标准阻断，DEEP_MODE：深度阻断
	Mode *string `json:"Mode,omitnil,omitempty" name:"Mode"`

	// 阻断时间，用于标准阻断模式
	Ttl *uint64 `json:"Ttl,omitnil,omitempty" name:"Ttl"`
}

type ModifyBanModeRequest struct {
	*tchttp.BaseRequest
	
	// 阻断模式，STANDARD_MODE：标准阻断，DEEP_MODE：深度阻断
	Mode *string `json:"Mode,omitnil,omitempty" name:"Mode"`

	// 阻断时间，用于标准阻断模式
	Ttl *uint64 `json:"Ttl,omitnil,omitempty" name:"Ttl"`
}

func (r *ModifyBanModeRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyBanModeRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Mode")
	delete(f, "Ttl")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ModifyBanModeRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyBanModeResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ModifyBanModeResponse struct {
	*tchttp.BaseResponse
	Response *ModifyBanModeResponseParams `json:"Response"`
}

func (r *ModifyBanModeResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyBanModeResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyBanStatusRequestParams struct {
	// 阻断开关状态: 0 -- 关闭 1 -- 高级阻断 2 -- 基础阻断(只阻断情报库黑ip)
	Status *uint64 `json:"Status,omitnil,omitempty" name:"Status"`

	// 是否开启智能过白模式
	OpenSmartMode *bool `json:"OpenSmartMode,omitnil,omitempty" name:"OpenSmartMode"`
}

type ModifyBanStatusRequest struct {
	*tchttp.BaseRequest
	
	// 阻断开关状态: 0 -- 关闭 1 -- 高级阻断 2 -- 基础阻断(只阻断情报库黑ip)
	Status *uint64 `json:"Status,omitnil,omitempty" name:"Status"`

	// 是否开启智能过白模式
	OpenSmartMode *bool `json:"OpenSmartMode,omitnil,omitempty" name:"OpenSmartMode"`
}

func (r *ModifyBanStatusRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyBanStatusRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Status")
	delete(f, "OpenSmartMode")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ModifyBanStatusRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyBanStatusResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ModifyBanStatusResponse struct {
	*tchttp.BaseResponse
	Response *ModifyBanStatusResponseParams `json:"Response"`
}

func (r *ModifyBanStatusResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyBanStatusResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyBanWhiteListRequestParams struct {
	// 修改白名单规则项
	Rules *BanWhiteList `json:"Rules,omitnil,omitempty" name:"Rules"`
}

type ModifyBanWhiteListRequest struct {
	*tchttp.BaseRequest
	
	// 修改白名单规则项
	Rules *BanWhiteList `json:"Rules,omitnil,omitempty" name:"Rules"`
}

func (r *ModifyBanWhiteListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyBanWhiteListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Rules")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ModifyBanWhiteListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyBanWhiteListResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ModifyBanWhiteListResponse struct {
	*tchttp.BaseResponse
	Response *ModifyBanWhiteListResponseParams `json:"Response"`
}

func (r *ModifyBanWhiteListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyBanWhiteListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyBaselinePolicyRequestParams struct {
	// 无
	Data *BaselinePolicy `json:"Data,omitnil,omitempty" name:"Data"`

	// <li>RuleName - String - 是否必填：否 - 规则名称</li>
	// <li>CategoryId - int64 - 是否必填：否 自定义筛选为-1 - 规则分类</li>
	// <li>RuleType - int - 是否必填：否 0:系统 1:自定义 - 规则类型</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 是否按照过滤的全选
	SelectAll *int64 `json:"SelectAll,omitnil,omitempty" name:"SelectAll"`
}

type ModifyBaselinePolicyRequest struct {
	*tchttp.BaseRequest
	
	// 无
	Data *BaselinePolicy `json:"Data,omitnil,omitempty" name:"Data"`

	// <li>RuleName - String - 是否必填：否 - 规则名称</li>
	// <li>CategoryId - int64 - 是否必填：否 自定义筛选为-1 - 规则分类</li>
	// <li>RuleType - int - 是否必填：否 0:系统 1:自定义 - 规则类型</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 是否按照过滤的全选
	SelectAll *int64 `json:"SelectAll,omitnil,omitempty" name:"SelectAll"`
}

func (r *ModifyBaselinePolicyRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyBaselinePolicyRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Data")
	delete(f, "Filters")
	delete(f, "SelectAll")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ModifyBaselinePolicyRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyBaselinePolicyResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ModifyBaselinePolicyResponse struct {
	*tchttp.BaseResponse
	Response *ModifyBaselinePolicyResponseParams `json:"Response"`
}

func (r *ModifyBaselinePolicyResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyBaselinePolicyResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyBaselinePolicyStateRequestParams struct {
	// 策略Id
	PolicyId *int64 `json:"PolicyId,omitnil,omitempty" name:"PolicyId"`

	// 开启状态[1:开启|0:未开启]
	IsEnabled *int64 `json:"IsEnabled,omitnil,omitempty" name:"IsEnabled"`
}

type ModifyBaselinePolicyStateRequest struct {
	*tchttp.BaseRequest
	
	// 策略Id
	PolicyId *int64 `json:"PolicyId,omitnil,omitempty" name:"PolicyId"`

	// 开启状态[1:开启|0:未开启]
	IsEnabled *int64 `json:"IsEnabled,omitnil,omitempty" name:"IsEnabled"`
}

func (r *ModifyBaselinePolicyStateRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyBaselinePolicyStateRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "PolicyId")
	delete(f, "IsEnabled")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ModifyBaselinePolicyStateRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyBaselinePolicyStateResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ModifyBaselinePolicyStateResponse struct {
	*tchttp.BaseResponse
	Response *ModifyBaselinePolicyStateResponseParams `json:"Response"`
}

func (r *ModifyBaselinePolicyStateResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyBaselinePolicyStateResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyBaselineRuleIgnoreRequestParams struct {
	// 规则名称
	RuleName *string `json:"RuleName,omitnil,omitempty" name:"RuleName"`

	// 资产类型[0:所有专业版旗舰版|1:id|2:ip]
	AssetType *int64 `json:"AssetType,omitnil,omitempty" name:"AssetType"`

	// 规则Id
	RuleId *int64 `json:"RuleId,omitnil,omitempty" name:"RuleId"`

	// 关联项
	ItemIds []*int64 `json:"ItemIds,omitnil,omitempty" name:"ItemIds"`

	// 主机Id
	HostIds []*string `json:"HostIds,omitnil,omitempty" name:"HostIds"`

	// 主机Ip
	HostIps []*string `json:"HostIps,omitnil,omitempty" name:"HostIps"`

	// 是否全选过滤
	SelectAll *int64 `json:"SelectAll,omitnil,omitempty" name:"SelectAll"`

	// <li>ItemName - string - 是否必填：否 - 项名称</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`
}

type ModifyBaselineRuleIgnoreRequest struct {
	*tchttp.BaseRequest
	
	// 规则名称
	RuleName *string `json:"RuleName,omitnil,omitempty" name:"RuleName"`

	// 资产类型[0:所有专业版旗舰版|1:id|2:ip]
	AssetType *int64 `json:"AssetType,omitnil,omitempty" name:"AssetType"`

	// 规则Id
	RuleId *int64 `json:"RuleId,omitnil,omitempty" name:"RuleId"`

	// 关联项
	ItemIds []*int64 `json:"ItemIds,omitnil,omitempty" name:"ItemIds"`

	// 主机Id
	HostIds []*string `json:"HostIds,omitnil,omitempty" name:"HostIds"`

	// 主机Ip
	HostIps []*string `json:"HostIps,omitnil,omitempty" name:"HostIps"`

	// 是否全选过滤
	SelectAll *int64 `json:"SelectAll,omitnil,omitempty" name:"SelectAll"`

	// <li>ItemName - string - 是否必填：否 - 项名称</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`
}

func (r *ModifyBaselineRuleIgnoreRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyBaselineRuleIgnoreRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "RuleName")
	delete(f, "AssetType")
	delete(f, "RuleId")
	delete(f, "ItemIds")
	delete(f, "HostIds")
	delete(f, "HostIps")
	delete(f, "SelectAll")
	delete(f, "Filters")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ModifyBaselineRuleIgnoreRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyBaselineRuleIgnoreResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ModifyBaselineRuleIgnoreResponse struct {
	*tchttp.BaseResponse
	Response *ModifyBaselineRuleIgnoreResponseParams `json:"Response"`
}

func (r *ModifyBaselineRuleIgnoreResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyBaselineRuleIgnoreResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyBaselineRuleRequestParams struct {
	// 无
	Data *BaselineRule `json:"Data,omitnil,omitempty" name:"Data"`

	// 是否过滤全选
	SelectAll *int64 `json:"SelectAll,omitnil,omitempty" name:"SelectAll"`

	// <li>ItemName - string - 是否必填：否 - 项名称</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 0:检测项，1:检测项分类
	IdType *uint64 `json:"IdType,omitnil,omitempty" name:"IdType"`

	// 需要排除的检测项id
	ExcludeIds []*uint64 `json:"ExcludeIds,omitnil,omitempty" name:"ExcludeIds"`

	// 勾选的检测项分类
	CategoryIds []*uint64 `json:"CategoryIds,omitnil,omitempty" name:"CategoryIds"`
}

type ModifyBaselineRuleRequest struct {
	*tchttp.BaseRequest
	
	// 无
	Data *BaselineRule `json:"Data,omitnil,omitempty" name:"Data"`

	// 是否过滤全选
	SelectAll *int64 `json:"SelectAll,omitnil,omitempty" name:"SelectAll"`

	// <li>ItemName - string - 是否必填：否 - 项名称</li>
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 0:检测项，1:检测项分类
	IdType *uint64 `json:"IdType,omitnil,omitempty" name:"IdType"`

	// 需要排除的检测项id
	ExcludeIds []*uint64 `json:"ExcludeIds,omitnil,omitempty" name:"ExcludeIds"`

	// 勾选的检测项分类
	CategoryIds []*uint64 `json:"CategoryIds,omitnil,omitempty" name:"CategoryIds"`
}

func (r *ModifyBaselineRuleRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyBaselineRuleRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Data")
	delete(f, "SelectAll")
	delete(f, "Filters")
	delete(f, "IdType")
	delete(f, "ExcludeIds")
	delete(f, "CategoryIds")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ModifyBaselineRuleRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyBaselineRuleResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ModifyBaselineRuleResponse struct {
	*tchttp.BaseResponse
	Response *ModifyBaselineRuleResponseParams `json:"Response"`
}

func (r *ModifyBaselineRuleResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyBaselineRuleResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyBaselineWeakPasswordRequestParams struct {
	// 无
	Data []*BaselineWeakPassword `json:"Data,omitnil,omitempty" name:"Data"`
}

type ModifyBaselineWeakPasswordRequest struct {
	*tchttp.BaseRequest
	
	// 无
	Data []*BaselineWeakPassword `json:"Data,omitnil,omitempty" name:"Data"`
}

func (r *ModifyBaselineWeakPasswordRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyBaselineWeakPasswordRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Data")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ModifyBaselineWeakPasswordRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyBaselineWeakPasswordResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ModifyBaselineWeakPasswordResponse struct {
	*tchttp.BaseResponse
	Response *ModifyBaselineWeakPasswordResponseParams `json:"Response"`
}

func (r *ModifyBaselineWeakPasswordResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyBaselineWeakPasswordResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyBashPolicyRequestParams struct {
	// 具体的策略配置
	Policy *BashPolicy `json:"Policy,omitnil,omitempty" name:"Policy"`
}

type ModifyBashPolicyRequest struct {
	*tchttp.BaseRequest
	
	// 具体的策略配置
	Policy *BashPolicy `json:"Policy,omitnil,omitempty" name:"Policy"`
}

func (r *ModifyBashPolicyRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyBashPolicyRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Policy")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ModifyBashPolicyRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyBashPolicyResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ModifyBashPolicyResponse struct {
	*tchttp.BaseResponse
	Response *ModifyBashPolicyResponseParams `json:"Response"`
}

func (r *ModifyBashPolicyResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyBashPolicyResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyBashPolicyStatusRequestParams struct {
	// 规则ID
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`

	// 是否禁用
	Enable *uint64 `json:"Enable,omitnil,omitempty" name:"Enable"`
}

type ModifyBashPolicyStatusRequest struct {
	*tchttp.BaseRequest
	
	// 规则ID
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`

	// 是否禁用
	Enable *uint64 `json:"Enable,omitnil,omitempty" name:"Enable"`
}

func (r *ModifyBashPolicyStatusRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyBashPolicyStatusRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Id")
	delete(f, "Enable")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ModifyBashPolicyStatusRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyBashPolicyStatusResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ModifyBashPolicyStatusResponse struct {
	*tchttp.BaseResponse
	Response *ModifyBashPolicyStatusResponseParams `json:"Response"`
}

func (r *ModifyBashPolicyStatusResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyBashPolicyStatusResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyBruteAttackRulesRequestParams struct {
	// 暴力破解判断规则
	Rules []*BruteAttackRule `json:"Rules,omitnil,omitempty" name:"Rules"`
}

type ModifyBruteAttackRulesRequest struct {
	*tchttp.BaseRequest
	
	// 暴力破解判断规则
	Rules []*BruteAttackRule `json:"Rules,omitnil,omitempty" name:"Rules"`
}

func (r *ModifyBruteAttackRulesRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyBruteAttackRulesRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Rules")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ModifyBruteAttackRulesRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyBruteAttackRulesResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ModifyBruteAttackRulesResponse struct {
	*tchttp.BaseResponse
	Response *ModifyBruteAttackRulesResponseParams `json:"Response"`
}

func (r *ModifyBruteAttackRulesResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyBruteAttackRulesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyEventAttackStatusRequestParams struct {
	// 需要修改的事件id 数组，支持批量
	Ids []*uint64 `json:"Ids,omitnil,omitempty" name:"Ids"`

	// 是否更新全部，即是否对所有的事件进行操作，当ids 不为空时，此参数无效
	All *bool `json:"All,omitnil,omitempty" name:"All"`

	// 0：待处理 1：已处理 3： 已忽略 4：已删除 
	Status *uint64 `json:"Status,omitnil,omitempty" name:"Status"`

	// 过滤条件。
	// <li>Type - String 攻击状态 0: 尝试攻击 1: 攻击成功 - 是否必填: 否</li>
	// <li>Status - String 事件处理状态 0：待处理 1：已处理 2： 已加白 3： 已忽略 4：已删除  - 是否必填: 否</li>
	// <li>SrcIP - String 来源IP - 是否必填: 否</li>
	// <li>DstPort - String 攻击目标端口 - 是否必填: 否</li>
	// <li>MachineName - String 主机名称 - 是否必填: 否</li>
	// <li>InstanceID - String 主机实例ID - 是否必填: 否</li>
	// <li>Quuids - String 主机cvm uuid - 是否必填: 否</li>
	Filters []*Filters `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 排除的id
	ExcludeId []*uint64 `json:"ExcludeId,omitnil,omitempty" name:"ExcludeId"`
}

type ModifyEventAttackStatusRequest struct {
	*tchttp.BaseRequest
	
	// 需要修改的事件id 数组，支持批量
	Ids []*uint64 `json:"Ids,omitnil,omitempty" name:"Ids"`

	// 是否更新全部，即是否对所有的事件进行操作，当ids 不为空时，此参数无效
	All *bool `json:"All,omitnil,omitempty" name:"All"`

	// 0：待处理 1：已处理 3： 已忽略 4：已删除 
	Status *uint64 `json:"Status,omitnil,omitempty" name:"Status"`

	// 过滤条件。
	// <li>Type - String 攻击状态 0: 尝试攻击 1: 攻击成功 - 是否必填: 否</li>
	// <li>Status - String 事件处理状态 0：待处理 1：已处理 2： 已加白 3： 已忽略 4：已删除  - 是否必填: 否</li>
	// <li>SrcIP - String 来源IP - 是否必填: 否</li>
	// <li>DstPort - String 攻击目标端口 - 是否必填: 否</li>
	// <li>MachineName - String 主机名称 - 是否必填: 否</li>
	// <li>InstanceID - String 主机实例ID - 是否必填: 否</li>
	// <li>Quuids - String 主机cvm uuid - 是否必填: 否</li>
	Filters []*Filters `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 排除的id
	ExcludeId []*uint64 `json:"ExcludeId,omitnil,omitempty" name:"ExcludeId"`
}

func (r *ModifyEventAttackStatusRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyEventAttackStatusRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Ids")
	delete(f, "All")
	delete(f, "Status")
	delete(f, "Filters")
	delete(f, "ExcludeId")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ModifyEventAttackStatusRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyEventAttackStatusResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ModifyEventAttackStatusResponse struct {
	*tchttp.BaseResponse
	Response *ModifyEventAttackStatusResponseParams `json:"Response"`
}

func (r *ModifyEventAttackStatusResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyEventAttackStatusResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyFileTamperEventsRequestParams struct {
	// Status 1 -- 加白 2 -- 删除 3 - 忽略
	Status *uint64 `json:"Status,omitnil,omitempty" name:"Status"`

	// 对应事件id
	Ids []*uint64 `json:"Ids,omitnil,omitempty" name:"Ids"`
}

type ModifyFileTamperEventsRequest struct {
	*tchttp.BaseRequest
	
	// Status 1 -- 加白 2 -- 删除 3 - 忽略
	Status *uint64 `json:"Status,omitnil,omitempty" name:"Status"`

	// 对应事件id
	Ids []*uint64 `json:"Ids,omitnil,omitempty" name:"Ids"`
}

func (r *ModifyFileTamperEventsRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyFileTamperEventsRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Status")
	delete(f, "Ids")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ModifyFileTamperEventsRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyFileTamperEventsResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ModifyFileTamperEventsResponse struct {
	*tchttp.BaseResponse
	Response *ModifyFileTamperEventsResponseParams `json:"Response"`
}

func (r *ModifyFileTamperEventsResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyFileTamperEventsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyFileTamperRuleRequestParams struct {
	// 规则名称
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// 规则内容
	Rules []*FileTamperRule `json:"Rules,omitnil,omitempty" name:"Rules"`

	// 是否全局规则(默认否) 0：否 ，1：是，全局是Uuids 可为空
	IsGlobal *uint64 `json:"IsGlobal,omitnil,omitempty" name:"IsGlobal"`

	// 启用状态 0: 启用 1: 已关闭
	Status *uint64 `json:"Status,omitnil,omitempty" name:"Status"`

	// 规则id  不填或者0表示新增
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`

	// 影响的主机uuid集合
	Uuids []*string `json:"Uuids,omitnil,omitempty" name:"Uuids"`

	// 风险等级 0：无， 1: 高危， 2:中危， 3: 低危
	Level *uint64 `json:"Level,omitnil,omitempty" name:"Level"`

	// 加白处理类型
	// <li>cur 仅对当前加白</li>
	// <li>all 所有符合条件加白</li>
	AddWhiteType *string `json:"AddWhiteType,omitnil,omitempty" name:"AddWhiteType"`
}

type ModifyFileTamperRuleRequest struct {
	*tchttp.BaseRequest
	
	// 规则名称
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// 规则内容
	Rules []*FileTamperRule `json:"Rules,omitnil,omitempty" name:"Rules"`

	// 是否全局规则(默认否) 0：否 ，1：是，全局是Uuids 可为空
	IsGlobal *uint64 `json:"IsGlobal,omitnil,omitempty" name:"IsGlobal"`

	// 启用状态 0: 启用 1: 已关闭
	Status *uint64 `json:"Status,omitnil,omitempty" name:"Status"`

	// 规则id  不填或者0表示新增
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`

	// 影响的主机uuid集合
	Uuids []*string `json:"Uuids,omitnil,omitempty" name:"Uuids"`

	// 风险等级 0：无， 1: 高危， 2:中危， 3: 低危
	Level *uint64 `json:"Level,omitnil,omitempty" name:"Level"`

	// 加白处理类型
	// <li>cur 仅对当前加白</li>
	// <li>all 所有符合条件加白</li>
	AddWhiteType *string `json:"AddWhiteType,omitnil,omitempty" name:"AddWhiteType"`
}

func (r *ModifyFileTamperRuleRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyFileTamperRuleRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Name")
	delete(f, "Rules")
	delete(f, "IsGlobal")
	delete(f, "Status")
	delete(f, "Id")
	delete(f, "Uuids")
	delete(f, "Level")
	delete(f, "AddWhiteType")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ModifyFileTamperRuleRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyFileTamperRuleResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ModifyFileTamperRuleResponse struct {
	*tchttp.BaseResponse
	Response *ModifyFileTamperRuleResponseParams `json:"Response"`
}

func (r *ModifyFileTamperRuleResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyFileTamperRuleResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyFileTamperRuleStatusRequestParams struct {
	// 0: 启用1: 关闭2：删除
	Status *uint64 `json:"Status,omitnil,omitempty" name:"Status"`

	// 对应事件id
	Ids []*uint64 `json:"Ids,omitnil,omitempty" name:"Ids"`

	// 是否是系统规则 0=系统规则 1=用户自定义规则，系统规则Status 不支持删除
	RuleCategory *uint64 `json:"RuleCategory,omitnil,omitempty" name:"RuleCategory"`
}

type ModifyFileTamperRuleStatusRequest struct {
	*tchttp.BaseRequest
	
	// 0: 启用1: 关闭2：删除
	Status *uint64 `json:"Status,omitnil,omitempty" name:"Status"`

	// 对应事件id
	Ids []*uint64 `json:"Ids,omitnil,omitempty" name:"Ids"`

	// 是否是系统规则 0=系统规则 1=用户自定义规则，系统规则Status 不支持删除
	RuleCategory *uint64 `json:"RuleCategory,omitnil,omitempty" name:"RuleCategory"`
}

func (r *ModifyFileTamperRuleStatusRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyFileTamperRuleStatusRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Status")
	delete(f, "Ids")
	delete(f, "RuleCategory")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ModifyFileTamperRuleStatusRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyFileTamperRuleStatusResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ModifyFileTamperRuleStatusResponse struct {
	*tchttp.BaseResponse
	Response *ModifyFileTamperRuleStatusResponseParams `json:"Response"`
}

func (r *ModifyFileTamperRuleStatusResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyFileTamperRuleStatusResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyJavaMemShellPluginSwitchRequestParams struct {
	// 主机quuid数组
	Quuids []*string `json:"Quuids,omitnil,omitempty" name:"Quuids"`

	// 插件目标状态：0: 关闭 1: 开启
	JavaShellStatus *uint64 `json:"JavaShellStatus,omitnil,omitempty" name:"JavaShellStatus"`
}

type ModifyJavaMemShellPluginSwitchRequest struct {
	*tchttp.BaseRequest
	
	// 主机quuid数组
	Quuids []*string `json:"Quuids,omitnil,omitempty" name:"Quuids"`

	// 插件目标状态：0: 关闭 1: 开启
	JavaShellStatus *uint64 `json:"JavaShellStatus,omitnil,omitempty" name:"JavaShellStatus"`
}

func (r *ModifyJavaMemShellPluginSwitchRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyJavaMemShellPluginSwitchRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Quuids")
	delete(f, "JavaShellStatus")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ModifyJavaMemShellPluginSwitchRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyJavaMemShellPluginSwitchResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ModifyJavaMemShellPluginSwitchResponse struct {
	*tchttp.BaseResponse
	Response *ModifyJavaMemShellPluginSwitchResponseParams `json:"Response"`
}

func (r *ModifyJavaMemShellPluginSwitchResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyJavaMemShellPluginSwitchResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyJavaMemShellsStatusRequestParams struct {
	// 目标处理状态： 0 - 待处理 1 - 已加白 2 - 已删除 3 - 已忽略 4 - 已手动处理
	Status *uint64 `json:"Status,omitnil,omitempty" name:"Status"`

	// 事件Id数组
	Ids []*uint64 `json:"Ids,omitnil,omitempty" name:"Ids"`

	// 是否更新全部，只支持忽略、已处理、删除
	UpdateAll *bool `json:"UpdateAll,omitnil,omitempty" name:"UpdateAll"`
}

type ModifyJavaMemShellsStatusRequest struct {
	*tchttp.BaseRequest
	
	// 目标处理状态： 0 - 待处理 1 - 已加白 2 - 已删除 3 - 已忽略 4 - 已手动处理
	Status *uint64 `json:"Status,omitnil,omitempty" name:"Status"`

	// 事件Id数组
	Ids []*uint64 `json:"Ids,omitnil,omitempty" name:"Ids"`

	// 是否更新全部，只支持忽略、已处理、删除
	UpdateAll *bool `json:"UpdateAll,omitnil,omitempty" name:"UpdateAll"`
}

func (r *ModifyJavaMemShellsStatusRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyJavaMemShellsStatusRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Status")
	delete(f, "Ids")
	delete(f, "UpdateAll")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ModifyJavaMemShellsStatusRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyJavaMemShellsStatusResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ModifyJavaMemShellsStatusResponse struct {
	*tchttp.BaseResponse
	Response *ModifyJavaMemShellsStatusResponseParams `json:"Response"`
}

func (r *ModifyJavaMemShellsStatusResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyJavaMemShellsStatusResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyLicenseBindsRequestParams struct {
	// 资源ID
	ResourceId *string `json:"ResourceId,omitnil,omitempty" name:"ResourceId"`

	// 授权类型
	LicenseType *uint64 `json:"LicenseType,omitnil,omitempty" name:"LicenseType"`

	// 是否全部机器(当全部机器数大于当前订单可用授权数时,多余机器会被跳过)
	IsAll *bool `json:"IsAll,omitnil,omitempty" name:"IsAll"`

	// 需要绑定的机器quuid列表, 当IsAll = false 时必填,反之忽略该参数. 最大长度=2000
	QuuidList []*string `json:"QuuidList,omitnil,omitempty" name:"QuuidList"`
}

type ModifyLicenseBindsRequest struct {
	*tchttp.BaseRequest
	
	// 资源ID
	ResourceId *string `json:"ResourceId,omitnil,omitempty" name:"ResourceId"`

	// 授权类型
	LicenseType *uint64 `json:"LicenseType,omitnil,omitempty" name:"LicenseType"`

	// 是否全部机器(当全部机器数大于当前订单可用授权数时,多余机器会被跳过)
	IsAll *bool `json:"IsAll,omitnil,omitempty" name:"IsAll"`

	// 需要绑定的机器quuid列表, 当IsAll = false 时必填,反之忽略该参数. 最大长度=2000
	QuuidList []*string `json:"QuuidList,omitnil,omitempty" name:"QuuidList"`
}

func (r *ModifyLicenseBindsRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyLicenseBindsRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "ResourceId")
	delete(f, "LicenseType")
	delete(f, "IsAll")
	delete(f, "QuuidList")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ModifyLicenseBindsRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyLicenseBindsResponseParams struct {
	// 任务ID
	TaskId *uint64 `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ModifyLicenseBindsResponse struct {
	*tchttp.BaseResponse
	Response *ModifyLicenseBindsResponseParams `json:"Response"`
}

func (r *ModifyLicenseBindsResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyLicenseBindsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyLicenseOrderRequestParams struct {
	// 资源ID
	ResourceId *string `json:"ResourceId,omitnil,omitempty" name:"ResourceId"`

	// 预期值,如果当前为10,扩容则输入原来大的值, 缩容则比原来小的值(缩容时不允许预期值比使用量小),如果保持不变则填写原值,
	InquireNum *uint64 `json:"InquireNum,omitnil,omitempty" name:"InquireNum"`

	// 项目ID,不修改则输入原值.
	ProjectId *uint64 `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// 资源别名,不修改则输入原值.
	Alias *string `json:"Alias,omitnil,omitempty" name:"Alias"`
}

type ModifyLicenseOrderRequest struct {
	*tchttp.BaseRequest
	
	// 资源ID
	ResourceId *string `json:"ResourceId,omitnil,omitempty" name:"ResourceId"`

	// 预期值,如果当前为10,扩容则输入原来大的值, 缩容则比原来小的值(缩容时不允许预期值比使用量小),如果保持不变则填写原值,
	InquireNum *uint64 `json:"InquireNum,omitnil,omitempty" name:"InquireNum"`

	// 项目ID,不修改则输入原值.
	ProjectId *uint64 `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// 资源别名,不修改则输入原值.
	Alias *string `json:"Alias,omitnil,omitempty" name:"Alias"`
}

func (r *ModifyLicenseOrderRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyLicenseOrderRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "ResourceId")
	delete(f, "InquireNum")
	delete(f, "ProjectId")
	delete(f, "Alias")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ModifyLicenseOrderRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyLicenseOrderResponseParams struct {
	// 订单号
	DealNames []*string `json:"DealNames,omitnil,omitempty" name:"DealNames"`

	// 资源ID
	ResourceIds []*string `json:"ResourceIds,omitnil,omitempty" name:"ResourceIds"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ModifyLicenseOrderResponse struct {
	*tchttp.BaseResponse
	Response *ModifyLicenseOrderResponseParams `json:"Response"`
}

func (r *ModifyLicenseOrderResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyLicenseOrderResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyLicenseUnBindsRequestParams struct {
	// 资源ID
	ResourceId *string `json:"ResourceId,omitnil,omitempty" name:"ResourceId"`

	// 授权类型
	LicenseType *uint64 `json:"LicenseType,omitnil,omitempty" name:"LicenseType"`

	// 是否全部机器(当全部机器数大于当前订单可用授权数时,多余机器会被跳过)
	IsAll *bool `json:"IsAll,omitnil,omitempty" name:"IsAll"`

	// 需要绑定的机器quuid列表, 当IsAll = false 时必填,反之忽略该参数.
	// 最大长度=100
	QuuidList []*string `json:"QuuidList,omitnil,omitempty" name:"QuuidList"`
}

type ModifyLicenseUnBindsRequest struct {
	*tchttp.BaseRequest
	
	// 资源ID
	ResourceId *string `json:"ResourceId,omitnil,omitempty" name:"ResourceId"`

	// 授权类型
	LicenseType *uint64 `json:"LicenseType,omitnil,omitempty" name:"LicenseType"`

	// 是否全部机器(当全部机器数大于当前订单可用授权数时,多余机器会被跳过)
	IsAll *bool `json:"IsAll,omitnil,omitempty" name:"IsAll"`

	// 需要绑定的机器quuid列表, 当IsAll = false 时必填,反之忽略该参数.
	// 最大长度=100
	QuuidList []*string `json:"QuuidList,omitnil,omitempty" name:"QuuidList"`
}

func (r *ModifyLicenseUnBindsRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyLicenseUnBindsRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "ResourceId")
	delete(f, "LicenseType")
	delete(f, "IsAll")
	delete(f, "QuuidList")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ModifyLicenseUnBindsRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyLicenseUnBindsResponseParams struct {
	// 只有解绑失败的才有该值.
	// 注意：此字段可能返回 null，表示取不到有效值。
	ErrMsg []*LicenseUnBindRsp `json:"ErrMsg,omitnil,omitempty" name:"ErrMsg"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ModifyLicenseUnBindsResponse struct {
	*tchttp.BaseResponse
	Response *ModifyLicenseUnBindsResponseParams `json:"Response"`
}

func (r *ModifyLicenseUnBindsResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyLicenseUnBindsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyLogKafkaAccessRequestParams struct {
	// 实例名称 如 主机安全测试环境
	KafkaEnvName *string `json:"KafkaEnvName,omitnil,omitempty" name:"KafkaEnvName"`

	// 实例ID
	KafkaId *string `json:"KafkaId,omitnil,omitempty" name:"KafkaId"`

	// 接入方式，1公网域名接入，2支撑环境接入
	AccessType *uint64 `json:"AccessType,omitnil,omitempty" name:"AccessType"`

	// 接入地址
	AccessAddr *string `json:"AccessAddr,omitnil,omitempty" name:"AccessAddr"`

	// 用户名
	Username *string `json:"Username,omitnil,omitempty" name:"Username"`

	// 0不用密码，1有密码
	HasPwd *uint64 `json:"HasPwd,omitnil,omitempty" name:"HasPwd"`

	// 日志投递类型配置细节
	DeliverTypeDetails []*DeliverTypeDetails `json:"DeliverTypeDetails,omitnil,omitempty" name:"DeliverTypeDetails"`

	// kafka版本
	InsVersion *string `json:"InsVersion,omitnil,omitempty" name:"InsVersion"`

	// 地域
	Zone *string `json:"Zone,omitnil,omitempty" name:"Zone"`

	// 可用区
	Az *string `json:"Az,omitnil,omitempty" name:"Az"`

	// vpcid地址
	VpcId *string `json:"VpcId,omitnil,omitempty" name:"VpcId"`

	// 子网id
	SubnetId *string `json:"SubnetId,omitnil,omitempty" name:"SubnetId"`

	// 投递状态，1：健康，2：告警，3：异常
	DeliverStatus *int64 `json:"DeliverStatus,omitnil,omitempty" name:"DeliverStatus"`

	// 峰值带宽
	BandWidth *int64 `json:"BandWidth,omitnil,omitempty" name:"BandWidth"`

	// 磁盘容量
	DiskSize *int64 `json:"DiskSize,omitnil,omitempty" name:"DiskSize"`

	// 密码，aes加密
	Pwd *string `json:"Pwd,omitnil,omitempty" name:"Pwd"`
}

type ModifyLogKafkaAccessRequest struct {
	*tchttp.BaseRequest
	
	// 实例名称 如 主机安全测试环境
	KafkaEnvName *string `json:"KafkaEnvName,omitnil,omitempty" name:"KafkaEnvName"`

	// 实例ID
	KafkaId *string `json:"KafkaId,omitnil,omitempty" name:"KafkaId"`

	// 接入方式，1公网域名接入，2支撑环境接入
	AccessType *uint64 `json:"AccessType,omitnil,omitempty" name:"AccessType"`

	// 接入地址
	AccessAddr *string `json:"AccessAddr,omitnil,omitempty" name:"AccessAddr"`

	// 用户名
	Username *string `json:"Username,omitnil,omitempty" name:"Username"`

	// 0不用密码，1有密码
	HasPwd *uint64 `json:"HasPwd,omitnil,omitempty" name:"HasPwd"`

	// 日志投递类型配置细节
	DeliverTypeDetails []*DeliverTypeDetails `json:"DeliverTypeDetails,omitnil,omitempty" name:"DeliverTypeDetails"`

	// kafka版本
	InsVersion *string `json:"InsVersion,omitnil,omitempty" name:"InsVersion"`

	// 地域
	Zone *string `json:"Zone,omitnil,omitempty" name:"Zone"`

	// 可用区
	Az *string `json:"Az,omitnil,omitempty" name:"Az"`

	// vpcid地址
	VpcId *string `json:"VpcId,omitnil,omitempty" name:"VpcId"`

	// 子网id
	SubnetId *string `json:"SubnetId,omitnil,omitempty" name:"SubnetId"`

	// 投递状态，1：健康，2：告警，3：异常
	DeliverStatus *int64 `json:"DeliverStatus,omitnil,omitempty" name:"DeliverStatus"`

	// 峰值带宽
	BandWidth *int64 `json:"BandWidth,omitnil,omitempty" name:"BandWidth"`

	// 磁盘容量
	DiskSize *int64 `json:"DiskSize,omitnil,omitempty" name:"DiskSize"`

	// 密码，aes加密
	Pwd *string `json:"Pwd,omitnil,omitempty" name:"Pwd"`
}

func (r *ModifyLogKafkaAccessRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyLogKafkaAccessRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "KafkaEnvName")
	delete(f, "KafkaId")
	delete(f, "AccessType")
	delete(f, "AccessAddr")
	delete(f, "Username")
	delete(f, "HasPwd")
	delete(f, "DeliverTypeDetails")
	delete(f, "InsVersion")
	delete(f, "Zone")
	delete(f, "Az")
	delete(f, "VpcId")
	delete(f, "SubnetId")
	delete(f, "DeliverStatus")
	delete(f, "BandWidth")
	delete(f, "DiskSize")
	delete(f, "Pwd")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ModifyLogKafkaAccessRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyLogKafkaAccessResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ModifyLogKafkaAccessResponse struct {
	*tchttp.BaseResponse
	Response *ModifyLogKafkaAccessResponseParams `json:"Response"`
}

func (r *ModifyLogKafkaAccessResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyLogKafkaAccessResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyLogKafkaDeliverTypeRequestParams struct {
	// 安全模块类型 1: 入侵检测 2: 漏洞管理 3: 基线管理 4: 高级防御 5:客户端相关 6: 资产指纹
	SecurityType *uint64 `json:"SecurityType,omitnil,omitempty" name:"SecurityType"`

	// 安全模块下的日志类型，
	LogType []*uint64 `json:"LogType,omitnil,omitempty" name:"LogType"`

	// 投递开关 0关闭 1开启
	Switch *uint64 `json:"Switch,omitnil,omitempty" name:"Switch"`

	// kafka topic id
	TopicId *string `json:"TopicId,omitnil,omitempty" name:"TopicId"`

	// kafka topic name
	TopicName *string `json:"TopicName,omitnil,omitempty" name:"TopicName"`
}

type ModifyLogKafkaDeliverTypeRequest struct {
	*tchttp.BaseRequest
	
	// 安全模块类型 1: 入侵检测 2: 漏洞管理 3: 基线管理 4: 高级防御 5:客户端相关 6: 资产指纹
	SecurityType *uint64 `json:"SecurityType,omitnil,omitempty" name:"SecurityType"`

	// 安全模块下的日志类型，
	LogType []*uint64 `json:"LogType,omitnil,omitempty" name:"LogType"`

	// 投递开关 0关闭 1开启
	Switch *uint64 `json:"Switch,omitnil,omitempty" name:"Switch"`

	// kafka topic id
	TopicId *string `json:"TopicId,omitnil,omitempty" name:"TopicId"`

	// kafka topic name
	TopicName *string `json:"TopicName,omitnil,omitempty" name:"TopicName"`
}

func (r *ModifyLogKafkaDeliverTypeRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyLogKafkaDeliverTypeRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "SecurityType")
	delete(f, "LogType")
	delete(f, "Switch")
	delete(f, "TopicId")
	delete(f, "TopicName")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ModifyLogKafkaDeliverTypeRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyLogKafkaDeliverTypeResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ModifyLogKafkaDeliverTypeResponse struct {
	*tchttp.BaseResponse
	Response *ModifyLogKafkaDeliverTypeResponseParams `json:"Response"`
}

func (r *ModifyLogKafkaDeliverTypeResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyLogKafkaDeliverTypeResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyLogKafkaStateRequestParams struct {
	// 实例名称 如 主机安全测试环境
	KafkaEnvName *string `json:"KafkaEnvName,omitnil,omitempty" name:"KafkaEnvName"`

	// 实例ID
	KafkaId *string `json:"KafkaId,omitnil,omitempty" name:"KafkaId"`

	// 接入方式，1公网域名接入，2支撑环境接入
	AccessType *uint64 `json:"AccessType,omitnil,omitempty" name:"AccessType"`

	// 接入地址
	AccessAddr *string `json:"AccessAddr,omitnil,omitempty" name:"AccessAddr"`

	// 用户名
	Username *string `json:"Username,omitnil,omitempty" name:"Username"`

	// 区域
	Zone *string `json:"Zone,omitnil,omitempty" name:"Zone"`

	// 可用区
	Az *string `json:"Az,omitnil,omitempty" name:"Az"`

	// 所属网络
	VpcId *string `json:"VpcId,omitnil,omitempty" name:"VpcId"`

	// 所在子网
	SubnetId *string `json:"SubnetId,omitnil,omitempty" name:"SubnetId"`

	// 投递状态，1：健康，2：告警，3：异常
	DeliverStatus *uint64 `json:"DeliverStatus,omitnil,omitempty" name:"DeliverStatus"`

	// kafka版本
	InsVersion *string `json:"InsVersion,omitnil,omitempty" name:"InsVersion"`

	// 峰值带宽
	BandWidth *int64 `json:"BandWidth,omitnil,omitempty" name:"BandWidth"`

	// 磁盘容量
	DiskSize *int64 `json:"DiskSize,omitnil,omitempty" name:"DiskSize"`
}

type ModifyLogKafkaStateRequest struct {
	*tchttp.BaseRequest
	
	// 实例名称 如 主机安全测试环境
	KafkaEnvName *string `json:"KafkaEnvName,omitnil,omitempty" name:"KafkaEnvName"`

	// 实例ID
	KafkaId *string `json:"KafkaId,omitnil,omitempty" name:"KafkaId"`

	// 接入方式，1公网域名接入，2支撑环境接入
	AccessType *uint64 `json:"AccessType,omitnil,omitempty" name:"AccessType"`

	// 接入地址
	AccessAddr *string `json:"AccessAddr,omitnil,omitempty" name:"AccessAddr"`

	// 用户名
	Username *string `json:"Username,omitnil,omitempty" name:"Username"`

	// 区域
	Zone *string `json:"Zone,omitnil,omitempty" name:"Zone"`

	// 可用区
	Az *string `json:"Az,omitnil,omitempty" name:"Az"`

	// 所属网络
	VpcId *string `json:"VpcId,omitnil,omitempty" name:"VpcId"`

	// 所在子网
	SubnetId *string `json:"SubnetId,omitnil,omitempty" name:"SubnetId"`

	// 投递状态，1：健康，2：告警，3：异常
	DeliverStatus *uint64 `json:"DeliverStatus,omitnil,omitempty" name:"DeliverStatus"`

	// kafka版本
	InsVersion *string `json:"InsVersion,omitnil,omitempty" name:"InsVersion"`

	// 峰值带宽
	BandWidth *int64 `json:"BandWidth,omitnil,omitempty" name:"BandWidth"`

	// 磁盘容量
	DiskSize *int64 `json:"DiskSize,omitnil,omitempty" name:"DiskSize"`
}

func (r *ModifyLogKafkaStateRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyLogKafkaStateRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "KafkaEnvName")
	delete(f, "KafkaId")
	delete(f, "AccessType")
	delete(f, "AccessAddr")
	delete(f, "Username")
	delete(f, "Zone")
	delete(f, "Az")
	delete(f, "VpcId")
	delete(f, "SubnetId")
	delete(f, "DeliverStatus")
	delete(f, "InsVersion")
	delete(f, "BandWidth")
	delete(f, "DiskSize")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ModifyLogKafkaStateRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyLogKafkaStateResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ModifyLogKafkaStateResponse struct {
	*tchttp.BaseResponse
	Response *ModifyLogKafkaStateResponseParams `json:"Response"`
}

func (r *ModifyLogKafkaStateResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyLogKafkaStateResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyLogStorageConfigRequestParams struct {
	// 是否修改有效期
	IsModifyPeriod *bool `json:"IsModifyPeriod,omitnil,omitempty" name:"IsModifyPeriod"`

	// 存储类型，string数组
	Type []*string `json:"Type,omitnil,omitempty" name:"Type"`

	// 日志存储时长，3640表示不限
	Period *int64 `json:"Period,omitnil,omitempty" name:"Period"`

	// 日志存储时长单位，年year/月month/天day
	Granularity *string `json:"Granularity,omitnil,omitempty" name:"Granularity"`
}

type ModifyLogStorageConfigRequest struct {
	*tchttp.BaseRequest
	
	// 是否修改有效期
	IsModifyPeriod *bool `json:"IsModifyPeriod,omitnil,omitempty" name:"IsModifyPeriod"`

	// 存储类型，string数组
	Type []*string `json:"Type,omitnil,omitempty" name:"Type"`

	// 日志存储时长，3640表示不限
	Period *int64 `json:"Period,omitnil,omitempty" name:"Period"`

	// 日志存储时长单位，年year/月month/天day
	Granularity *string `json:"Granularity,omitnil,omitempty" name:"Granularity"`
}

func (r *ModifyLogStorageConfigRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyLogStorageConfigRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "IsModifyPeriod")
	delete(f, "Type")
	delete(f, "Period")
	delete(f, "Granularity")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ModifyLogStorageConfigRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyLogStorageConfigResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ModifyLogStorageConfigResponse struct {
	*tchttp.BaseResponse
	Response *ModifyLogStorageConfigResponseParams `json:"Response"`
}

func (r *ModifyLogStorageConfigResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyLogStorageConfigResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyLoginWhiteInfoRequestParams struct {
	// 更新白名单信息实体
	HostLoginWhiteObj *UpdateHostLoginWhiteObj `json:"HostLoginWhiteObj,omitnil,omitempty" name:"HostLoginWhiteObj"`
}

type ModifyLoginWhiteInfoRequest struct {
	*tchttp.BaseRequest
	
	// 更新白名单信息实体
	HostLoginWhiteObj *UpdateHostLoginWhiteObj `json:"HostLoginWhiteObj,omitnil,omitempty" name:"HostLoginWhiteObj"`
}

func (r *ModifyLoginWhiteInfoRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyLoginWhiteInfoRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "HostLoginWhiteObj")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ModifyLoginWhiteInfoRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyLoginWhiteInfoResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ModifyLoginWhiteInfoResponse struct {
	*tchttp.BaseResponse
	Response *ModifyLoginWhiteInfoResponseParams `json:"Response"`
}

func (r *ModifyLoginWhiteInfoResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyLoginWhiteInfoResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyLoginWhiteRecordRequestParams struct {
	// 白名单用户（多个用户逗号隔开）
	UserName *string `json:"UserName,omitnil,omitempty" name:"UserName"`

	// 更新后记录的白名单维度信息
	SrcIp *string `json:"SrcIp,omitnil,omitempty" name:"SrcIp"`

	// 开始时间
	StartTime *string `json:"StartTime,omitnil,omitempty" name:"StartTime"`

	// 结束时间
	EndTime *string `json:"EndTime,omitnil,omitempty" name:"EndTime"`

	// 备注
	Remark *string `json:"Remark,omitnil,omitempty" name:"Remark"`

	// 是否对所有服务器生效，0-否，1-是
	IsGlobal *uint64 `json:"IsGlobal,omitnil,omitempty" name:"IsGlobal"`

	// 白名单ID
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`

	// 服务器列表
	Hosts []*HostInfo `json:"Hosts,omitnil,omitempty" name:"Hosts"`

	// 地域列表
	Places []*Place `json:"Places,omitnil,omitempty" name:"Places"`
}

type ModifyLoginWhiteRecordRequest struct {
	*tchttp.BaseRequest
	
	// 白名单用户（多个用户逗号隔开）
	UserName *string `json:"UserName,omitnil,omitempty" name:"UserName"`

	// 更新后记录的白名单维度信息
	SrcIp *string `json:"SrcIp,omitnil,omitempty" name:"SrcIp"`

	// 开始时间
	StartTime *string `json:"StartTime,omitnil,omitempty" name:"StartTime"`

	// 结束时间
	EndTime *string `json:"EndTime,omitnil,omitempty" name:"EndTime"`

	// 备注
	Remark *string `json:"Remark,omitnil,omitempty" name:"Remark"`

	// 是否对所有服务器生效，0-否，1-是
	IsGlobal *uint64 `json:"IsGlobal,omitnil,omitempty" name:"IsGlobal"`

	// 白名单ID
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`

	// 服务器列表
	Hosts []*HostInfo `json:"Hosts,omitnil,omitempty" name:"Hosts"`

	// 地域列表
	Places []*Place `json:"Places,omitnil,omitempty" name:"Places"`
}

func (r *ModifyLoginWhiteRecordRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyLoginWhiteRecordRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "UserName")
	delete(f, "SrcIp")
	delete(f, "StartTime")
	delete(f, "EndTime")
	delete(f, "Remark")
	delete(f, "IsGlobal")
	delete(f, "Id")
	delete(f, "Hosts")
	delete(f, "Places")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ModifyLoginWhiteRecordRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyLoginWhiteRecordResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ModifyLoginWhiteRecordResponse struct {
	*tchttp.BaseResponse
	Response *ModifyLoginWhiteRecordResponseParams `json:"Response"`
}

func (r *ModifyLoginWhiteRecordResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyLoginWhiteRecordResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyMachineAutoClearConfigRequestParams struct {
	// 清理规则时间, 0 表示关闭, 单位为天, 最大为 30天
	ClearRule *uint64 `json:"ClearRule,omitnil,omitempty" name:"ClearRule"`
}

type ModifyMachineAutoClearConfigRequest struct {
	*tchttp.BaseRequest
	
	// 清理规则时间, 0 表示关闭, 单位为天, 最大为 30天
	ClearRule *uint64 `json:"ClearRule,omitnil,omitempty" name:"ClearRule"`
}

func (r *ModifyMachineAutoClearConfigRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyMachineAutoClearConfigRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "ClearRule")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ModifyMachineAutoClearConfigRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyMachineAutoClearConfigResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ModifyMachineAutoClearConfigResponse struct {
	*tchttp.BaseResponse
	Response *ModifyMachineAutoClearConfigResponseParams `json:"Response"`
}

func (r *ModifyMachineAutoClearConfigResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyMachineAutoClearConfigResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyMachineRemarkRequestParams struct {
	// 主机Quuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 备注信息
	Remark *string `json:"Remark,omitnil,omitempty" name:"Remark"`
}

type ModifyMachineRemarkRequest struct {
	*tchttp.BaseRequest
	
	// 主机Quuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 备注信息
	Remark *string `json:"Remark,omitnil,omitempty" name:"Remark"`
}

func (r *ModifyMachineRemarkRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyMachineRemarkRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Quuid")
	delete(f, "Remark")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ModifyMachineRemarkRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyMachineRemarkResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ModifyMachineRemarkResponse struct {
	*tchttp.BaseResponse
	Response *ModifyMachineRemarkResponseParams `json:"Response"`
}

func (r *ModifyMachineRemarkResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyMachineRemarkResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyMaliciousRequestWhiteListRequestParams struct {
	// 白名单id
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`

	// 白名单域名
	Domain *string `json:"Domain,omitnil,omitempty" name:"Domain"`

	// 备注
	Mark *string `json:"Mark,omitnil,omitempty" name:"Mark"`
}

type ModifyMaliciousRequestWhiteListRequest struct {
	*tchttp.BaseRequest
	
	// 白名单id
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`

	// 白名单域名
	Domain *string `json:"Domain,omitnil,omitempty" name:"Domain"`

	// 备注
	Mark *string `json:"Mark,omitnil,omitempty" name:"Mark"`
}

func (r *ModifyMaliciousRequestWhiteListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyMaliciousRequestWhiteListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Id")
	delete(f, "Domain")
	delete(f, "Mark")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ModifyMaliciousRequestWhiteListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyMaliciousRequestWhiteListResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ModifyMaliciousRequestWhiteListResponse struct {
	*tchttp.BaseResponse
	Response *ModifyMaliciousRequestWhiteListResponseParams `json:"Response"`
}

func (r *ModifyMaliciousRequestWhiteListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyMaliciousRequestWhiteListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyMalwareTimingScanSettingsRequestParams struct {
	// 检测模式 0 全盘检测  1快速检测
	CheckPattern *uint64 `json:"CheckPattern,omitnil,omitempty" name:"CheckPattern"`

	// 检测周期 开始时间，如：02:00:00
	StartTime *string `json:"StartTime,omitnil,omitempty" name:"StartTime"`

	// 检测周期 超时结束时间，如：04:00:00
	EndTime *string `json:"EndTime,omitnil,omitempty" name:"EndTime"`

	// 是否全部服务器 1 全部 2 自选
	IsGlobal *uint64 `json:"IsGlobal,omitnil,omitempty" name:"IsGlobal"`

	// 定时检测开关 0 关闭 1开启
	EnableScan *uint64 `json:"EnableScan,omitnil,omitempty" name:"EnableScan"`

	// 监控模式 0 标准 1深度
	MonitoringPattern *uint64 `json:"MonitoringPattern,omitnil,omitempty" name:"MonitoringPattern"`

	// 扫描周期 默认每天 1
	Cycle *uint64 `json:"Cycle,omitnil,omitempty" name:"Cycle"`

	// 实时监控 0 关闭 1开启
	RealTimeMonitoring *uint64 `json:"RealTimeMonitoring,omitnil,omitempty" name:"RealTimeMonitoring"`

	// 自选服务器时必须 主机quuid的string数组
	QuuidList []*string `json:"QuuidList,omitnil,omitempty" name:"QuuidList"`

	// 是否自动隔离 1隔离 0 不隔离
	AutoIsolation *uint64 `json:"AutoIsolation,omitnil,omitempty" name:"AutoIsolation"`

	// 是否杀掉进程 1杀掉 0不杀掉
	KillProcess *uint64 `json:"KillProcess,omitnil,omitempty" name:"KillProcess"`

	// 1 清理, 0 不清理
	// <li>本操作会修复被篡改的系统命令，计划任务等系统文件，操作中请确保yum/apt 可用</li>
	DoClean *uint64 `json:"DoClean,omitnil,omitempty" name:"DoClean"`

	// 1标准模式（只报严重、高危）、2增强模式（报严重、高危、中危）、3严格模式（报严重、高、中、低、提示）
	EngineType *uint64 `json:"EngineType,omitnil,omitempty" name:"EngineType"`

	// 启发引擎开关 0 关闭 1开启
	EnableInspiredEngine *uint64 `json:"EnableInspiredEngine,omitnil,omitempty" name:"EnableInspiredEngine"`

	// 是否开启恶意进程查杀[0:未开启,1:开启]
	EnableMemShellScan *uint64 `json:"EnableMemShellScan,omitnil,omitempty" name:"EnableMemShellScan"`

	// 防护模式 0 标准 1重保
	ProtectMode *uint64 `json:"ProtectMode,omitnil,omitempty" name:"ProtectMode"`

	// 查杀范围 0 脚本类之外的恶意文件，1全部恶意文件
	ProtectFileScope *uint64 `json:"ProtectFileScope,omitnil,omitempty" name:"ProtectFileScope"`
}

type ModifyMalwareTimingScanSettingsRequest struct {
	*tchttp.BaseRequest
	
	// 检测模式 0 全盘检测  1快速检测
	CheckPattern *uint64 `json:"CheckPattern,omitnil,omitempty" name:"CheckPattern"`

	// 检测周期 开始时间，如：02:00:00
	StartTime *string `json:"StartTime,omitnil,omitempty" name:"StartTime"`

	// 检测周期 超时结束时间，如：04:00:00
	EndTime *string `json:"EndTime,omitnil,omitempty" name:"EndTime"`

	// 是否全部服务器 1 全部 2 自选
	IsGlobal *uint64 `json:"IsGlobal,omitnil,omitempty" name:"IsGlobal"`

	// 定时检测开关 0 关闭 1开启
	EnableScan *uint64 `json:"EnableScan,omitnil,omitempty" name:"EnableScan"`

	// 监控模式 0 标准 1深度
	MonitoringPattern *uint64 `json:"MonitoringPattern,omitnil,omitempty" name:"MonitoringPattern"`

	// 扫描周期 默认每天 1
	Cycle *uint64 `json:"Cycle,omitnil,omitempty" name:"Cycle"`

	// 实时监控 0 关闭 1开启
	RealTimeMonitoring *uint64 `json:"RealTimeMonitoring,omitnil,omitempty" name:"RealTimeMonitoring"`

	// 自选服务器时必须 主机quuid的string数组
	QuuidList []*string `json:"QuuidList,omitnil,omitempty" name:"QuuidList"`

	// 是否自动隔离 1隔离 0 不隔离
	AutoIsolation *uint64 `json:"AutoIsolation,omitnil,omitempty" name:"AutoIsolation"`

	// 是否杀掉进程 1杀掉 0不杀掉
	KillProcess *uint64 `json:"KillProcess,omitnil,omitempty" name:"KillProcess"`

	// 1 清理, 0 不清理
	// <li>本操作会修复被篡改的系统命令，计划任务等系统文件，操作中请确保yum/apt 可用</li>
	DoClean *uint64 `json:"DoClean,omitnil,omitempty" name:"DoClean"`

	// 1标准模式（只报严重、高危）、2增强模式（报严重、高危、中危）、3严格模式（报严重、高、中、低、提示）
	EngineType *uint64 `json:"EngineType,omitnil,omitempty" name:"EngineType"`

	// 启发引擎开关 0 关闭 1开启
	EnableInspiredEngine *uint64 `json:"EnableInspiredEngine,omitnil,omitempty" name:"EnableInspiredEngine"`

	// 是否开启恶意进程查杀[0:未开启,1:开启]
	EnableMemShellScan *uint64 `json:"EnableMemShellScan,omitnil,omitempty" name:"EnableMemShellScan"`

	// 防护模式 0 标准 1重保
	ProtectMode *uint64 `json:"ProtectMode,omitnil,omitempty" name:"ProtectMode"`

	// 查杀范围 0 脚本类之外的恶意文件，1全部恶意文件
	ProtectFileScope *uint64 `json:"ProtectFileScope,omitnil,omitempty" name:"ProtectFileScope"`
}

func (r *ModifyMalwareTimingScanSettingsRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyMalwareTimingScanSettingsRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "CheckPattern")
	delete(f, "StartTime")
	delete(f, "EndTime")
	delete(f, "IsGlobal")
	delete(f, "EnableScan")
	delete(f, "MonitoringPattern")
	delete(f, "Cycle")
	delete(f, "RealTimeMonitoring")
	delete(f, "QuuidList")
	delete(f, "AutoIsolation")
	delete(f, "KillProcess")
	delete(f, "DoClean")
	delete(f, "EngineType")
	delete(f, "EnableInspiredEngine")
	delete(f, "EnableMemShellScan")
	delete(f, "ProtectMode")
	delete(f, "ProtectFileScope")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ModifyMalwareTimingScanSettingsRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyMalwareTimingScanSettingsResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ModifyMalwareTimingScanSettingsResponse struct {
	*tchttp.BaseResponse
	Response *ModifyMalwareTimingScanSettingsResponseParams `json:"Response"`
}

func (r *ModifyMalwareTimingScanSettingsResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyMalwareTimingScanSettingsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyMalwareWhiteListRequestParams struct {
	// 白名单模式； 0MD5白名单，1自定义
	Mode *uint64 `json:"Mode,omitnil,omitempty" name:"Mode"`

	// 规则唯一ID
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`

	// quuid 列表
	QuuidList []*string `json:"QuuidList,omitnil,omitempty" name:"QuuidList"`

	// 是否全部主机； 0否，1是。
	IsGlobal *uint64 `json:"IsGlobal,omitnil,omitempty" name:"IsGlobal"`

	// 匹配模式 ；0 精确匹配，1模糊匹配(废弃)
	MatchType *uint64 `json:"MatchType,omitnil,omitempty" name:"MatchType"`

	// 文件名称(正则)；长度不超过200个
	FileName []*string `json:"FileName,omitnil,omitempty" name:"FileName"`

	// 文件目录(正则)；长度不超过200个，内容base64转义
	FileDirectory []*string `json:"FileDirectory,omitnil,omitempty" name:"FileDirectory"`

	// 文件后缀；长度不超过200个，内容base64转义（废弃）
	FileExtension []*string `json:"FileExtension,omitnil,omitempty" name:"FileExtension"`

	// MD5列表
	Md5List []*string `json:"Md5List,omitnil,omitempty" name:"Md5List"`
}

type ModifyMalwareWhiteListRequest struct {
	*tchttp.BaseRequest
	
	// 白名单模式； 0MD5白名单，1自定义
	Mode *uint64 `json:"Mode,omitnil,omitempty" name:"Mode"`

	// 规则唯一ID
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`

	// quuid 列表
	QuuidList []*string `json:"QuuidList,omitnil,omitempty" name:"QuuidList"`

	// 是否全部主机； 0否，1是。
	IsGlobal *uint64 `json:"IsGlobal,omitnil,omitempty" name:"IsGlobal"`

	// 匹配模式 ；0 精确匹配，1模糊匹配(废弃)
	MatchType *uint64 `json:"MatchType,omitnil,omitempty" name:"MatchType"`

	// 文件名称(正则)；长度不超过200个
	FileName []*string `json:"FileName,omitnil,omitempty" name:"FileName"`

	// 文件目录(正则)；长度不超过200个，内容base64转义
	FileDirectory []*string `json:"FileDirectory,omitnil,omitempty" name:"FileDirectory"`

	// 文件后缀；长度不超过200个，内容base64转义（废弃）
	FileExtension []*string `json:"FileExtension,omitnil,omitempty" name:"FileExtension"`

	// MD5列表
	Md5List []*string `json:"Md5List,omitnil,omitempty" name:"Md5List"`
}

func (r *ModifyMalwareWhiteListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyMalwareWhiteListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Mode")
	delete(f, "Id")
	delete(f, "QuuidList")
	delete(f, "IsGlobal")
	delete(f, "MatchType")
	delete(f, "FileName")
	delete(f, "FileDirectory")
	delete(f, "FileExtension")
	delete(f, "Md5List")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ModifyMalwareWhiteListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyMalwareWhiteListResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ModifyMalwareWhiteListResponse struct {
	*tchttp.BaseResponse
	Response *ModifyMalwareWhiteListResponseParams `json:"Response"`
}

func (r *ModifyMalwareWhiteListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyMalwareWhiteListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyNetAttackSettingRequestParams struct {
	// 0 关闭网络攻击检测，1开启网络攻击检测
	NetAttackEnable *uint64 `json:"NetAttackEnable,omitnil,omitempty" name:"NetAttackEnable"`

	// 0 新增告警事件默认待处理，1新增告警事件默认已处理，3新增告警事件默认忽略
	NetAttackAlarmStatus *uint64 `json:"NetAttackAlarmStatus,omitnil,omitempty" name:"NetAttackAlarmStatus"`

	// 1 全部旗舰版主机，0 Quuids列表主机
	Scope *uint64 `json:"Scope,omitnil,omitempty" name:"Scope"`

	// 自选主机
	InstanceIds []*string `json:"InstanceIds,omitnil,omitempty" name:"InstanceIds"`

	// 自选排除的主机
	ExcludeInstanceIds []*string `json:"ExcludeInstanceIds,omitnil,omitempty" name:"ExcludeInstanceIds"`

	// 新增资产自动包含 0 不包含 1包含
	AutoInclude *uint64 `json:"AutoInclude,omitnil,omitempty" name:"AutoInclude"`
}

type ModifyNetAttackSettingRequest struct {
	*tchttp.BaseRequest
	
	// 0 关闭网络攻击检测，1开启网络攻击检测
	NetAttackEnable *uint64 `json:"NetAttackEnable,omitnil,omitempty" name:"NetAttackEnable"`

	// 0 新增告警事件默认待处理，1新增告警事件默认已处理，3新增告警事件默认忽略
	NetAttackAlarmStatus *uint64 `json:"NetAttackAlarmStatus,omitnil,omitempty" name:"NetAttackAlarmStatus"`

	// 1 全部旗舰版主机，0 Quuids列表主机
	Scope *uint64 `json:"Scope,omitnil,omitempty" name:"Scope"`

	// 自选主机
	InstanceIds []*string `json:"InstanceIds,omitnil,omitempty" name:"InstanceIds"`

	// 自选排除的主机
	ExcludeInstanceIds []*string `json:"ExcludeInstanceIds,omitnil,omitempty" name:"ExcludeInstanceIds"`

	// 新增资产自动包含 0 不包含 1包含
	AutoInclude *uint64 `json:"AutoInclude,omitnil,omitempty" name:"AutoInclude"`
}

func (r *ModifyNetAttackSettingRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyNetAttackSettingRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "NetAttackEnable")
	delete(f, "NetAttackAlarmStatus")
	delete(f, "Scope")
	delete(f, "InstanceIds")
	delete(f, "ExcludeInstanceIds")
	delete(f, "AutoInclude")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ModifyNetAttackSettingRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyNetAttackSettingResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ModifyNetAttackSettingResponse struct {
	*tchttp.BaseResponse
	Response *ModifyNetAttackSettingResponseParams `json:"Response"`
}

func (r *ModifyNetAttackSettingResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyNetAttackSettingResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyNetAttackWhiteListRequestParams struct {
	// 是否全部主机； 0否，1是。
	Scope *uint64 `json:"Scope,omitnil,omitempty" name:"Scope"`

	// 来源IP 单IP:1.1.1.1  IP范围:1.1.1.1-1.1.2.1  IP范围：1.1.1.0/24 
	SrcIp []*string `json:"SrcIp,omitnil,omitempty" name:"SrcIp"`

	// 是否加白所有符合该规则的告警 ，1:处理,0:不处理
	DealOldEvents *uint64 `json:"DealOldEvents,omitnil,omitempty" name:"DealOldEvents"`

	// 规则id
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`

	// quuid 列表
	QuuidList []*string `json:"QuuidList,omitnil,omitempty" name:"QuuidList"`

	// 规则描述
	Description *string `json:"Description,omitnil,omitempty" name:"Description"`
}

type ModifyNetAttackWhiteListRequest struct {
	*tchttp.BaseRequest
	
	// 是否全部主机； 0否，1是。
	Scope *uint64 `json:"Scope,omitnil,omitempty" name:"Scope"`

	// 来源IP 单IP:1.1.1.1  IP范围:1.1.1.1-1.1.2.1  IP范围：1.1.1.0/24 
	SrcIp []*string `json:"SrcIp,omitnil,omitempty" name:"SrcIp"`

	// 是否加白所有符合该规则的告警 ，1:处理,0:不处理
	DealOldEvents *uint64 `json:"DealOldEvents,omitnil,omitempty" name:"DealOldEvents"`

	// 规则id
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`

	// quuid 列表
	QuuidList []*string `json:"QuuidList,omitnil,omitempty" name:"QuuidList"`

	// 规则描述
	Description *string `json:"Description,omitnil,omitempty" name:"Description"`
}

func (r *ModifyNetAttackWhiteListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyNetAttackWhiteListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Scope")
	delete(f, "SrcIp")
	delete(f, "DealOldEvents")
	delete(f, "Id")
	delete(f, "QuuidList")
	delete(f, "Description")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ModifyNetAttackWhiteListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyNetAttackWhiteListResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ModifyNetAttackWhiteListResponse struct {
	*tchttp.BaseResponse
	Response *ModifyNetAttackWhiteListResponseParams `json:"Response"`
}

func (r *ModifyNetAttackWhiteListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyNetAttackWhiteListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyOrderAttributeRequestParams struct {
	// 授权类型 0 专业版-按量计费, 1专业版-包年包月 , 2 旗舰版-包年包月
	LicenseType *uint64 `json:"LicenseType,omitnil,omitempty" name:"LicenseType"`

	// 资源ID
	ResourceId *string `json:"ResourceId,omitnil,omitempty" name:"ResourceId"`

	// 可编辑的属性名称 ,当前支持的有: alias 资源别名
	AttrName *string `json:"AttrName,omitnil,omitempty" name:"AttrName"`

	// 属性值
	AttrValue *string `json:"AttrValue,omitnil,omitempty" name:"AttrValue"`
}

type ModifyOrderAttributeRequest struct {
	*tchttp.BaseRequest
	
	// 授权类型 0 专业版-按量计费, 1专业版-包年包月 , 2 旗舰版-包年包月
	LicenseType *uint64 `json:"LicenseType,omitnil,omitempty" name:"LicenseType"`

	// 资源ID
	ResourceId *string `json:"ResourceId,omitnil,omitempty" name:"ResourceId"`

	// 可编辑的属性名称 ,当前支持的有: alias 资源别名
	AttrName *string `json:"AttrName,omitnil,omitempty" name:"AttrName"`

	// 属性值
	AttrValue *string `json:"AttrValue,omitnil,omitempty" name:"AttrValue"`
}

func (r *ModifyOrderAttributeRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyOrderAttributeRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "LicenseType")
	delete(f, "ResourceId")
	delete(f, "AttrName")
	delete(f, "AttrValue")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ModifyOrderAttributeRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyOrderAttributeResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ModifyOrderAttributeResponse struct {
	*tchttp.BaseResponse
	Response *ModifyOrderAttributeResponseParams `json:"Response"`
}

func (r *ModifyOrderAttributeResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyOrderAttributeResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyRansomDefenseEventsStatusRequestParams struct {
	// 需要修改的事件id 数组，支持批量
	Ids []*uint64 `json:"Ids,omitnil,omitempty" name:"Ids"`

	// 操作 0待处理，1已处理,2信任,9:删除记录
	Status *uint64 `json:"Status,omitnil,omitempty" name:"Status"`

	// 是否更新所有同路径事件
	All *bool `json:"All,omitnil,omitempty" name:"All"`
}

type ModifyRansomDefenseEventsStatusRequest struct {
	*tchttp.BaseRequest
	
	// 需要修改的事件id 数组，支持批量
	Ids []*uint64 `json:"Ids,omitnil,omitempty" name:"Ids"`

	// 操作 0待处理，1已处理,2信任,9:删除记录
	Status *uint64 `json:"Status,omitnil,omitempty" name:"Status"`

	// 是否更新所有同路径事件
	All *bool `json:"All,omitnil,omitempty" name:"All"`
}

func (r *ModifyRansomDefenseEventsStatusRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyRansomDefenseEventsStatusRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Ids")
	delete(f, "Status")
	delete(f, "All")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ModifyRansomDefenseEventsStatusRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyRansomDefenseEventsStatusResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ModifyRansomDefenseEventsStatusResponse struct {
	*tchttp.BaseResponse
	Response *ModifyRansomDefenseEventsStatusResponseParams `json:"Response"`
}

func (r *ModifyRansomDefenseEventsStatusResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyRansomDefenseEventsStatusResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyRansomDefenseStrategyStatusRequestParams struct {
	// 是否对全部策略生效: 0否，1是
	IsAll *uint64 `json:"IsAll,omitnil,omitempty" name:"IsAll"`

	// 0关闭，1开启，9删除
	Status *uint64 `json:"Status,omitnil,omitempty" name:"Status"`

	// 策略ID列表
	IdList []*uint64 `json:"IdList,omitnil,omitempty" name:"IdList"`
}

type ModifyRansomDefenseStrategyStatusRequest struct {
	*tchttp.BaseRequest
	
	// 是否对全部策略生效: 0否，1是
	IsAll *uint64 `json:"IsAll,omitnil,omitempty" name:"IsAll"`

	// 0关闭，1开启，9删除
	Status *uint64 `json:"Status,omitnil,omitempty" name:"Status"`

	// 策略ID列表
	IdList []*uint64 `json:"IdList,omitnil,omitempty" name:"IdList"`
}

func (r *ModifyRansomDefenseStrategyStatusRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyRansomDefenseStrategyStatusRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "IsAll")
	delete(f, "Status")
	delete(f, "IdList")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ModifyRansomDefenseStrategyStatusRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyRansomDefenseStrategyStatusResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ModifyRansomDefenseStrategyStatusResponse struct {
	*tchttp.BaseResponse
	Response *ModifyRansomDefenseStrategyStatusResponseParams `json:"Response"`
}

func (r *ModifyRansomDefenseStrategyStatusResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyRansomDefenseStrategyStatusResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyReverseShellRulesAggregationRequestParams struct {
	// 规则ID(新增时请留空)
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`

	// 客户端ID数组
	Uuids []*string `json:"Uuids,omitnil,omitempty" name:"Uuids"`

	// 主机IP
	HostIp *string `json:"HostIp,omitnil,omitempty" name:"HostIp"`

	// 目标IP
	DestIp *string `json:"DestIp,omitnil,omitempty" name:"DestIp"`

	// 目标端口
	DestPort *string `json:"DestPort,omitnil,omitempty" name:"DestPort"`

	// 进程名
	ProcessName *string `json:"ProcessName,omitnil,omitempty" name:"ProcessName"`

	// 是否全局规则(默认否)
	IsGlobal *uint64 `json:"IsGlobal,omitnil,omitempty" name:"IsGlobal"`

	// 事件列表和详情点击加白时关联的事件id (新增规则时请留空)
	EventId *uint64 `json:"EventId,omitnil,omitempty" name:"EventId"`

	// 加白方式， 0:常规加白 1:正则加白
	WhiteType *uint64 `json:"WhiteType,omitnil,omitempty" name:"WhiteType"`

	// 正则表达式
	RuleRegexp *string `json:"RuleRegexp,omitnil,omitempty" name:"RuleRegexp"`

	// 处理历史事件， 0:不处理 1:处理
	HandleHistory *uint64 `json:"HandleHistory,omitnil,omitempty" name:"HandleHistory"`

	// 批次id
	GroupID *string `json:"GroupID,omitnil,omitempty" name:"GroupID"`
}

type ModifyReverseShellRulesAggregationRequest struct {
	*tchttp.BaseRequest
	
	// 规则ID(新增时请留空)
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`

	// 客户端ID数组
	Uuids []*string `json:"Uuids,omitnil,omitempty" name:"Uuids"`

	// 主机IP
	HostIp *string `json:"HostIp,omitnil,omitempty" name:"HostIp"`

	// 目标IP
	DestIp *string `json:"DestIp,omitnil,omitempty" name:"DestIp"`

	// 目标端口
	DestPort *string `json:"DestPort,omitnil,omitempty" name:"DestPort"`

	// 进程名
	ProcessName *string `json:"ProcessName,omitnil,omitempty" name:"ProcessName"`

	// 是否全局规则(默认否)
	IsGlobal *uint64 `json:"IsGlobal,omitnil,omitempty" name:"IsGlobal"`

	// 事件列表和详情点击加白时关联的事件id (新增规则时请留空)
	EventId *uint64 `json:"EventId,omitnil,omitempty" name:"EventId"`

	// 加白方式， 0:常规加白 1:正则加白
	WhiteType *uint64 `json:"WhiteType,omitnil,omitempty" name:"WhiteType"`

	// 正则表达式
	RuleRegexp *string `json:"RuleRegexp,omitnil,omitempty" name:"RuleRegexp"`

	// 处理历史事件， 0:不处理 1:处理
	HandleHistory *uint64 `json:"HandleHistory,omitnil,omitempty" name:"HandleHistory"`

	// 批次id
	GroupID *string `json:"GroupID,omitnil,omitempty" name:"GroupID"`
}

func (r *ModifyReverseShellRulesAggregationRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyReverseShellRulesAggregationRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Id")
	delete(f, "Uuids")
	delete(f, "HostIp")
	delete(f, "DestIp")
	delete(f, "DestPort")
	delete(f, "ProcessName")
	delete(f, "IsGlobal")
	delete(f, "EventId")
	delete(f, "WhiteType")
	delete(f, "RuleRegexp")
	delete(f, "HandleHistory")
	delete(f, "GroupID")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ModifyReverseShellRulesAggregationRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyReverseShellRulesAggregationResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ModifyReverseShellRulesAggregationResponse struct {
	*tchttp.BaseResponse
	Response *ModifyReverseShellRulesAggregationResponseParams `json:"Response"`
}

func (r *ModifyReverseShellRulesAggregationResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyReverseShellRulesAggregationResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyRiskDnsPolicyRequestParams struct {
	// 策略
	Data *RiskDnsPolicy `json:"Data,omitnil,omitempty" name:"Data"`
}

type ModifyRiskDnsPolicyRequest struct {
	*tchttp.BaseRequest
	
	// 策略
	Data *RiskDnsPolicy `json:"Data,omitnil,omitempty" name:"Data"`
}

func (r *ModifyRiskDnsPolicyRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyRiskDnsPolicyRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Data")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ModifyRiskDnsPolicyRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyRiskDnsPolicyResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ModifyRiskDnsPolicyResponse struct {
	*tchttp.BaseResponse
	Response *ModifyRiskDnsPolicyResponseParams `json:"Response"`
}

func (r *ModifyRiskDnsPolicyResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyRiskDnsPolicyResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyRiskDnsPolicyStatusRequestParams struct {
	// 策略ID
	PolicyId *int64 `json:"PolicyId,omitnil,omitempty" name:"PolicyId"`

	// 是否生效[0:生效,1:不生效]
	IsEnabled *int64 `json:"IsEnabled,omitnil,omitempty" name:"IsEnabled"`
}

type ModifyRiskDnsPolicyStatusRequest struct {
	*tchttp.BaseRequest
	
	// 策略ID
	PolicyId *int64 `json:"PolicyId,omitnil,omitempty" name:"PolicyId"`

	// 是否生效[0:生效,1:不生效]
	IsEnabled *int64 `json:"IsEnabled,omitnil,omitempty" name:"IsEnabled"`
}

func (r *ModifyRiskDnsPolicyStatusRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyRiskDnsPolicyStatusRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "PolicyId")
	delete(f, "IsEnabled")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ModifyRiskDnsPolicyStatusRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyRiskDnsPolicyStatusResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ModifyRiskDnsPolicyStatusResponse struct {
	*tchttp.BaseResponse
	Response *ModifyRiskDnsPolicyStatusResponseParams `json:"Response"`
}

func (r *ModifyRiskDnsPolicyStatusResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyRiskDnsPolicyStatusResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyRiskEventsStatusRequestParams struct {
	// 操作-0:标记已处理,1:忽略,2:删除记录,3:木马隔离,4:木马恢复隔离,5:木马信任,6:木马取消信任,7:查杀异常进程,8:加入白名单
	Operate *uint64 `json:"Operate,omitnil,omitempty" name:"Operate"`

	// 操作事件类型，文件查杀：MALWARE，异常登录：HOST_LOGIN，密码破解：BRUTE_ATTACK，恶意请求：MALICIOUS_REQUEST，高危命令：BASH_EVENT，本地提权：PRIVILEGE_EVENT，反弹shell：REVERSE_SHELL. 异常进程:PROCESS
	RiskType *string `json:"RiskType,omitnil,omitempty" name:"RiskType"`

	// 需要修改的事件id 数组，支持批量
	Ids []*uint64 `json:"Ids,omitnil,omitempty" name:"Ids"`

	// 是否更新全部，即是否对所有的事件进行操作，当ids 不为空时，此参数无效
	UpdateAll *bool `json:"UpdateAll,omitnil,omitempty" name:"UpdateAll"`

	// 排除的事件id,当操作全部事件时，需要排除这次id
	ExcludeId []*uint64 `json:"ExcludeId,omitnil,omitempty" name:"ExcludeId"`

	// 当Operate 是木马隔离时，表示是否要杀进程，其他操作无效
	KillProcess *bool `json:"KillProcess,omitnil,omitempty" name:"KillProcess"`

	// 当RiskType 为异地登录且ids为空时，可以修改所有来源ip的事件的状态
	Ip []*string `json:"Ip,omitnil,omitempty" name:"Ip"`

	// 过滤条件。RiskType为 MALWARE时
	// 1、当RiskType为 MALWARE时：
	// <li>IpOrAlias - String - 是否必填：否 - 主机ip或别名筛选</li>
	// <li>FilePath - String - 是否必填：否 - 路径筛选</li>
	// <li>VirusName - String - 是否必填：否 - 描述筛选</li>
	// <li>CreateBeginTime - String - 是否必填：否 - 创建时间筛选-开始时间</li>
	// <li>CreateEndTime - String - 是否必填：否 - 创建时间筛选-结束时间</li>
	// <li>Status - String - 是否必填：否 - 状态筛选 4待处理,5信任,6已隔离,10隔离中,11恢复隔离中</li>
	// RiskType 为PROCESS时:
	// 过滤条件。
	// <li>IpOrName - String - 是否必填：否 - 主机IP或主机名</li>
	// <li>VirusName - String - 是否必填：否 - 病毒名</li>
	// <li>BeginTime - String - 是否必填：否 - 进程启动时间-开始</li>
	// <li>EndTime - String - 是否必填：否 - 进程启动时间-结束</li>
	// <li>Status - String - 是否必填：否 - 状态筛选 0待处理；1查杀中;2已查杀3已退出;4已信任</li>
	Filters []*Filters `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 当Operate 是木马隔离时
	// <li> 本操作会修复被篡改的系统命令，计划任务等系统文件，操作中请确保yum/apt 可用。</li>
	DoClean *bool `json:"DoClean,omitnil,omitempty" name:"DoClean"`
}

type ModifyRiskEventsStatusRequest struct {
	*tchttp.BaseRequest
	
	// 操作-0:标记已处理,1:忽略,2:删除记录,3:木马隔离,4:木马恢复隔离,5:木马信任,6:木马取消信任,7:查杀异常进程,8:加入白名单
	Operate *uint64 `json:"Operate,omitnil,omitempty" name:"Operate"`

	// 操作事件类型，文件查杀：MALWARE，异常登录：HOST_LOGIN，密码破解：BRUTE_ATTACK，恶意请求：MALICIOUS_REQUEST，高危命令：BASH_EVENT，本地提权：PRIVILEGE_EVENT，反弹shell：REVERSE_SHELL. 异常进程:PROCESS
	RiskType *string `json:"RiskType,omitnil,omitempty" name:"RiskType"`

	// 需要修改的事件id 数组，支持批量
	Ids []*uint64 `json:"Ids,omitnil,omitempty" name:"Ids"`

	// 是否更新全部，即是否对所有的事件进行操作，当ids 不为空时，此参数无效
	UpdateAll *bool `json:"UpdateAll,omitnil,omitempty" name:"UpdateAll"`

	// 排除的事件id,当操作全部事件时，需要排除这次id
	ExcludeId []*uint64 `json:"ExcludeId,omitnil,omitempty" name:"ExcludeId"`

	// 当Operate 是木马隔离时，表示是否要杀进程，其他操作无效
	KillProcess *bool `json:"KillProcess,omitnil,omitempty" name:"KillProcess"`

	// 当RiskType 为异地登录且ids为空时，可以修改所有来源ip的事件的状态
	Ip []*string `json:"Ip,omitnil,omitempty" name:"Ip"`

	// 过滤条件。RiskType为 MALWARE时
	// 1、当RiskType为 MALWARE时：
	// <li>IpOrAlias - String - 是否必填：否 - 主机ip或别名筛选</li>
	// <li>FilePath - String - 是否必填：否 - 路径筛选</li>
	// <li>VirusName - String - 是否必填：否 - 描述筛选</li>
	// <li>CreateBeginTime - String - 是否必填：否 - 创建时间筛选-开始时间</li>
	// <li>CreateEndTime - String - 是否必填：否 - 创建时间筛选-结束时间</li>
	// <li>Status - String - 是否必填：否 - 状态筛选 4待处理,5信任,6已隔离,10隔离中,11恢复隔离中</li>
	// RiskType 为PROCESS时:
	// 过滤条件。
	// <li>IpOrName - String - 是否必填：否 - 主机IP或主机名</li>
	// <li>VirusName - String - 是否必填：否 - 病毒名</li>
	// <li>BeginTime - String - 是否必填：否 - 进程启动时间-开始</li>
	// <li>EndTime - String - 是否必填：否 - 进程启动时间-结束</li>
	// <li>Status - String - 是否必填：否 - 状态筛选 0待处理；1查杀中;2已查杀3已退出;4已信任</li>
	Filters []*Filters `json:"Filters,omitnil,omitempty" name:"Filters"`

	// 当Operate 是木马隔离时
	// <li> 本操作会修复被篡改的系统命令，计划任务等系统文件，操作中请确保yum/apt 可用。</li>
	DoClean *bool `json:"DoClean,omitnil,omitempty" name:"DoClean"`
}

func (r *ModifyRiskEventsStatusRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyRiskEventsStatusRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Operate")
	delete(f, "RiskType")
	delete(f, "Ids")
	delete(f, "UpdateAll")
	delete(f, "ExcludeId")
	delete(f, "KillProcess")
	delete(f, "Ip")
	delete(f, "Filters")
	delete(f, "DoClean")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ModifyRiskEventsStatusRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyRiskEventsStatusResponseParams struct {
	// 此次操作是否是异步操作，0：操作已完成，1：正在异步操作中，前端需要通过DescribeRiskBatchStatus 查询操作是否完成
	// 注意：此字段可能返回 null，表示取不到有效值。
	IsSync *uint64 `json:"IsSync,omitnil,omitempty" name:"IsSync"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ModifyRiskEventsStatusResponse struct {
	*tchttp.BaseResponse
	Response *ModifyRiskEventsStatusResponseParams `json:"Response"`
}

func (r *ModifyRiskEventsStatusResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyRiskEventsStatusResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyUsersConfigRequestParams struct {
	// 配置名称
	// <li>license_monitor 新增授权监控配置 0 关闭, 1开启</li>
	ConfigName *string `json:"ConfigName,omitnil,omitempty" name:"ConfigName"`

	// 配置值
	ConfigValue *string `json:"ConfigValue,omitnil,omitempty" name:"ConfigValue"`
}

type ModifyUsersConfigRequest struct {
	*tchttp.BaseRequest
	
	// 配置名称
	// <li>license_monitor 新增授权监控配置 0 关闭, 1开启</li>
	ConfigName *string `json:"ConfigName,omitnil,omitempty" name:"ConfigName"`

	// 配置值
	ConfigValue *string `json:"ConfigValue,omitnil,omitempty" name:"ConfigValue"`
}

func (r *ModifyUsersConfigRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyUsersConfigRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "ConfigName")
	delete(f, "ConfigValue")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ModifyUsersConfigRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyUsersConfigResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ModifyUsersConfigResponse struct {
	*tchttp.BaseResponse
	Response *ModifyUsersConfigResponseParams `json:"Response"`
}

func (r *ModifyUsersConfigResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyUsersConfigResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyVulDefenceEventStatusRequestParams struct {
	// 事件id
	Ids []*uint64 `json:"Ids,omitnil,omitempty" name:"Ids"`

	// 0: 待处理  2:已处理 3: 已忽略 4: 已删除
	Status *uint64 `json:"Status,omitnil,omitempty" name:"Status"`
}

type ModifyVulDefenceEventStatusRequest struct {
	*tchttp.BaseRequest
	
	// 事件id
	Ids []*uint64 `json:"Ids,omitnil,omitempty" name:"Ids"`

	// 0: 待处理  2:已处理 3: 已忽略 4: 已删除
	Status *uint64 `json:"Status,omitnil,omitempty" name:"Status"`
}

func (r *ModifyVulDefenceEventStatusRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyVulDefenceEventStatusRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Ids")
	delete(f, "Status")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ModifyVulDefenceEventStatusRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyVulDefenceEventStatusResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ModifyVulDefenceEventStatusResponse struct {
	*tchttp.BaseResponse
	Response *ModifyVulDefenceEventStatusResponseParams `json:"Response"`
}

func (r *ModifyVulDefenceEventStatusResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyVulDefenceEventStatusResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyVulDefenceSettingRequestParams struct {
	// 防御开关，0 关闭 1 开启
	Enable *uint64 `json:"Enable,omitnil,omitempty" name:"Enable"`

	// 1 全部旗舰版主机，0 Quuids列表主机
	Scope *uint64 `json:"Scope,omitnil,omitempty" name:"Scope"`

	// 作用范围内旗舰版主机列表
	Quuids []*string `json:"Quuids,omitnil,omitempty" name:"Quuids"`

	// 排除作用范围内旗舰版主机列表
	ExcludeInstanceIds []*string `json:"ExcludeInstanceIds,omitnil,omitempty" name:"ExcludeInstanceIds"`

	// 新增资产自动包含 0 不包含 1包含
	AutoInclude *uint64 `json:"AutoInclude,omitnil,omitempty" name:"AutoInclude"`

	// 作用范围内旗舰版主机列表
	InstanceIds []*string `json:"InstanceIds,omitnil,omitempty" name:"InstanceIds"`
}

type ModifyVulDefenceSettingRequest struct {
	*tchttp.BaseRequest
	
	// 防御开关，0 关闭 1 开启
	Enable *uint64 `json:"Enable,omitnil,omitempty" name:"Enable"`

	// 1 全部旗舰版主机，0 Quuids列表主机
	Scope *uint64 `json:"Scope,omitnil,omitempty" name:"Scope"`

	// 作用范围内旗舰版主机列表
	Quuids []*string `json:"Quuids,omitnil,omitempty" name:"Quuids"`

	// 排除作用范围内旗舰版主机列表
	ExcludeInstanceIds []*string `json:"ExcludeInstanceIds,omitnil,omitempty" name:"ExcludeInstanceIds"`

	// 新增资产自动包含 0 不包含 1包含
	AutoInclude *uint64 `json:"AutoInclude,omitnil,omitempty" name:"AutoInclude"`

	// 作用范围内旗舰版主机列表
	InstanceIds []*string `json:"InstanceIds,omitnil,omitempty" name:"InstanceIds"`
}

func (r *ModifyVulDefenceSettingRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyVulDefenceSettingRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Enable")
	delete(f, "Scope")
	delete(f, "Quuids")
	delete(f, "ExcludeInstanceIds")
	delete(f, "AutoInclude")
	delete(f, "InstanceIds")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ModifyVulDefenceSettingRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyVulDefenceSettingResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ModifyVulDefenceSettingResponse struct {
	*tchttp.BaseResponse
	Response *ModifyVulDefenceSettingResponseParams `json:"Response"`
}

func (r *ModifyVulDefenceSettingResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyVulDefenceSettingResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyWarningHostConfigRequestParams struct {
	// 告警类型
	Type *int64 `json:"Type,omitnil,omitempty" name:"Type"`

	// 告警主机范围类型，0:全部主机，1:按所属项目选，2:按腾讯云标签选，3:按主机安全标签选，4:自选主机
	HostRange *int64 `json:"HostRange,omitnil,omitempty" name:"HostRange"`

	// 项目或标签的名称列表，自选主机时为空
	ItemLabels []*string `json:"ItemLabels,omitnil,omitempty" name:"ItemLabels"`

	// 机器列表
	Quuids []*string `json:"Quuids,omitnil,omitempty" name:"Quuids"`

	// 项目或标签的id列表，自选主机时为空
	ItemLabelIds []*string `json:"ItemLabelIds,omitnil,omitempty" name:"ItemLabelIds"`

	// 需排除的机器列表
	ExcludedQuuids []*string `json:"ExcludedQuuids,omitnil,omitempty" name:"ExcludedQuuids"`
}

type ModifyWarningHostConfigRequest struct {
	*tchttp.BaseRequest
	
	// 告警类型
	Type *int64 `json:"Type,omitnil,omitempty" name:"Type"`

	// 告警主机范围类型，0:全部主机，1:按所属项目选，2:按腾讯云标签选，3:按主机安全标签选，4:自选主机
	HostRange *int64 `json:"HostRange,omitnil,omitempty" name:"HostRange"`

	// 项目或标签的名称列表，自选主机时为空
	ItemLabels []*string `json:"ItemLabels,omitnil,omitempty" name:"ItemLabels"`

	// 机器列表
	Quuids []*string `json:"Quuids,omitnil,omitempty" name:"Quuids"`

	// 项目或标签的id列表，自选主机时为空
	ItemLabelIds []*string `json:"ItemLabelIds,omitnil,omitempty" name:"ItemLabelIds"`

	// 需排除的机器列表
	ExcludedQuuids []*string `json:"ExcludedQuuids,omitnil,omitempty" name:"ExcludedQuuids"`
}

func (r *ModifyWarningHostConfigRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyWarningHostConfigRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Type")
	delete(f, "HostRange")
	delete(f, "ItemLabels")
	delete(f, "Quuids")
	delete(f, "ItemLabelIds")
	delete(f, "ExcludedQuuids")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ModifyWarningHostConfigRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyWarningHostConfigResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ModifyWarningHostConfigResponse struct {
	*tchttp.BaseResponse
	Response *ModifyWarningHostConfigResponseParams `json:"Response"`
}

func (r *ModifyWarningHostConfigResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyWarningHostConfigResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyWarningSettingRequestParams struct {
	// 告警设置的修改内容
	WarningObjects []*WarningObject `json:"WarningObjects,omitnil,omitempty" name:"WarningObjects"`
}

type ModifyWarningSettingRequest struct {
	*tchttp.BaseRequest
	
	// 告警设置的修改内容
	WarningObjects []*WarningObject `json:"WarningObjects,omitnil,omitempty" name:"WarningObjects"`
}

func (r *ModifyWarningSettingRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyWarningSettingRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "WarningObjects")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ModifyWarningSettingRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyWarningSettingResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ModifyWarningSettingResponse struct {
	*tchttp.BaseResponse
	Response *ModifyWarningSettingResponseParams `json:"Response"`
}

func (r *ModifyWarningSettingResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyWarningSettingResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyWebHookPolicyRequestParams struct {
	// id
	Id *int64 `json:"Id,omitnil,omitempty" name:"Id"`

	// 策略名称
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// 事件类型
	Events []*WebHookEventKv `json:"Events,omitnil,omitempty" name:"Events"`

	// 主机范围
	HostLabels []*WebHookHostLabel `json:"HostLabels,omitnil,omitempty" name:"HostLabels"`

	// 接收人
	Receivers []*WebHookReceiver `json:"Receivers,omitnil,omitempty" name:"Receivers"`

	// 格式 0text 1json
	Format *int64 `json:"Format,omitnil,omitempty" name:"Format"`

	// 自定义透传字段
	CustomFields []*WebHookCustomField `json:"CustomFields,omitnil,omitempty" name:"CustomFields"`

	// 是否启用[1:禁用|0:启用]
	IsDisabled *int64 `json:"IsDisabled,omitnil,omitempty" name:"IsDisabled"`

	// 主机列表
	Quuids []*string `json:"Quuids,omitnil,omitempty" name:"Quuids"`

	// 需排除的机器列表	
	ExcludedQuuids []*string `json:"ExcludedQuuids,omitnil,omitempty" name:"ExcludedQuuids"`
}

type ModifyWebHookPolicyRequest struct {
	*tchttp.BaseRequest
	
	// id
	Id *int64 `json:"Id,omitnil,omitempty" name:"Id"`

	// 策略名称
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// 事件类型
	Events []*WebHookEventKv `json:"Events,omitnil,omitempty" name:"Events"`

	// 主机范围
	HostLabels []*WebHookHostLabel `json:"HostLabels,omitnil,omitempty" name:"HostLabels"`

	// 接收人
	Receivers []*WebHookReceiver `json:"Receivers,omitnil,omitempty" name:"Receivers"`

	// 格式 0text 1json
	Format *int64 `json:"Format,omitnil,omitempty" name:"Format"`

	// 自定义透传字段
	CustomFields []*WebHookCustomField `json:"CustomFields,omitnil,omitempty" name:"CustomFields"`

	// 是否启用[1:禁用|0:启用]
	IsDisabled *int64 `json:"IsDisabled,omitnil,omitempty" name:"IsDisabled"`

	// 主机列表
	Quuids []*string `json:"Quuids,omitnil,omitempty" name:"Quuids"`

	// 需排除的机器列表	
	ExcludedQuuids []*string `json:"ExcludedQuuids,omitnil,omitempty" name:"ExcludedQuuids"`
}

func (r *ModifyWebHookPolicyRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyWebHookPolicyRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Id")
	delete(f, "Name")
	delete(f, "Events")
	delete(f, "HostLabels")
	delete(f, "Receivers")
	delete(f, "Format")
	delete(f, "CustomFields")
	delete(f, "IsDisabled")
	delete(f, "Quuids")
	delete(f, "ExcludedQuuids")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ModifyWebHookPolicyRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyWebHookPolicyResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ModifyWebHookPolicyResponse struct {
	*tchttp.BaseResponse
	Response *ModifyWebHookPolicyResponseParams `json:"Response"`
}

func (r *ModifyWebHookPolicyResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyWebHookPolicyResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyWebHookPolicyStatusRequestParams struct {
	// id
	Id *int64 `json:"Id,omitnil,omitempty" name:"Id"`

	// 开关, 1禁用 0启用
	IsDisabled *int64 `json:"IsDisabled,omitnil,omitempty" name:"IsDisabled"`
}

type ModifyWebHookPolicyStatusRequest struct {
	*tchttp.BaseRequest
	
	// id
	Id *int64 `json:"Id,omitnil,omitempty" name:"Id"`

	// 开关, 1禁用 0启用
	IsDisabled *int64 `json:"IsDisabled,omitnil,omitempty" name:"IsDisabled"`
}

func (r *ModifyWebHookPolicyStatusRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyWebHookPolicyStatusRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Id")
	delete(f, "IsDisabled")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ModifyWebHookPolicyStatusRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyWebHookPolicyStatusResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ModifyWebHookPolicyStatusResponse struct {
	*tchttp.BaseResponse
	Response *ModifyWebHookPolicyStatusResponseParams `json:"Response"`
}

func (r *ModifyWebHookPolicyStatusResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyWebHookPolicyStatusResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyWebHookReceiverRequestParams struct {
	// id
	Id *int64 `json:"Id,omitnil,omitempty" name:"Id"`

	// 接收人名称
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// webhook地址
	Addr *string `json:"Addr,omitnil,omitempty" name:"Addr"`

	// 是否修改
	IsModify *bool `json:"IsModify,omitnil,omitempty" name:"IsModify"`
}

type ModifyWebHookReceiverRequest struct {
	*tchttp.BaseRequest
	
	// id
	Id *int64 `json:"Id,omitnil,omitempty" name:"Id"`

	// 接收人名称
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// webhook地址
	Addr *string `json:"Addr,omitnil,omitempty" name:"Addr"`

	// 是否修改
	IsModify *bool `json:"IsModify,omitnil,omitempty" name:"IsModify"`
}

func (r *ModifyWebHookReceiverRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyWebHookReceiverRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Id")
	delete(f, "Name")
	delete(f, "Addr")
	delete(f, "IsModify")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ModifyWebHookReceiverRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyWebHookReceiverResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ModifyWebHookReceiverResponse struct {
	*tchttp.BaseResponse
	Response *ModifyWebHookReceiverResponseParams `json:"Response"`
}

func (r *ModifyWebHookReceiverResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyWebHookReceiverResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyWebHookRuleRequestParams struct {
	// 规则内容
	Data *WebHookRuleDetail `json:"Data,omitnil,omitempty" name:"Data"`
}

type ModifyWebHookRuleRequest struct {
	*tchttp.BaseRequest
	
	// 规则内容
	Data *WebHookRuleDetail `json:"Data,omitnil,omitempty" name:"Data"`
}

func (r *ModifyWebHookRuleRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyWebHookRuleRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Data")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ModifyWebHookRuleRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyWebHookRuleResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ModifyWebHookRuleResponse struct {
	*tchttp.BaseResponse
	Response *ModifyWebHookRuleResponseParams `json:"Response"`
}

func (r *ModifyWebHookRuleResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyWebHookRuleResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyWebHookRuleStatusRequestParams struct {
	// 规则Id
	Id *int64 `json:"Id,omitnil,omitempty" name:"Id"`

	// 开启状态[0:开启|1:关闭]
	IsDisabled *int64 `json:"IsDisabled,omitnil,omitempty" name:"IsDisabled"`
}

type ModifyWebHookRuleStatusRequest struct {
	*tchttp.BaseRequest
	
	// 规则Id
	Id *int64 `json:"Id,omitnil,omitempty" name:"Id"`

	// 开启状态[0:开启|1:关闭]
	IsDisabled *int64 `json:"IsDisabled,omitnil,omitempty" name:"IsDisabled"`
}

func (r *ModifyWebHookRuleStatusRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyWebHookRuleStatusRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Id")
	delete(f, "IsDisabled")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ModifyWebHookRuleStatusRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyWebHookRuleStatusResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ModifyWebHookRuleStatusResponse struct {
	*tchttp.BaseResponse
	Response *ModifyWebHookRuleStatusResponseParams `json:"Response"`
}

func (r *ModifyWebHookRuleStatusResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyWebHookRuleStatusResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyWebPageProtectDirRequestParams struct {
	// 网站防护目录地址
	ProtectDirAddr *string `json:"ProtectDirAddr,omitnil,omitempty" name:"ProtectDirAddr"`

	// 网站防护目录名称
	ProtectDirName *string `json:"ProtectDirName,omitnil,omitempty" name:"ProtectDirName"`

	// 防护文件类型,分号分割 ;
	ProtectFileType *string `json:"ProtectFileType,omitnil,omitempty" name:"ProtectFileType"`

	// 防护机器列表信息
	HostConfig []*ProtectHostConfig `json:"HostConfig,omitnil,omitempty" name:"HostConfig"`
}

type ModifyWebPageProtectDirRequest struct {
	*tchttp.BaseRequest
	
	// 网站防护目录地址
	ProtectDirAddr *string `json:"ProtectDirAddr,omitnil,omitempty" name:"ProtectDirAddr"`

	// 网站防护目录名称
	ProtectDirName *string `json:"ProtectDirName,omitnil,omitempty" name:"ProtectDirName"`

	// 防护文件类型,分号分割 ;
	ProtectFileType *string `json:"ProtectFileType,omitnil,omitempty" name:"ProtectFileType"`

	// 防护机器列表信息
	HostConfig []*ProtectHostConfig `json:"HostConfig,omitnil,omitempty" name:"HostConfig"`
}

func (r *ModifyWebPageProtectDirRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyWebPageProtectDirRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "ProtectDirAddr")
	delete(f, "ProtectDirName")
	delete(f, "ProtectFileType")
	delete(f, "HostConfig")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ModifyWebPageProtectDirRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyWebPageProtectDirResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ModifyWebPageProtectDirResponse struct {
	*tchttp.BaseResponse
	Response *ModifyWebPageProtectDirResponseParams `json:"Response"`
}

func (r *ModifyWebPageProtectDirResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyWebPageProtectDirResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyWebPageProtectSettingRequestParams struct {
	// 需要操作的类型1 目录名称 2 防护文件类型
	ModifyType *uint64 `json:"ModifyType,omitnil,omitempty" name:"ModifyType"`

	// 提交值
	Value *string `json:"Value,omitnil,omitempty" name:"Value"`

	// 配置对应的protect_path
	Id *string `json:"Id,omitnil,omitempty" name:"Id"`
}

type ModifyWebPageProtectSettingRequest struct {
	*tchttp.BaseRequest
	
	// 需要操作的类型1 目录名称 2 防护文件类型
	ModifyType *uint64 `json:"ModifyType,omitnil,omitempty" name:"ModifyType"`

	// 提交值
	Value *string `json:"Value,omitnil,omitempty" name:"Value"`

	// 配置对应的protect_path
	Id *string `json:"Id,omitnil,omitempty" name:"Id"`
}

func (r *ModifyWebPageProtectSettingRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyWebPageProtectSettingRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "ModifyType")
	delete(f, "Value")
	delete(f, "Id")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ModifyWebPageProtectSettingRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyWebPageProtectSettingResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ModifyWebPageProtectSettingResponse struct {
	*tchttp.BaseResponse
	Response *ModifyWebPageProtectSettingResponseParams `json:"Response"`
}

func (r *ModifyWebPageProtectSettingResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyWebPageProtectSettingResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyWebPageProtectSwitchRequestParams struct {
	// 开关类型 1 防护开关  2 自动恢复开关 3 移除防护目录
	SwitchType *uint64 `json:"SwitchType,omitnil,omitempty" name:"SwitchType"`

	// 需要操作开关的网站 最大100条
	Ids []*string `json:"Ids,omitnil,omitempty" name:"Ids"`

	// 1 开启 0 关闭 SwitchType 为 1 | 2 必填;
	Status *uint64 `json:"Status,omitnil,omitempty" name:"Status"`
}

type ModifyWebPageProtectSwitchRequest struct {
	*tchttp.BaseRequest
	
	// 开关类型 1 防护开关  2 自动恢复开关 3 移除防护目录
	SwitchType *uint64 `json:"SwitchType,omitnil,omitempty" name:"SwitchType"`

	// 需要操作开关的网站 最大100条
	Ids []*string `json:"Ids,omitnil,omitempty" name:"Ids"`

	// 1 开启 0 关闭 SwitchType 为 1 | 2 必填;
	Status *uint64 `json:"Status,omitnil,omitempty" name:"Status"`
}

func (r *ModifyWebPageProtectSwitchRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyWebPageProtectSwitchRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "SwitchType")
	delete(f, "Ids")
	delete(f, "Status")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ModifyWebPageProtectSwitchRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyWebPageProtectSwitchResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ModifyWebPageProtectSwitchResponse struct {
	*tchttp.BaseResponse
	Response *ModifyWebPageProtectSwitchResponseParams `json:"Response"`
}

func (r *ModifyWebPageProtectSwitchResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyWebPageProtectSwitchResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type MonthInspectionReport struct {
	// 巡检报告名称
	ReportName *string `json:"ReportName,omitnil,omitempty" name:"ReportName"`

	// 巡检报告下载地址
	ReportPath *string `json:"ReportPath,omitnil,omitempty" name:"ReportPath"`

	// 巡检报告更新时间
	ModifyTime *string `json:"ModifyTime,omitnil,omitempty" name:"ModifyTime"`
}

type NetAttackEvent struct {
	// 日志ID
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`

	// 客户端ID
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 目标端口
	DstPort *uint64 `json:"DstPort,omitnil,omitempty" name:"DstPort"`

	// 来源IP
	SrcIP *string `json:"SrcIP,omitnil,omitempty" name:"SrcIP"`

	// 来源地
	Location *string `json:"Location,omitnil,omitempty" name:"Location"`

	// 漏洞id
	VulId *uint64 `json:"VulId,omitnil,omitempty" name:"VulId"`

	// 漏洞名称
	VulName *string `json:"VulName,omitnil,omitempty" name:"VulName"`

	// 攻击时间
	MergeTime *string `json:"MergeTime,omitnil,omitempty" name:"MergeTime"`

	// 主机额外信息
	// 注意：此字段可能返回 null，表示取不到有效值。
	MachineExtraInfo *MachineExtraInfo `json:"MachineExtraInfo,omitnil,omitempty" name:"MachineExtraInfo"`

	// 攻击状态，0: 尝试攻击 1: 实锤攻击(攻击成功)
	Type *uint64 `json:"Type,omitnil,omitempty" name:"Type"`

	// 处理状态，0 待处理 1 已处理 2 已加白  3 已忽略 4 已删除 5: 已开启防御
	Status *uint64 `json:"Status,omitnil,omitempty" name:"Status"`

	// 漏洞是否支持防御，0:不支持 1:支持
	VulSupportDefense *uint64 `json:"VulSupportDefense,omitnil,omitempty" name:"VulSupportDefense"`

	// 是否开启漏洞防御，0关1开
	VulDefenceStatus *uint64 `json:"VulDefenceStatus,omitnil,omitempty" name:"VulDefenceStatus"`

	// 机器付费版本，0 基础版，1专业版，2旗舰版，3普惠版
	PayVersion *uint64 `json:"PayVersion,omitnil,omitempty" name:"PayVersion"`

	// cvm uuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 攻击次数
	Count *uint64 `json:"Count,omitnil,omitempty" name:"Count"`

	// 是否今日新增主机
	New *bool `json:"New,omitnil,omitempty" name:"New"`
}

type NetAttackEventInfo struct {
	// 处理状态，0 待处理 1 已处理 2 已加白  3 已忽略 4 已删除 5: 已开启防御
	Status *uint64 `json:"Status,omitnil,omitempty" name:"Status"`

	// 攻击源ip
	SrcIP *string `json:"SrcIP,omitnil,omitempty" name:"SrcIP"`

	// 攻击源地
	Location *string `json:"Location,omitnil,omitempty" name:"Location"`

	// 漏洞名称
	VulName *string `json:"VulName,omitnil,omitempty" name:"VulName"`

	// 漏洞id
	VulId *uint64 `json:"VulId,omitnil,omitempty" name:"VulId"`

	// 漏洞CVE编号
	CVEId *string `json:"CVEId,omitnil,omitempty" name:"CVEId"`

	// 漏洞攻击热度
	AttackLevel *uint64 `json:"AttackLevel,omitnil,omitempty" name:"AttackLevel"`

	// 漏洞防御状态，0关闭，1开启
	VulDefenceStatus *uint64 `json:"VulDefenceStatus,omitnil,omitempty" name:"VulDefenceStatus"`

	// 漏洞是否支持防御，0:不支持 1:支持
	VulSupportDefense *uint64 `json:"VulSupportDefense,omitnil,omitempty" name:"VulSupportDefense"`

	// 服务进程 base64 
	SvcPs *string `json:"SvcPs,omitnil,omitempty" name:"SvcPs"`

	// 攻击数据包
	NetPayload *string `json:"NetPayload,omitnil,omitempty" name:"NetPayload"`

	// 异常行为
	AbnormalAction *string `json:"AbnormalAction,omitnil,omitempty" name:"AbnormalAction"`

	// 主机uuid
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 事件id
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`

	// 主机额外信息
	// 注意：此字段可能返回 null，表示取不到有效值。
	MachineExtraInfo *MachineExtraInfo `json:"MachineExtraInfo,omitnil,omitempty" name:"MachineExtraInfo"`

	// 目标端口
	DstPort *uint64 `json:"DstPort,omitnil,omitempty" name:"DstPort"`

	// 攻击次数
	Count *uint64 `json:"Count,omitnil,omitempty" name:"Count"`

	// 机器付费版本，0 基础版，1专业版，2旗舰版，3普惠版
	PayVersion *uint64 `json:"PayVersion,omitnil,omitempty" name:"PayVersion"`

	// cvm uuid
	// 注意：此字段可能返回 null，表示取不到有效值。
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 攻击发生时间
	// 注意：此字段可能返回 null，表示取不到有效值。
	MergeTime *string `json:"MergeTime,omitnil,omitempty" name:"MergeTime"`

	// 0: 尝试攻击 1:攻击成功
	// 注意：此字段可能返回 null，表示取不到有效值。
	Type *uint64 `json:"Type,omitnil,omitempty" name:"Type"`

	// 0:无失陷行为 1: rce(命令执行) 2: dnslog 3: writefile
	// 注意：此字段可能返回 null，表示取不到有效值。
	HostOpType *uint64 `json:"HostOpType,omitnil,omitempty" name:"HostOpType"`

	// 进程树,需要用base64 解码
	// 注意：此字段可能返回 null，表示取不到有效值。
	HostOpProcessTree *string `json:"HostOpProcessTree,omitnil,omitempty" name:"HostOpProcessTree"`
}

type NetAttackTopInfo struct {
	// 网络攻击主机维度top统计数据
	// 注意：此字段可能返回 null，表示取不到有效值。
	Agent []*TopInfo `json:"Agent,omitnil,omitempty" name:"Agent"`

	// 网络攻击ip来源维度top统计数据
	// 注意：此字段可能返回 null，表示取不到有效值。
	SrcIp []*TopInfo `json:"SrcIp,omitnil,omitempty" name:"SrcIp"`

	// 网络攻击目标端口维度top统计数据
	// 注意：此字段可能返回 null，表示取不到有效值。
	DstPort []*TopInfo `json:"DstPort,omitnil,omitempty" name:"DstPort"`

	// 网络攻击漏洞维度top统计数据
	// 注意：此字段可能返回 null，表示取不到有效值。
	Vul []*TopInfo `json:"Vul,omitnil,omitempty" name:"Vul"`
}

type NetAttackTrend struct {
	// 时间点，如 2023-05-06
	// 注意：此字段可能返回 null，表示取不到有效值。
	DateTime *string `json:"DateTime,omitnil,omitempty" name:"DateTime"`

	// 攻击次数
	// 注意：此字段可能返回 null，表示取不到有效值。
	AttackCount *uint64 `json:"AttackCount,omitnil,omitempty" name:"AttackCount"`

	// 尝试攻击次数
	// 注意：此字段可能返回 null，表示取不到有效值。
	TryAttackCount *uint64 `json:"TryAttackCount,omitnil,omitempty" name:"TryAttackCount"`

	// 攻击成功次数
	// 注意：此字段可能返回 null，表示取不到有效值。
	SuccAttackCount *uint64 `json:"SuccAttackCount,omitnil,omitempty" name:"SuccAttackCount"`
}

type NetAttackWhiteRule struct {
	// 规则id
	// 注意：此字段可能返回 null，表示取不到有效值。
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`

	// 规则描述
	// 注意：此字段可能返回 null，表示取不到有效值。
	Description *string `json:"Description,omitnil,omitempty" name:"Description"`

	// 0: 一组quuid 1: 所有主机
	// 注意：此字段可能返回 null，表示取不到有效值。
	Scope *uint64 `json:"Scope,omitnil,omitempty" name:"Scope"`

	// 是否处理之前的事件 0: 不处理 1:处理
	// 注意：此字段可能返回 null，表示取不到有效值。
	DealOldEvents *uint64 `json:"DealOldEvents,omitnil,omitempty" name:"DealOldEvents"`

	// 主机quuid 多个用;隔开
	// 注意：此字段可能返回 null，表示取不到有效值。
	Quuids *string `json:"Quuids,omitnil,omitempty" name:"Quuids"`

	// 来源IP 单IP:1.1.1.1  IP范围:1.1.1.1-1.1.2.1  IP范围：1.1.1.0/24 多个用;隔开
	// 注意：此字段可能返回 null，表示取不到有效值。
	SrcIP *string `json:"SrcIP,omitnil,omitempty" name:"SrcIP"`

	// 创建时间
	// 注意：此字段可能返回 null，表示取不到有效值。
	CreateTime *string `json:"CreateTime,omitnil,omitempty" name:"CreateTime"`

	// 修改时间
	// 注意：此字段可能返回 null，表示取不到有效值。
	ModifyTime *string `json:"ModifyTime,omitnil,omitempty" name:"ModifyTime"`
}

type OpenPortStatistics struct {
	// 端口号
	Port *uint64 `json:"Port,omitnil,omitempty" name:"Port"`

	// 主机数量
	MachineNum *uint64 `json:"MachineNum,omitnil,omitempty" name:"MachineNum"`
}

type OrderModifyObject struct {
	// 资源ID
	ResourceId *string `json:"ResourceId,omitnil,omitempty" name:"ResourceId"`

	// 新产品标识,这里支持PRO_VERSION 专业版,FLAGSHIP 旗舰版
	NewSubProductCode *string `json:"NewSubProductCode,omitnil,omitempty" name:"NewSubProductCode"`

	// 扩容/缩容数,变配子产品忽略该参数
	InquireNum *int64 `json:"InquireNum,omitnil,omitempty" name:"InquireNum"`
}

type OrderResource struct {
	// 资源主键ID
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`

	// 资源ID
	ResourceId *string `json:"ResourceId,omitnil,omitempty" name:"ResourceId"`

	// 开始时间
	BeginTime *string `json:"BeginTime,omitnil,omitempty" name:"BeginTime"`

	// 到期时间
	EndTime *string `json:"EndTime,omitnil,omitempty" name:"EndTime"`

	// 授权类型
	LicenseType *uint64 `json:"LicenseType,omitnil,omitempty" name:"LicenseType"`
}

type OsName struct {
	// 系统名称
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// 操作系统类型枚举值
	MachineOSType *uint64 `json:"MachineOSType,omitnil,omitempty" name:"MachineOSType"`
}

type Place struct {
	// 城市 ID。
	CityId *uint64 `json:"CityId,omitnil,omitempty" name:"CityId"`

	// 省份 ID。
	ProvinceId *uint64 `json:"ProvinceId,omitnil,omitempty" name:"ProvinceId"`

	// 国家ID，暂只支持国内：1。
	CountryId *uint64 `json:"CountryId,omitnil,omitempty" name:"CountryId"`

	// 位置名称
	Location *string `json:"Location,omitnil,omitempty" name:"Location"`
}

type PolicyRules struct {
	// 进程
	// 注意：此字段可能返回 null，表示取不到有效值。
	Process *CommandLine `json:"Process,omitnil,omitempty" name:"Process"`

	// 父进程
	// 注意：此字段可能返回 null，表示取不到有效值。
	PProcess *CommandLine `json:"PProcess,omitnil,omitempty" name:"PProcess"`

	// 祖先进程
	// 注意：此字段可能返回 null，表示取不到有效值。
	AProcess *CommandLine `json:"AProcess,omitnil,omitempty" name:"AProcess"`
}

type PrivilegeEscalationProcess struct {
	// 数据ID
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`

	// 主机安全ID
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 主机ID
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 主机内网IP
	Hostip *string `json:"Hostip,omitnil,omitempty" name:"Hostip"`

	// 进程名
	ProcessName *string `json:"ProcessName,omitnil,omitempty" name:"ProcessName"`

	// 进程路径
	FullPath *string `json:"FullPath,omitnil,omitempty" name:"FullPath"`

	// 执行命令
	CmdLine *string `json:"CmdLine,omitnil,omitempty" name:"CmdLine"`

	// 用户名
	UserName *string `json:"UserName,omitnil,omitempty" name:"UserName"`

	// 用户组
	UserGroup *string `json:"UserGroup,omitnil,omitempty" name:"UserGroup"`

	// 进程文件权限
	ProcFilePrivilege *string `json:"ProcFilePrivilege,omitnil,omitempty" name:"ProcFilePrivilege"`

	// 父进程名
	ParentProcName *string `json:"ParentProcName,omitnil,omitempty" name:"ParentProcName"`

	// 父进程用户名
	ParentProcUser *string `json:"ParentProcUser,omitnil,omitempty" name:"ParentProcUser"`

	// 父进程用户组
	ParentProcGroup *string `json:"ParentProcGroup,omitnil,omitempty" name:"ParentProcGroup"`

	// 父进程路径
	ParentProcPath *string `json:"ParentProcPath,omitnil,omitempty" name:"ParentProcPath"`

	// 进程树
	ProcTree *string `json:"ProcTree,omitnil,omitempty" name:"ProcTree"`

	// 处理状态：0-待处理 2-白名单 3-已处理 4-已忽略
	Status *uint64 `json:"Status,omitnil,omitempty" name:"Status"`

	// 发生时间
	CreateTime *string `json:"CreateTime,omitnil,omitempty" name:"CreateTime"`

	// 机器名
	MachineName *string `json:"MachineName,omitnil,omitempty" name:"MachineName"`

	// 附加信息
	// 注意：此字段可能返回 null，表示取不到有效值。
	MachineExtraInfo *MachineExtraInfo `json:"MachineExtraInfo,omitnil,omitempty" name:"MachineExtraInfo"`

	// 进程id
	// 注意：此字段可能返回 null，表示取不到有效值。
	Pid *int64 `json:"Pid,omitnil,omitempty" name:"Pid"`
}

type PrivilegeEventInfo struct {
	// 数据ID
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`

	// 云镜ID
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 主机ID
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 主机内网IP
	HostIp *string `json:"HostIp,omitnil,omitempty" name:"HostIp"`

	// 进程名
	ProcessName *string `json:"ProcessName,omitnil,omitempty" name:"ProcessName"`

	// 进程路径
	FullPath *string `json:"FullPath,omitnil,omitempty" name:"FullPath"`

	// 执行命令
	CmdLine *string `json:"CmdLine,omitnil,omitempty" name:"CmdLine"`

	// 用户名
	UserName *string `json:"UserName,omitnil,omitempty" name:"UserName"`

	// 用户组
	UserGroup *string `json:"UserGroup,omitnil,omitempty" name:"UserGroup"`

	// 进程文件权限
	ProcFilePrivilege *string `json:"ProcFilePrivilege,omitnil,omitempty" name:"ProcFilePrivilege"`

	// 父进程名
	ParentProcName *string `json:"ParentProcName,omitnil,omitempty" name:"ParentProcName"`

	// 父进程用户名
	ParentProcUser *string `json:"ParentProcUser,omitnil,omitempty" name:"ParentProcUser"`

	// 父进程用户组
	ParentProcGroup *string `json:"ParentProcGroup,omitnil,omitempty" name:"ParentProcGroup"`

	// 父进程路径
	ParentProcPath *string `json:"ParentProcPath,omitnil,omitempty" name:"ParentProcPath"`

	// 进程树 json  pid:进程id，exe:文件路径 ，account:进程所属用组和用户 ,cmdline:执行命令，ssh_service: SSH服务ip, ssh_soure:登录源
	PsTree *string `json:"PsTree,omitnil,omitempty" name:"PsTree"`

	// 处理状态：0-待处理 2-白名单 3-已处理 4-已忽略
	Status *uint64 `json:"Status,omitnil,omitempty" name:"Status"`

	// 发生时间
	CreateTime *string `json:"CreateTime,omitnil,omitempty" name:"CreateTime"`

	// 机器名
	MachineName *string `json:"MachineName,omitnil,omitempty" name:"MachineName"`

	// 建议方案
	SuggestScheme *string `json:"SuggestScheme,omitnil,omitempty" name:"SuggestScheme"`

	// 危害描述信息
	HarmDescribe *string `json:"HarmDescribe,omitnil,omitempty" name:"HarmDescribe"`

	// 标签
	Tags []*string `json:"Tags,omitnil,omitempty" name:"Tags"`

	// 参考链接
	References []*string `json:"References,omitnil,omitempty" name:"References"`

	// 主机外网ip
	MachineWanIp *string `json:"MachineWanIp,omitnil,omitempty" name:"MachineWanIp"`

	// 权限列表|隔开
	NewCaps *string `json:"NewCaps,omitnil,omitempty" name:"NewCaps"`

	// 主机在线状态 OFFLINE  ONLINE
	MachineStatus *string `json:"MachineStatus,omitnil,omitempty" name:"MachineStatus"`

	// 处理时间
	ModifyTime *string `json:"ModifyTime,omitnil,omitempty" name:"ModifyTime"`
}

type PrivilegeRule struct {
	// 规则ID
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`

	// 客户端ID
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 进程名
	ProcessName *string `json:"ProcessName,omitnil,omitempty" name:"ProcessName"`

	// 是否S权限
	SMode *uint64 `json:"SMode,omitnil,omitempty" name:"SMode"`

	// 操作人
	Operator *string `json:"Operator,omitnil,omitempty" name:"Operator"`

	// 是否全局规则
	IsGlobal *uint64 `json:"IsGlobal,omitnil,omitempty" name:"IsGlobal"`

	// 状态(0: 有效 1: 无效)
	Status *uint64 `json:"Status,omitnil,omitempty" name:"Status"`

	// 创建时间
	CreateTime *string `json:"CreateTime,omitnil,omitempty" name:"CreateTime"`

	// 修改时间
	ModifyTime *string `json:"ModifyTime,omitnil,omitempty" name:"ModifyTime"`

	// 主机IP
	Hostip *string `json:"Hostip,omitnil,omitempty" name:"Hostip"`
}

type ProcessStatistics struct {
	// 进程名。
	ProcessName *string `json:"ProcessName,omitnil,omitempty" name:"ProcessName"`

	// 主机数量。
	MachineNum *uint64 `json:"MachineNum,omitnil,omitempty" name:"MachineNum"`
}

type ProductStatusInfo struct {
	// 防护状态，1未防护，2防护中，3试用中，4已过期
	FWUserStatus *uint64 `json:"FWUserStatus,omitnil,omitempty" name:"FWUserStatus"`

	// 是否可以申请试用，true可以申请
	CanApplyTrial *bool `json:"CanApplyTrial,omitnil,omitempty" name:"CanApplyTrial"`

	// 无法试用原因，可试用为空
	CanNotApplyReason *string `json:"CanNotApplyReason,omitnil,omitempty" name:"CanNotApplyReason"`

	// 上次试用结束时间（不存在试用记录则为空）
	LastTrialTime *string `json:"LastTrialTime,omitnil,omitempty" name:"LastTrialTime"`
}

type ProtectDirInfo struct {
	// 网站名称
	DirName *string `json:"DirName,omitnil,omitempty" name:"DirName"`

	// 网站防护目录地址
	DirPath *string `json:"DirPath,omitnil,omitempty" name:"DirPath"`

	// 关联服务器数
	RelatedServerNum *uint64 `json:"RelatedServerNum,omitnil,omitempty" name:"RelatedServerNum"`

	// 防护服务器数
	ProtectServerNum *uint64 `json:"ProtectServerNum,omitnil,omitempty" name:"ProtectServerNum"`

	// 未防护服务器数
	NoProtectServerNum *uint64 `json:"NoProtectServerNum,omitnil,omitempty" name:"NoProtectServerNum"`

	// 唯一ID
	Id *string `json:"Id,omitnil,omitempty" name:"Id"`

	// 防护状态
	ProtectStatus *uint64 `json:"ProtectStatus,omitnil,omitempty" name:"ProtectStatus"`

	// 防护异常
	ProtectException *uint64 `json:"ProtectException,omitnil,omitempty" name:"ProtectException"`

	// 自动恢复开关 (Filters 过滤Quuid 时 返回) 默认0
	AutoRestoreSwitchStatus *uint64 `json:"AutoRestoreSwitchStatus,omitnil,omitempty" name:"AutoRestoreSwitchStatus"`

	// 首次开启防护时间
	// 注意：此字段可能返回 null，表示取不到有效值。
	FirstProtectTime *string `json:"FirstProtectTime,omitnil,omitempty" name:"FirstProtectTime"`

	// 最近开启防护时间
	// 注意：此字段可能返回 null，表示取不到有效值。
	LatestProtectTime *string `json:"LatestProtectTime,omitnil,omitempty" name:"LatestProtectTime"`

	// 防护文件类型
	// 注意：此字段可能返回 null，表示取不到有效值。
	ProtectFileType *string `json:"ProtectFileType,omitnil,omitempty" name:"ProtectFileType"`

	// 防护文件总数
	// 注意：此字段可能返回 null，表示取不到有效值。
	ProtectFilesCount *int64 `json:"ProtectFilesCount,omitnil,omitempty" name:"ProtectFilesCount"`
}

type ProtectDirRelatedServer struct {
	// 唯一ID
	Id *string `json:"Id,omitnil,omitempty" name:"Id"`

	// 服务器名称
	HostName *string `json:"HostName,omitnil,omitempty" name:"HostName"`

	// 服务器IP
	HostIp *string `json:"HostIp,omitnil,omitempty" name:"HostIp"`

	// 服务器系统
	MachineOs *string `json:"MachineOs,omitnil,omitempty" name:"MachineOs"`

	// 关联目录数
	RelateDirNum *uint64 `json:"RelateDirNum,omitnil,omitempty" name:"RelateDirNum"`

	// 防护状态
	ProtectStatus *uint64 `json:"ProtectStatus,omitnil,omitempty" name:"ProtectStatus"`

	// 防护开关
	ProtectSwitch *uint64 `json:"ProtectSwitch,omitnil,omitempty" name:"ProtectSwitch"`

	// 自动恢复开关
	AutoRestoreSwitchStatus *uint64 `json:"AutoRestoreSwitchStatus,omitnil,omitempty" name:"AutoRestoreSwitchStatus"`

	// 服务器唯一ID
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 是否已经授权
	Authorization *bool `json:"Authorization,omitnil,omitempty" name:"Authorization"`

	// 异常状态
	Exception *uint64 `json:"Exception,omitnil,omitempty" name:"Exception"`

	// 过渡进度
	Progress *uint64 `json:"Progress,omitnil,omitempty" name:"Progress"`

	// 异常信息
	ExceptionMessage *string `json:"ExceptionMessage,omitnil,omitempty" name:"ExceptionMessage"`

	// 主机额外信息
	// 注意：此字段可能返回 null，表示取不到有效值。
	MachineExtraInfo *MachineExtraInfo `json:"MachineExtraInfo,omitnil,omitempty" name:"MachineExtraInfo"`
}

type ProtectEventLists struct {
	// 服务器名称
	HostName *string `json:"HostName,omitnil,omitempty" name:"HostName"`

	// 服务器ip
	HostIp *string `json:"HostIp,omitnil,omitempty" name:"HostIp"`

	// 事件地址
	EventDir *string `json:"EventDir,omitnil,omitempty" name:"EventDir"`

	// 事件类型 0-内容被修改恢复；1-权限被修改恢复；2-归属被修改恢复；3-被删除恢复；4-新增删除
	EventType *uint64 `json:"EventType,omitnil,omitempty" name:"EventType"`

	// 事件状态 1 已恢复 0 未恢复
	EventStatus *uint64 `json:"EventStatus,omitnil,omitempty" name:"EventStatus"`

	// 发现时间
	CreateTime *string `json:"CreateTime,omitnil,omitempty" name:"CreateTime"`

	// 恢复时间
	RestoreTime *string `json:"RestoreTime,omitnil,omitempty" name:"RestoreTime"`

	// 唯一ID
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`

	// 文件类型 0-常规文件；1-目录；2-软链
	FileType *uint64 `json:"FileType,omitnil,omitempty" name:"FileType"`

	// 主机额外信息
	MachineExtraInfo *MachineExtraInfo `json:"MachineExtraInfo,omitnil,omitempty" name:"MachineExtraInfo"`

	// 机器实例uuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`
}

type ProtectHostConfig struct {
	// 机器唯一ID
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 防护开关 0  关闭 1开启
	ProtectSwitch *uint64 `json:"ProtectSwitch,omitnil,omitempty" name:"ProtectSwitch"`

	// 自动恢复开关 0 关闭 1开启
	AutoRecovery *uint64 `json:"AutoRecovery,omitnil,omitempty" name:"AutoRecovery"`
}

type ProtectMachine struct {
	// 机器名称
	HostName *string `json:"HostName,omitnil,omitempty" name:"HostName"`

	// 机器IP
	HostIp *string `json:"HostIp,omitnil,omitempty" name:"HostIp"`

	// 防护目录数
	SafeguardDirNum *uint64 `json:"SafeguardDirNum,omitnil,omitempty" name:"SafeguardDirNum"`
}

type ProtectMachineInfo struct {
	// 机器名称
	HostName *string `json:"HostName,omitnil,omitempty" name:"HostName"`

	// 机器IP
	HostIp *string `json:"HostIp,omitnil,omitempty" name:"HostIp"`

	// 开通时间
	CreateTime *string `json:"CreateTime,omitnil,omitempty" name:"CreateTime"`

	// 到期时间
	ExpireTime *string `json:"ExpireTime,omitnil,omitempty" name:"ExpireTime"`
}

type ProtectNetInfo struct {
	// 任务id
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// 护网天数
	ProtectDays *uint64 `json:"ProtectDays,omitnil,omitempty" name:"ProtectDays"`

	// 护网状态 0未启动，1护网中，2已完成
	Status *uint64 `json:"Status,omitnil,omitempty" name:"Status"`

	// 护网启动时间
	StartTime *string `json:"StartTime,omitnil,omitempty" name:"StartTime"`

	// 护网完成时间
	EndTime *string `json:"EndTime,omitnil,omitempty" name:"EndTime"`

	// 报告下载地址
	ReportPath *string `json:"ReportPath,omitnil,omitempty" name:"ReportPath"`
}

type ProtectStat struct {
	// 名称
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// 数量
	Num *uint64 `json:"Num,omitnil,omitempty" name:"Num"`
}

type RansomDefenseBackup struct {
	// 备份时间
	BackupTime *string `json:"BackupTime,omitnil,omitempty" name:"BackupTime"`

	// 勒索状态：0无告警, 1有告警
	EventStatus *uint64 `json:"EventStatus,omitnil,omitempty" name:"EventStatus"`

	// 备份状态：0备份中，1正常，2、3失败，4快照已过期，9快照已删除
	BackupStatus *uint64 `json:"BackupStatus,omitnil,omitempty" name:"BackupStatus"`

	// 备份磁盘数量
	DiskCount *uint64 `json:"DiskCount,omitnil,omitempty" name:"DiskCount"`

	// 硬盘信息，；分隔
	Disks *string `json:"Disks,omitnil,omitempty" name:"Disks"`

	// 快照列表，；分隔
	SnapshotIds *string `json:"SnapshotIds,omitnil,omitempty" name:"SnapshotIds"`

	// 策略id
	StrategyId *uint64 `json:"StrategyId,omitnil,omitempty" name:"StrategyId"`

	// 策略状态:0关闭，1开启，9已删除
	StrategyStatus *uint64 `json:"StrategyStatus,omitnil,omitempty" name:"StrategyStatus"`

	// 策略名称
	StrategyName *string `json:"StrategyName,omitnil,omitempty" name:"StrategyName"`
}

type RansomDefenseEvent struct {
	// 事件id
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`

	// 主机uuid
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// cvm uuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 主机名称
	HostName *string `json:"HostName,omitnil,omitempty" name:"HostName"`

	// 事件状态 0待处理，1已处理，2已信任，3处理中，4已恢复备份
	Status *uint64 `json:"Status,omitnil,omitempty" name:"Status"`

	// 被篡改文件路径
	BaitFilePath *string `json:"BaitFilePath,omitnil,omitempty" name:"BaitFilePath"`

	// 恶意文件路径
	FilePath *string `json:"FilePath,omitnil,omitempty" name:"FilePath"`

	// 恶意进程id
	Pid *uint64 `json:"Pid,omitnil,omitempty" name:"Pid"`

	// 恶意进程参数
	PidParam *string `json:"PidParam,omitnil,omitempty" name:"PidParam"`

	// 恶意文件大小
	FileSize *uint64 `json:"FileSize,omitnil,omitempty" name:"FileSize"`

	// 恶意文件md5
	FileMd5 *string `json:"FileMd5,omitnil,omitempty" name:"FileMd5"`

	// 事件类型：0加密勒索，1文件篡改
	Type *uint64 `json:"Type,omitnil,omitempty" name:"Type"`

	// 事件发送时间
	CreateTime *string `json:"CreateTime,omitnil,omitempty" name:"CreateTime"`

	// cvm 实例id
	InstanceId *string `json:"InstanceId,omitnil,omitempty" name:"InstanceId"`

	// 事件修改事件
	ModifyTime *string `json:"ModifyTime,omitnil,omitempty" name:"ModifyTime"`

	// 策略id
	StrategyId *uint64 `json:"StrategyId,omitnil,omitempty" name:"StrategyId"`

	// 策略名称
	StrategyName *string `json:"StrategyName,omitnil,omitempty" name:"StrategyName"`

	// 主机外网ip
	HostIp *string `json:"HostIp,omitnil,omitempty" name:"HostIp"`

	// 主机内网ip
	WanIp *string `json:"WanIp,omitnil,omitempty" name:"WanIp"`

	// 进程树 base64 json
	PsTree *string `json:"PsTree,omitnil,omitempty" name:"PsTree"`

	// 进程启动时间
	ProcessStartTime *string `json:"ProcessStartTime,omitnil,omitempty" name:"ProcessStartTime"`

	// 主机拥有快照备份数
	SnapshotNum *uint64 `json:"SnapshotNum,omitnil,omitempty" name:"SnapshotNum"`
}

// Predefined struct for user
type RansomDefenseRollbackRequestParams struct {
	// 快照时间
	BackupTime *string `json:"BackupTime,omitnil,omitempty" name:"BackupTime"`

	// 主机Quuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 需要回滚的硬盘信息，硬盘直接用;分隔，留空为全部已快照磁盘： disk-id1|disk-name1;disk-id2|disk-name2
	DiskInfo *string `json:"DiskInfo,omitnil,omitempty" name:"DiskInfo"`
}

type RansomDefenseRollbackRequest struct {
	*tchttp.BaseRequest
	
	// 快照时间
	BackupTime *string `json:"BackupTime,omitnil,omitempty" name:"BackupTime"`

	// 主机Quuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 需要回滚的硬盘信息，硬盘直接用;分隔，留空为全部已快照磁盘： disk-id1|disk-name1;disk-id2|disk-name2
	DiskInfo *string `json:"DiskInfo,omitnil,omitempty" name:"DiskInfo"`
}

func (r *RansomDefenseRollbackRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *RansomDefenseRollbackRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "BackupTime")
	delete(f, "Quuid")
	delete(f, "DiskInfo")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "RansomDefenseRollbackRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type RansomDefenseRollbackResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type RansomDefenseRollbackResponse struct {
	*tchttp.BaseResponse
	Response *RansomDefenseRollbackResponseParams `json:"Response"`
}

func (r *RansomDefenseRollbackResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *RansomDefenseRollbackResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type RansomDefenseRollbackTask struct {
	// 任务ID
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`

	// 主机Uuid
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 主机Quuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 主机名称
	MachineName *string `json:"MachineName,omitnil,omitempty" name:"MachineName"`

	// 回滚任务状态：0进行中，1成功，2失败
	Status *uint64 `json:"Status,omitnil,omitempty" name:"Status"`

	// 硬盘id列表，;分隔
	Disks *string `json:"Disks,omitnil,omitempty" name:"Disks"`

	// 操作时间
	CreateTime *string `json:"CreateTime,omitnil,omitempty" name:"CreateTime"`

	// 快照时间
	BackupTime *string `json:"BackupTime,omitnil,omitempty" name:"BackupTime"`

	// Status!=0时为完成时间
	ModifyTime *string `json:"ModifyTime,omitnil,omitempty" name:"ModifyTime"`

	// 可用区信息
	RegionInfo *RegionInfo `json:"RegionInfo,omitnil,omitempty" name:"RegionInfo"`

	// 主机示例ID
	// 注意：此字段可能返回 null，表示取不到有效值。
	InstanceId *string `json:"InstanceId,omitnil,omitempty" name:"InstanceId"`
}

type RansomDefenseStrategy struct {
	// 策略id
	Id *int64 `json:"Id,omitnil,omitempty" name:"Id"`

	// 操作uin
	// 注意：此字段可能返回 null，表示取不到有效值。
	Uin *string `json:"Uin,omitnil,omitempty" name:"Uin"`

	// 策略名称
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// 策略备注
	// 注意：此字段可能返回 null，表示取不到有效值。
	Description *string `json:"Description,omitnil,omitempty" name:"Description"`

	// 开启状态：0关闭，1开启
	Status *uint64 `json:"Status,omitnil,omitempty" name:"Status"`

	// 是否对所有主机生效
	IsAll *uint64 `json:"IsAll,omitnil,omitempty" name:"IsAll"`

	// 包含目录，用;分隔
	// 注意：此字段可能返回 null，表示取不到有效值。
	IncludeDir *string `json:"IncludeDir,omitnil,omitempty" name:"IncludeDir"`

	// 包含目录，用;分隔
	// 注意：此字段可能返回 null，表示取不到有效值。
	ExcludeDir *string `json:"ExcludeDir,omitnil,omitempty" name:"ExcludeDir"`

	// 备份模式： 0按周，1按天
	// 注意：此字段可能返回 null，表示取不到有效值。
	BackupType *uint64 `json:"BackupType,omitnil,omitempty" name:"BackupType"`

	// 备份星期天数（1-7）：1;2;3;4
	// 注意：此字段可能返回 null，表示取不到有效值。
	Weekday *string `json:"Weekday,omitnil,omitempty" name:"Weekday"`

	// 备份执行时间点(0-23): 11:00;12:00
	Hour *string `json:"Hour,omitnil,omitempty" name:"Hour"`

	// 保存天数，0永久保存
	SaveDay *uint64 `json:"SaveDay,omitnil,omitempty" name:"SaveDay"`

	// 创建时间
	// 注意：此字段可能返回 null，表示取不到有效值。
	CreateTime *string `json:"CreateTime,omitnil,omitempty" name:"CreateTime"`

	// 最近修改时间
	// 注意：此字段可能返回 null，表示取不到有效值。
	ModifyTime *string `json:"ModifyTime,omitnil,omitempty" name:"ModifyTime"`

	// 绑定机器数
	// 注意：此字段可能返回 null，表示取不到有效值。
	MachineCount *uint64 `json:"MachineCount,omitnil,omitempty" name:"MachineCount"`
}

type RansomDefenseStrategyDetail struct {
	// 策略id
	Id *int64 `json:"Id,omitnil,omitempty" name:"Id"`

	// 操作uin
	// 注意：此字段可能返回 null，表示取不到有效值。
	Uin *string `json:"Uin,omitnil,omitempty" name:"Uin"`

	// 策略名称
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// 策略备注
	// 注意：此字段可能返回 null，表示取不到有效值。
	Description *string `json:"Description,omitnil,omitempty" name:"Description"`

	// 开启状态：0关闭，1开启
	Status *uint64 `json:"Status,omitnil,omitempty" name:"Status"`

	// 是否对所有主机生效
	IsAll *uint64 `json:"IsAll,omitnil,omitempty" name:"IsAll"`

	// 包含目录，用;分隔
	// 注意：此字段可能返回 null，表示取不到有效值。
	IncludeDir *string `json:"IncludeDir,omitnil,omitempty" name:"IncludeDir"`

	// 包含目录，用;分隔
	// 注意：此字段可能返回 null，表示取不到有效值。
	ExcludeDir *string `json:"ExcludeDir,omitnil,omitempty" name:"ExcludeDir"`

	// 备份模式： 0按周，1按天
	// 注意：此字段可能返回 null，表示取不到有效值。
	BackupType *uint64 `json:"BackupType,omitnil,omitempty" name:"BackupType"`

	// 备份星期天数（1-7）：1;2;3;4
	// 注意：此字段可能返回 null，表示取不到有效值。
	Weekday *string `json:"Weekday,omitnil,omitempty" name:"Weekday"`

	// 备份执行时间点(0-23): 11:00;12:00
	Hour *string `json:"Hour,omitnil,omitempty" name:"Hour"`

	// 保存天数，0永久保存
	SaveDay *uint64 `json:"SaveDay,omitnil,omitempty" name:"SaveDay"`

	// 创建时间
	// 注意：此字段可能返回 null，表示取不到有效值。
	CreateTime *string `json:"CreateTime,omitnil,omitempty" name:"CreateTime"`

	// 最近修改时间
	// 注意：此字段可能返回 null，表示取不到有效值。
	ModifyTime *string `json:"ModifyTime,omitnil,omitempty" name:"ModifyTime"`

	// 绑定机器数
	// 注意：此字段可能返回 null，表示取不到有效值。
	MachineCount *uint64 `json:"MachineCount,omitnil,omitempty" name:"MachineCount"`

	// 策略关联事件数
	// 注意：此字段可能返回 null，表示取不到有效值。
	EventCount *uint64 `json:"EventCount,omitnil,omitempty" name:"EventCount"`
}

type RansomDefenseStrategyMachineBackupInfo struct {
	// 主机Uuid
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 主机Quuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 主机名称
	MachineName *string `json:"MachineName,omitnil,omitempty" name:"MachineName"`

	// 主机实例id
	InstanceId *string `json:"InstanceId,omitnil,omitempty" name:"InstanceId"`

	// 内网ip
	MachineIp *string `json:"MachineIp,omitnil,omitempty" name:"MachineIp"`

	// 外网ip
	// 注意：此字段可能返回 null，表示取不到有效值。
	MachineWanIp *string `json:"MachineWanIp,omitnil,omitempty" name:"MachineWanIp"`

	// 云标签
	// 注意：此字段可能返回 null，表示取不到有效值。
	CloudTags []*Tag `json:"CloudTags,omitnil,omitempty" name:"CloudTags"`

	// 可用区信息
	// 注意：此字段可能返回 null，表示取不到有效值。
	RegionInfo *RegionInfo `json:"RegionInfo,omitnil,omitempty" name:"RegionInfo"`

	// 主机安全标签
	// 注意：此字段可能返回 null，表示取不到有效值。
	Tag []*MachineTag `json:"Tag,omitnil,omitempty" name:"Tag"`

	// 防护状态：0关闭，1开启
	// 注意：此字段可能返回 null，表示取不到有效值。
	Status *uint64 `json:"Status,omitnil,omitempty" name:"Status"`

	// 策略id，为0时未绑定策略
	// 注意：此字段可能返回 null，表示取不到有效值。
	StrategyId *uint64 `json:"StrategyId,omitnil,omitempty" name:"StrategyId"`

	// 硬盘信息，为空时所有硬盘生效：
	// ;分割 diskId1|diskName1;diskId2|diskName2
	// 注意：此字段可能返回 null，表示取不到有效值。
	DiskInfo *string `json:"DiskInfo,omitnil,omitempty" name:"DiskInfo"`

	// 策略名称
	// 注意：此字段可能返回 null，表示取不到有效值。
	StrategyName *string `json:"StrategyName,omitnil,omitempty" name:"StrategyName"`

	// 备份数量
	// 注意：此字段可能返回 null，表示取不到有效值。
	BackupCount *uint64 `json:"BackupCount,omitnil,omitempty" name:"BackupCount"`

	// 最近一次备份状态：0备份中，1正常，2失败，9暂无备份
	// 注意：此字段可能返回 null，表示取不到有效值。
	LastBackupStatus *uint64 `json:"LastBackupStatus,omitnil,omitempty" name:"LastBackupStatus"`

	// 最近一次备份失败原因
	// 注意：此字段可能返回 null，表示取不到有效值。
	LastBackupMessage *string `json:"LastBackupMessage,omitnil,omitempty" name:"LastBackupMessage"`

	// 最近一次备份时间
	// 注意：此字段可能返回 null，表示取不到有效值。
	LastBackupTime *string `json:"LastBackupTime,omitnil,omitempty" name:"LastBackupTime"`

	// 最近一次回滚进度百分比
	// 注意：此字段可能返回 null，表示取不到有效值。
	RollBackPercent *uint64 `json:"RollBackPercent,omitnil,omitempty" name:"RollBackPercent"`

	// 最近一次回滚状态：0进行中，1成功，2失败
	// 注意：此字段可能返回 null，表示取不到有效值。
	RollBackStatus *uint64 `json:"RollBackStatus,omitnil,omitempty" name:"RollBackStatus"`

	// 备份成功次数
	// 注意：此字段可能返回 null，表示取不到有效值。
	BackupSuccessCount *uint64 `json:"BackupSuccessCount,omitnil,omitempty" name:"BackupSuccessCount"`

	// 版本信息：0-基础版 1-专业版 2-旗舰版 3-普惠版
	// 注意：此字段可能返回 null，表示取不到有效值。
	HostVersion *uint64 `json:"HostVersion,omitnil,omitempty" name:"HostVersion"`
}

type RansomDefenseStrategyMachineDetail struct {
	// 主机Uuid
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 主机Quuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 主机名称
	MachineName *string `json:"MachineName,omitnil,omitempty" name:"MachineName"`

	// 主机实例id
	InstanceId *string `json:"InstanceId,omitnil,omitempty" name:"InstanceId"`

	// 内网ip
	MachineIp *string `json:"MachineIp,omitnil,omitempty" name:"MachineIp"`

	// 外网ip
	// 注意：此字段可能返回 null，表示取不到有效值。
	MachineWanIp *string `json:"MachineWanIp,omitnil,omitempty" name:"MachineWanIp"`

	// 云标签
	// 注意：此字段可能返回 null，表示取不到有效值。
	CloudTags []*Tag `json:"CloudTags,omitnil,omitempty" name:"CloudTags"`

	// 可用区信息
	// 注意：此字段可能返回 null，表示取不到有效值。
	RegionInfo *RegionInfo `json:"RegionInfo,omitnil,omitempty" name:"RegionInfo"`

	// 主机安全标签
	// 注意：此字段可能返回 null，表示取不到有效值。
	Tag []*MachineTag `json:"Tag,omitnil,omitempty" name:"Tag"`

	// 防护状态：0关闭，1开启
	// 注意：此字段可能返回 null，表示取不到有效值。
	Status *uint64 `json:"Status,omitnil,omitempty" name:"Status"`

	// 策略id，为0时未绑定策略
	// 注意：此字段可能返回 null，表示取不到有效值。
	StrategyId *uint64 `json:"StrategyId,omitnil,omitempty" name:"StrategyId"`

	// 硬盘信息，为空时所有硬盘生效：
	// ;分割 diskId1|diskName1;diskId2|diskName2
	// 注意：此字段可能返回 null，表示取不到有效值。
	DiskInfo *string `json:"DiskInfo,omitnil,omitempty" name:"DiskInfo"`

	// 版本信息：0-基础版 1-专业版 2-旗舰版 3-普惠版
	// 注意：此字段可能返回 null，表示取不到有效值。
	HostVersion *uint64 `json:"HostVersion,omitnil,omitempty" name:"HostVersion"`

	// 策略名称
	// 注意：此字段可能返回 null，表示取不到有效值。
	StrategyName *string `json:"StrategyName,omitnil,omitempty" name:"StrategyName"`
}

type RansomDefenseStrategyMachineInfo struct {
	// 主机uuid
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 指定硬盘列表，为空时表示所有硬盘：disk_id1|disk_name1;disk_id2|disk_name2
	// 注意：此字段可能返回 null，表示取不到有效值。
	DiskInfo *string `json:"DiskInfo,omitnil,omitempty" name:"DiskInfo"`
}

type RecordInfo struct {
	// 主机ip
	HostIP *string `json:"HostIP,omitnil,omitempty" name:"HostIP"`

	// 主机实例id
	InstanceID *string `json:"InstanceID,omitnil,omitempty" name:"InstanceID"`

	// 客户端离线时间
	OfflineTime *string `json:"OfflineTime,omitnil,omitempty" name:"OfflineTime"`

	// 客户端卸载时间
	UninstallTime *string `json:"UninstallTime,omitnil,omitempty" name:"UninstallTime"`

	// 客户端卸载调用链
	UninstallCmd *string `json:"UninstallCmd,omitnil,omitempty" name:"UninstallCmd"`

	// 客户端uuid
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`
}

// Predefined struct for user
type RecoverMalwaresRequestParams struct {
	// 木马Id数组（最大100条）
	Ids []*uint64 `json:"Ids,omitnil,omitempty" name:"Ids"`
}

type RecoverMalwaresRequest struct {
	*tchttp.BaseRequest
	
	// 木马Id数组（最大100条）
	Ids []*uint64 `json:"Ids,omitnil,omitempty" name:"Ids"`
}

func (r *RecoverMalwaresRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *RecoverMalwaresRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Ids")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "RecoverMalwaresRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type RecoverMalwaresResponseParams struct {
	// 恢复成功id数组，若无则返回空数组
	SuccessIds []*uint64 `json:"SuccessIds,omitnil,omitempty" name:"SuccessIds"`

	// 恢复失败id数组，若无则返回空数组
	FailedIds []*uint64 `json:"FailedIds,omitnil,omitempty" name:"FailedIds"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type RecoverMalwaresResponse struct {
	*tchttp.BaseResponse
	Response *RecoverMalwaresResponseParams `json:"Response"`
}

func (r *RecoverMalwaresResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *RecoverMalwaresResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type RegionInfo struct {
	// 地域标志，如 ap-guangzhou，ap-shanghai，ap-beijing
	Region *string `json:"Region,omitnil,omitempty" name:"Region"`

	// 地域中文名，如华南地区（广州），华东地区（上海金融），华北地区（北京）
	RegionName *string `json:"RegionName,omitnil,omitempty" name:"RegionName"`

	// 地域ID
	RegionId *uint64 `json:"RegionId,omitnil,omitempty" name:"RegionId"`

	// 地域代码，如 gz，sh，bj
	RegionCode *string `json:"RegionCode,omitnil,omitempty" name:"RegionCode"`

	// 地域英文名
	RegionNameEn *string `json:"RegionNameEn,omitnil,omitempty" name:"RegionNameEn"`
}

type RegionListDetail struct {
	// 机器类型
	// CVM 腾讯云云服务器
	// LH 腾讯云轻量服务器
	// ECM 腾讯云边缘计算服务器
	// BM 腾讯云黑石1.0 服务器
	// Other  其他服务器(非腾讯云)
	// 注意：此字段可能返回 null，表示取不到有效值。
	MachineType *string `json:"MachineType,omitnil,omitempty" name:"MachineType"`

	// 0 腾讯云
	// 1 IDC机房
	// 2 阿里云
	// 3 华为云
	// 4 亚马逊
	// 5 微软
	// 6 Google
	// 7 Oracle
	// 8 Digital Ocean
	// 注意：此字段可能返回 null，表示取不到有效值。
	CloudFrom *uint64 `json:"CloudFrom,omitnil,omitempty" name:"CloudFrom"`

	// 地域列表
	// 注意：此字段可能返回 null，表示取不到有效值。
	RegionList []*RegionInfo `json:"RegionList,omitnil,omitempty" name:"RegionList"`
}

type RegionSet struct {
	// 地域名称
	RegionName *string `json:"RegionName,omitnil,omitempty" name:"RegionName"`

	// 可用区信息
	ZoneSet []*ZoneInfo `json:"ZoneSet,omitnil,omitempty" name:"ZoneSet"`
}

// Predefined struct for user
type RemoveLocalStorageItemRequestParams struct {
	// 键
	Key *string `json:"Key,omitnil,omitempty" name:"Key"`
}

type RemoveLocalStorageItemRequest struct {
	*tchttp.BaseRequest
	
	// 键
	Key *string `json:"Key,omitnil,omitempty" name:"Key"`
}

func (r *RemoveLocalStorageItemRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *RemoveLocalStorageItemRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Key")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "RemoveLocalStorageItemRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type RemoveLocalStorageItemResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type RemoveLocalStorageItemResponse struct {
	*tchttp.BaseResponse
	Response *RemoveLocalStorageItemResponseParams `json:"Response"`
}

func (r *RemoveLocalStorageItemResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *RemoveLocalStorageItemResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type RemoveMachineRequestParams struct {
	// 主机Uuid
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 主机Quuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`
}

type RemoveMachineRequest struct {
	*tchttp.BaseRequest
	
	// 主机Uuid
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 主机Quuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`
}

func (r *RemoveMachineRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *RemoveMachineRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Uuid")
	delete(f, "Quuid")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "RemoveMachineRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type RemoveMachineResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type RemoveMachineResponse struct {
	*tchttp.BaseResponse
	Response *RemoveMachineResponseParams `json:"Response"`
}

func (r *RemoveMachineResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *RemoveMachineResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type RetryCreateSnapshotRequestParams struct {
	// 修复任务id
	FixId *uint64 `json:"FixId,omitnil,omitempty" name:"FixId"`

	// 主机quuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 任务进度返回的快照唯一Id
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`
}

type RetryCreateSnapshotRequest struct {
	*tchttp.BaseRequest
	
	// 修复任务id
	FixId *uint64 `json:"FixId,omitnil,omitempty" name:"FixId"`

	// 主机quuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 任务进度返回的快照唯一Id
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`
}

func (r *RetryCreateSnapshotRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *RetryCreateSnapshotRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "FixId")
	delete(f, "Quuid")
	delete(f, "Id")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "RetryCreateSnapshotRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type RetryCreateSnapshotResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type RetryCreateSnapshotResponse struct {
	*tchttp.BaseResponse
	Response *RetryCreateSnapshotResponseParams `json:"Response"`
}

func (r *RetryCreateSnapshotResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *RetryCreateSnapshotResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type RetryVulFixRequestParams struct {
	// 漏洞id
	FixId *uint64 `json:"FixId,omitnil,omitempty" name:"FixId"`

	// 主机Quuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 漏洞id
	VulId *uint64 `json:"VulId,omitnil,omitempty" name:"VulId"`
}

type RetryVulFixRequest struct {
	*tchttp.BaseRequest
	
	// 漏洞id
	FixId *uint64 `json:"FixId,omitnil,omitempty" name:"FixId"`

	// 主机Quuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 漏洞id
	VulId *uint64 `json:"VulId,omitnil,omitempty" name:"VulId"`
}

func (r *RetryVulFixRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *RetryVulFixRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "FixId")
	delete(f, "Quuid")
	delete(f, "VulId")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "RetryVulFixRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type RetryVulFixResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type RetryVulFixResponse struct {
	*tchttp.BaseResponse
	Response *RetryVulFixResponseParams `json:"Response"`
}

func (r *RetryVulFixResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *RetryVulFixResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ReverseShell struct {
	// ID 主键
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`

	// 主机安全UUID
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 主机ID
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 主机内网IP
	Hostip *string `json:"Hostip,omitnil,omitempty" name:"Hostip"`

	// 目标IP
	DstIp *string `json:"DstIp,omitnil,omitempty" name:"DstIp"`

	// 目标端口
	DstPort *uint64 `json:"DstPort,omitnil,omitempty" name:"DstPort"`

	// 进程名
	ProcessName *string `json:"ProcessName,omitnil,omitempty" name:"ProcessName"`

	// 进程路径
	FullPath *string `json:"FullPath,omitnil,omitempty" name:"FullPath"`

	// 命令详情
	CmdLine *string `json:"CmdLine,omitnil,omitempty" name:"CmdLine"`

	// 执行用户
	UserName *string `json:"UserName,omitnil,omitempty" name:"UserName"`

	// 执行用户组
	UserGroup *string `json:"UserGroup,omitnil,omitempty" name:"UserGroup"`

	// 父进程名
	ParentProcName *string `json:"ParentProcName,omitnil,omitempty" name:"ParentProcName"`

	// 父进程用户
	ParentProcUser *string `json:"ParentProcUser,omitnil,omitempty" name:"ParentProcUser"`

	// 父进程用户组
	ParentProcGroup *string `json:"ParentProcGroup,omitnil,omitempty" name:"ParentProcGroup"`

	// 父进程路径
	ParentProcPath *string `json:"ParentProcPath,omitnil,omitempty" name:"ParentProcPath"`

	// 处理状态：0-待处理 2-白名单 3-已处理 4-已忽略 6-已拦截
	Status *uint64 `json:"Status,omitnil,omitempty" name:"Status"`

	// 产生时间
	CreateTime *string `json:"CreateTime,omitnil,omitempty" name:"CreateTime"`

	// 主机名
	MachineName *string `json:"MachineName,omitnil,omitempty" name:"MachineName"`

	// 进程树
	ProcTree *string `json:"ProcTree,omitnil,omitempty" name:"ProcTree"`

	// 检测方法: 0行为分析; 1命令特征检测
	DetectBy *uint64 `json:"DetectBy,omitnil,omitempty" name:"DetectBy"`

	//  主机额外信息
	// 注意：此字段可能返回 null，表示取不到有效值。
	MachineExtraInfo *MachineExtraInfo `json:"MachineExtraInfo,omitnil,omitempty" name:"MachineExtraInfo"`

	// 进程id
	// 注意：此字段可能返回 null，表示取不到有效值。
	Pid *int64 `json:"Pid,omitnil,omitempty" name:"Pid"`

	// 威胁等级：0中危，1高危
	// 注意：此字段可能返回 null，表示取不到有效值。
	RiskLevel *uint64 `json:"RiskLevel,omitnil,omitempty" name:"RiskLevel"`
}

type ReverseShellEventInfo struct {
	// ID 主键
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`

	// 云镜UUID
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 主机ID
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 主机内网IP
	HostIp *string `json:"HostIp,omitnil,omitempty" name:"HostIp"`

	// 目标IP
	DstIp *string `json:"DstIp,omitnil,omitempty" name:"DstIp"`

	// 目标端口
	DstPort *uint64 `json:"DstPort,omitnil,omitempty" name:"DstPort"`

	// 进程名
	ProcessName *string `json:"ProcessName,omitnil,omitempty" name:"ProcessName"`

	// 进程路径
	FullPath *string `json:"FullPath,omitnil,omitempty" name:"FullPath"`

	// 命令详情
	CmdLine *string `json:"CmdLine,omitnil,omitempty" name:"CmdLine"`

	// 执行用户
	UserName *string `json:"UserName,omitnil,omitempty" name:"UserName"`

	// 执行用户组
	UserGroup *string `json:"UserGroup,omitnil,omitempty" name:"UserGroup"`

	// 父进程名
	ParentProcName *string `json:"ParentProcName,omitnil,omitempty" name:"ParentProcName"`

	// 父进程用户
	ParentProcUser *string `json:"ParentProcUser,omitnil,omitempty" name:"ParentProcUser"`

	// 父进程用户组
	ParentProcGroup *string `json:"ParentProcGroup,omitnil,omitempty" name:"ParentProcGroup"`

	// 父进程路径
	ParentProcPath *string `json:"ParentProcPath,omitnil,omitempty" name:"ParentProcPath"`

	// 处理状态：0-待处理 2-白名单 3-已处理 4-已忽略
	Status *uint64 `json:"Status,omitnil,omitempty" name:"Status"`

	// 产生时间
	CreateTime *string `json:"CreateTime,omitnil,omitempty" name:"CreateTime"`

	// 主机名
	MachineName *string `json:"MachineName,omitnil,omitempty" name:"MachineName"`

	// 检测方法
	DetectBy *uint64 `json:"DetectBy,omitnil,omitempty" name:"DetectBy"`

	// 进程树 json  pid:进程id，exe:文件路径 ，account:进程所属用组和用户 ,cmdline:执行命令，ssh_service: SSH服务ip, ssh_soure:登录源
	// 注意：此字段可能返回 null，表示取不到有效值。
	PsTree *string `json:"PsTree,omitnil,omitempty" name:"PsTree"`

	// 建议方案
	SuggestScheme *string `json:"SuggestScheme,omitnil,omitempty" name:"SuggestScheme"`

	// 描述
	HarmDescribe *string `json:"HarmDescribe,omitnil,omitempty" name:"HarmDescribe"`

	// 标签
	Tags []*string `json:"Tags,omitnil,omitempty" name:"Tags"`

	// 参考链接
	References []*string `json:"References,omitnil,omitempty" name:"References"`

	// 主机外网ip
	MachineWanIp *string `json:"MachineWanIp,omitnil,omitempty" name:"MachineWanIp"`

	// 主机在线状态 OFFLINE  ONLINE
	MachineStatus *string `json:"MachineStatus,omitnil,omitempty" name:"MachineStatus"`

	// 处理时间
	ModifyTime *string `json:"ModifyTime,omitnil,omitempty" name:"ModifyTime"`
}

type ReverseShellRule struct {
	// 规则ID
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`

	// 客户端ID
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 进程名称
	ProcessName *string `json:"ProcessName,omitnil,omitempty" name:"ProcessName"`

	// 目标IP
	DestIp *string `json:"DestIp,omitnil,omitempty" name:"DestIp"`

	// 目标端口
	DestPort *string `json:"DestPort,omitnil,omitempty" name:"DestPort"`

	// 操作人
	Operator *string `json:"Operator,omitnil,omitempty" name:"Operator"`

	// 是否全局规则
	IsGlobal *uint64 `json:"IsGlobal,omitnil,omitempty" name:"IsGlobal"`

	// 状态 (0: 有效 1: 无效)
	Status *uint64 `json:"Status,omitnil,omitempty" name:"Status"`

	// 创建时间
	CreateTime *string `json:"CreateTime,omitnil,omitempty" name:"CreateTime"`

	// 修改时间
	ModifyTime *string `json:"ModifyTime,omitnil,omitempty" name:"ModifyTime"`

	// 主机IP
	Hostip *string `json:"Hostip,omitnil,omitempty" name:"Hostip"`
}

type RiskDnsEvent struct {
	// 事件Id
	Id *int64 `json:"Id,omitnil,omitempty" name:"Id"`

	// 策略ID
	PolicyId *int64 `json:"PolicyId,omitnil,omitempty" name:"PolicyId"`

	// 命中策略类型[-1:未知|0系统|1:用户]
	PolicyType *int64 `json:"PolicyType,omitnil,omitempty" name:"PolicyType"`

	// 命中策略名称
	PolicyName *string `json:"PolicyName,omitnil,omitempty" name:"PolicyName"`

	// 保护级别[0:基础版|1:专业版|2:旗舰版]
	ProtectLevel *int64 `json:"ProtectLevel,omitnil,omitempty" name:"ProtectLevel"`

	// 主机ID
	HostId *string `json:"HostId,omitnil,omitempty" name:"HostId"`

	// 主机名称
	HostName *string `json:"HostName,omitnil,omitempty" name:"HostName"`

	// 主机IP
	HostIp *string `json:"HostIp,omitnil,omitempty" name:"HostIp"`

	// 外网IP
	WanIp *string `json:"WanIp,omitnil,omitempty" name:"WanIp"`

	// 客户端ID
	AgentId *string `json:"AgentId,omitnil,omitempty" name:"AgentId"`

	// 访问域名
	Domain *string `json:"Domain,omitnil,omitempty" name:"Domain"`

	// 标签特性
	Tags []*string `json:"Tags,omitnil,omitempty" name:"Tags"`

	// 访问次数
	AccessCount *int64 `json:"AccessCount,omitnil,omitempty" name:"AccessCount"`

	// 威胁描述
	ThreatDesc *string `json:"ThreatDesc,omitnil,omitempty" name:"ThreatDesc"`

	// 修复方案
	SuggestSolution *string `json:"SuggestSolution,omitnil,omitempty" name:"SuggestSolution"`

	// 参考链接
	ReferenceLink *string `json:"ReferenceLink,omitnil,omitempty" name:"ReferenceLink"`

	// 处理状态；[0:待处理|2:已加白|3:非信任状态|4:已处理|5:已忽略]
	HandleStatus *int64 `json:"HandleStatus,omitnil,omitempty" name:"HandleStatus"`

	// 进程ID
	Pid *int64 `json:"Pid,omitnil,omitempty" name:"Pid"`

	// 进程名
	ProcessName *string `json:"ProcessName,omitnil,omitempty" name:"ProcessName"`

	// 进程MD5
	ProcessMd5 *string `json:"ProcessMd5,omitnil,omitempty" name:"ProcessMd5"`

	// 命令行
	CmdLine *string `json:"CmdLine,omitnil,omitempty" name:"CmdLine"`

	// 首次访问时间
	FirstTime *string `json:"FirstTime,omitnil,omitempty" name:"FirstTime"`

	// 最近访问时间
	LastTime *string `json:"LastTime,omitnil,omitempty" name:"LastTime"`

	// 主机在线状态[OFFLINE:离线|ONLINE:在线|UNKNOWN:未知]
	HostStatus *string `json:"HostStatus,omitnil,omitempty" name:"HostStatus"`

	// 附加信息
	// 注意：此字段可能返回 null，表示取不到有效值。
	MachineExtraInfo *MachineExtraInfo `json:"MachineExtraInfo,omitnil,omitempty" name:"MachineExtraInfo"`

	// [1:CentOS|2:Debian|3:Gentoo|4:Redhat|5:Ubuntu|6:Windows|7:TencentOS|8:CoreOS|9:FreeBSD|10:SUSE]
	OsType *int64 `json:"OsType,omitnil,omitempty" name:"OsType"`
}

type RiskDnsList struct {
	// 对外访问域名
	Url *string `json:"Url,omitnil,omitempty" name:"Url"`

	// 访问次数
	AccessCount *uint64 `json:"AccessCount,omitnil,omitempty" name:"AccessCount"`

	// 进程名
	ProcessName *string `json:"ProcessName,omitnil,omitempty" name:"ProcessName"`

	// 进程MD5
	ProcessMd5 *string `json:"ProcessMd5,omitnil,omitempty" name:"ProcessMd5"`

	// 是否为全局规则，0否，1是
	GlobalRuleId *uint64 `json:"GlobalRuleId,omitnil,omitempty" name:"GlobalRuleId"`

	// 用户规则id
	UserRuleId *uint64 `json:"UserRuleId,omitnil,omitempty" name:"UserRuleId"`

	// 状态；0-待处理，2-已加白，3-非信任状态，4-已处理，5-已忽略
	Status *uint64 `json:"Status,omitnil,omitempty" name:"Status"`

	// 首次访问时间
	CreateTime *string `json:"CreateTime,omitnil,omitempty" name:"CreateTime"`

	// 最近访问时间
	MergeTime *string `json:"MergeTime,omitnil,omitempty" name:"MergeTime"`

	// 唯一 Quuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 主机ip
	HostIp *string `json:"HostIp,omitnil,omitempty" name:"HostIp"`

	// 别名
	Alias *string `json:"Alias,omitnil,omitempty" name:"Alias"`

	// 描述
	Description *string `json:"Description,omitnil,omitempty" name:"Description"`

	// 唯一ID
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`

	// 参考
	Reference *string `json:"Reference,omitnil,omitempty" name:"Reference"`

	// 命令行
	CmdLine *string `json:"CmdLine,omitnil,omitempty" name:"CmdLine"`

	// 进程号
	Pid *uint64 `json:"Pid,omitnil,omitempty" name:"Pid"`

	// 唯一UUID
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 建议方案
	SuggestScheme *string `json:"SuggestScheme,omitnil,omitempty" name:"SuggestScheme"`

	// 标签特性
	Tags []*string `json:"Tags,omitnil,omitempty" name:"Tags"`

	// 外网ip
	// 注意：此字段可能返回 null，表示取不到有效值。
	MachineWanIp *string `json:"MachineWanIp,omitnil,omitempty" name:"MachineWanIp"`

	// 主机在线状态[OFFLINE:离线|ONLINE:在线|UNKNOWN:未知]
	// 注意：此字段可能返回 null，表示取不到有效值。
	MachineStatus *string `json:"MachineStatus,omitnil,omitempty" name:"MachineStatus"`
}

type RiskDnsPolicy struct {
	// 策略名称
	PolicyName *string `json:"PolicyName,omitnil,omitempty" name:"PolicyName"`

	// 策略类型[0:系统,1:用户]
	PolicyType *int64 `json:"PolicyType,omitnil,omitempty" name:"PolicyType"`

	// 策略动作[0:告警,1:放行,2:拦截+告警]
	PolicyAction *int64 `json:"PolicyAction,omitnil,omitempty" name:"PolicyAction"`

	// 主机范围[1: 所有专业版+旗舰版|2:所有旗舰版|0: 部分主机]
	HostScope *int64 `json:"HostScope,omitnil,omitempty" name:"HostScope"`

	// 主机ID
	HostIds []*string `json:"HostIds,omitnil,omitempty" name:"HostIds"`

	// 域名,作为入参时需要进行base64 encode
	Domains []*string `json:"Domains,omitnil,omitempty" name:"Domains"`

	// 是否生效[0:生效,1:不生效]
	IsEnabled *int64 `json:"IsEnabled,omitnil,omitempty" name:"IsEnabled"`

	// 策略ID
	PolicyId *int64 `json:"PolicyId,omitnil,omitempty" name:"PolicyId"`

	// 策略描述
	PolicyDesc *string `json:"PolicyDesc,omitnil,omitempty" name:"PolicyDesc"`

	// 是否处理之前的事件[0:不处理|1:处理]
	IsDealOldEvent *int64 `json:"IsDealOldEvent,omitnil,omitempty" name:"IsDealOldEvent"`

	// 更新时间
	UpdateTime *string `json:"UpdateTime,omitnil,omitempty" name:"UpdateTime"`

	// 事件ID
	EventId *int64 `json:"EventId,omitnil,omitempty" name:"EventId"`
}

type RiskProcessEvent struct {
	// 事件ID
	EventId *int64 `json:"EventId,omitnil,omitempty" name:"EventId"`

	// 主机名称
	HostName *string `json:"HostName,omitnil,omitempty" name:"HostName"`

	// 主机IP
	HostIp *string `json:"HostIp,omitnil,omitempty" name:"HostIp"`

	// 外网IP
	WanIp *string `json:"WanIp,omitnil,omitempty" name:"WanIp"`

	// 进程ID
	ProcessId *int64 `json:"ProcessId,omitnil,omitempty" name:"ProcessId"`

	// 文件路径
	FilePath *string `json:"FilePath,omitnil,omitempty" name:"FilePath"`

	// 执行命令
	CmdLine *string `json:"CmdLine,omitnil,omitempty" name:"CmdLine"`

	// 进程启动时间
	StartTime *string `json:"StartTime,omitnil,omitempty" name:"StartTime"`

	// 最近检测时间
	DetectTime *string `json:"DetectTime,omitnil,omitempty" name:"DetectTime"`

	// 病毒名称
	VirusName *string `json:"VirusName,omitnil,omitempty" name:"VirusName"`

	// 木马检测平台 [1:云查杀引擎|2:TAV|3:binaryAi|4:异常行为|5:威胁情报]
	CheckPlatform []*string `json:"CheckPlatform,omitnil,omitempty" name:"CheckPlatform"`

	// 病毒标签
	VirusTags []*string `json:"VirusTags,omitnil,omitempty" name:"VirusTags"`

	// 威胁描述
	ThreatDesc *string `json:"ThreatDesc,omitnil,omitempty" name:"ThreatDesc"`

	// 建议方案
	SuggestSolution *string `json:"SuggestSolution,omitnil,omitempty" name:"SuggestSolution"`

	// 参考链接
	ReferenceLink *string `json:"ReferenceLink,omitnil,omitempty" name:"ReferenceLink"`

	// 处理状态[0待处理;1已处理;2查杀中;3已查杀;4已退出;5忽略]
	HandleStatus *int64 `json:"HandleStatus,omitnil,omitempty" name:"HandleStatus"`

	// 主机在线状态
	OnlineStatus *int64 `json:"OnlineStatus,omitnil,omitempty" name:"OnlineStatus"`

	// 附加信息
	// 注意：此字段可能返回 null，表示取不到有效值。
	MachineExtraInfo *MachineExtraInfo `json:"MachineExtraInfo,omitnil,omitempty" name:"MachineExtraInfo"`

	// 主机uuid
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`
}

type RuleInfo struct {
	// 全文索引的相关配置
	FullText *FullTextInfo `json:"FullText,omitnil,omitempty" name:"FullText"`

	// 键值索引的相关配置
	KeyValue *KeyValueInfo `json:"KeyValue,omitnil,omitempty" name:"KeyValue"`

	// 元字段索引配置
	Tag *KeyValueInfo `json:"Tag,omitnil,omitempty" name:"Tag"`
}

// Predefined struct for user
type ScanAssetRequestParams struct {
	// 资产指纹类型id列表
	AssetTypeIds []*uint64 `json:"AssetTypeIds,omitnil,omitempty" name:"AssetTypeIds"`

	// Quuid列表
	Quuids []*string `json:"Quuids,omitnil,omitempty" name:"Quuids"`
}

type ScanAssetRequest struct {
	*tchttp.BaseRequest
	
	// 资产指纹类型id列表
	AssetTypeIds []*uint64 `json:"AssetTypeIds,omitnil,omitempty" name:"AssetTypeIds"`

	// Quuid列表
	Quuids []*string `json:"Quuids,omitnil,omitempty" name:"Quuids"`
}

func (r *ScanAssetRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ScanAssetRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "AssetTypeIds")
	delete(f, "Quuids")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ScanAssetRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ScanAssetResponseParams struct {
	// 任务id
	// 注意：此字段可能返回 null，表示取不到有效值。
	TaskId *uint64 `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ScanAssetResponse struct {
	*tchttp.BaseResponse
	Response *ScanAssetResponseParams `json:"Response"`
}

func (r *ScanAssetResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ScanAssetResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ScanBaselineRequestParams struct {
	// 策略id数组(StrategyIdList与CategoryIdList和RuleIdList三选一)
	StrategyIdList []*uint64 `json:"StrategyIdList,omitnil,omitempty" name:"StrategyIdList"`

	// 基线id数组(StrategyIdList与CategoryIdList和RuleIdList三选一)
	CategoryIdList []*uint64 `json:"CategoryIdList,omitnil,omitempty" name:"CategoryIdList"`

	// 检测项id数组(StrategyIdList与CategoryIdList和RuleIdList三选一)
	RuleIdList []*uint64 `json:"RuleIdList,omitnil,omitempty" name:"RuleIdList"`

	// 选择StrategyIdList时，不需要填写，其他情况必填
	QuuidList []*string `json:"QuuidList,omitnil,omitempty" name:"QuuidList"`

	// 主机Uuid数组
	UuidList []*string `json:"UuidList,omitnil,omitempty" name:"UuidList"`
}

type ScanBaselineRequest struct {
	*tchttp.BaseRequest
	
	// 策略id数组(StrategyIdList与CategoryIdList和RuleIdList三选一)
	StrategyIdList []*uint64 `json:"StrategyIdList,omitnil,omitempty" name:"StrategyIdList"`

	// 基线id数组(StrategyIdList与CategoryIdList和RuleIdList三选一)
	CategoryIdList []*uint64 `json:"CategoryIdList,omitnil,omitempty" name:"CategoryIdList"`

	// 检测项id数组(StrategyIdList与CategoryIdList和RuleIdList三选一)
	RuleIdList []*uint64 `json:"RuleIdList,omitnil,omitempty" name:"RuleIdList"`

	// 选择StrategyIdList时，不需要填写，其他情况必填
	QuuidList []*string `json:"QuuidList,omitnil,omitempty" name:"QuuidList"`

	// 主机Uuid数组
	UuidList []*string `json:"UuidList,omitnil,omitempty" name:"UuidList"`
}

func (r *ScanBaselineRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ScanBaselineRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "StrategyIdList")
	delete(f, "CategoryIdList")
	delete(f, "RuleIdList")
	delete(f, "QuuidList")
	delete(f, "UuidList")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ScanBaselineRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ScanBaselineResponseParams struct {
	// 正在扫描中的主机Quuid
	// 注意：此字段可能返回 null，表示取不到有效值。
	ScanningQuuids []*string `json:"ScanningQuuids,omitnil,omitempty" name:"ScanningQuuids"`

	// 任务下发成功返回的TaskId
	// 注意：此字段可能返回 null，表示取不到有效值。
	TaskId *uint64 `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ScanBaselineResponse struct {
	*tchttp.BaseResponse
	Response *ScanBaselineResponseParams `json:"Response"`
}

func (r *ScanBaselineResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ScanBaselineResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ScanTaskAgainRequestParams struct {
	// 模块类型 当前提供 Malware 木马 , Vul 漏洞 , Baseline 基线
	ModuleType *string `json:"ModuleType,omitnil,omitempty" name:"ModuleType"`

	// 任务ID
	TaskId *uint64 `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// 自选服务器时生效，主机quuid的string数组
	QuuidList []*string `json:"QuuidList,omitnil,omitempty" name:"QuuidList"`

	// 扫描超时时长
	TimeoutPeriod *uint64 `json:"TimeoutPeriod,omitnil,omitempty" name:"TimeoutPeriod"`
}

type ScanTaskAgainRequest struct {
	*tchttp.BaseRequest
	
	// 模块类型 当前提供 Malware 木马 , Vul 漏洞 , Baseline 基线
	ModuleType *string `json:"ModuleType,omitnil,omitempty" name:"ModuleType"`

	// 任务ID
	TaskId *uint64 `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// 自选服务器时生效，主机quuid的string数组
	QuuidList []*string `json:"QuuidList,omitnil,omitempty" name:"QuuidList"`

	// 扫描超时时长
	TimeoutPeriod *uint64 `json:"TimeoutPeriod,omitnil,omitempty" name:"TimeoutPeriod"`
}

func (r *ScanTaskAgainRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ScanTaskAgainRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "ModuleType")
	delete(f, "TaskId")
	delete(f, "QuuidList")
	delete(f, "TimeoutPeriod")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ScanTaskAgainRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ScanTaskAgainResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ScanTaskAgainResponse struct {
	*tchttp.BaseResponse
	Response *ScanTaskAgainResponseParams `json:"Response"`
}

func (r *ScanTaskAgainResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ScanTaskAgainResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ScanTaskDetails struct {
	// 服务器IP
	HostIp *string `json:"HostIp,omitnil,omitempty" name:"HostIp"`

	// 服务器名称
	HostName *string `json:"HostName,omitnil,omitempty" name:"HostName"`

	// 操作系统
	OsName *string `json:"OsName,omitnil,omitempty" name:"OsName"`

	// 风险数量
	RiskNum *uint64 `json:"RiskNum,omitnil,omitempty" name:"RiskNum"`

	// 扫描开始时间
	ScanBeginTime *string `json:"ScanBeginTime,omitnil,omitempty" name:"ScanBeginTime"`

	// 扫描结束时间
	ScanEndTime *string `json:"ScanEndTime,omitnil,omitempty" name:"ScanEndTime"`

	// 唯一Uuid
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 唯一Quuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 状态码Scanning、Ok、Fail
	Status *string `json:"Status,omitnil,omitempty" name:"Status"`

	// 描述
	Description *string `json:"Description,omitnil,omitempty" name:"Description"`

	// id唯一
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`

	// 失败类型  3离线、4超时、5失败、8agent版本过低
	FailType *uint64 `json:"FailType,omitnil,omitempty" name:"FailType"`

	// 外网ip
	MachineWanIp *string `json:"MachineWanIp,omitnil,omitempty" name:"MachineWanIp"`

	// 附加信息
	// 注意：此字段可能返回 null，表示取不到有效值。
	MachineExtraInfo *MachineExtraInfo `json:"MachineExtraInfo,omitnil,omitempty" name:"MachineExtraInfo"`
}

// Predefined struct for user
type ScanVulAgainRequestParams struct {
	// 漏洞事件id串，多个用英文逗号分隔
	EventIds *string `json:"EventIds,omitnil,omitempty" name:"EventIds"`

	// 重新检查的机器uuid,多个逗号分隔
	Uuids *string `json:"Uuids,omitnil,omitempty" name:"Uuids"`
}

type ScanVulAgainRequest struct {
	*tchttp.BaseRequest
	
	// 漏洞事件id串，多个用英文逗号分隔
	EventIds *string `json:"EventIds,omitnil,omitempty" name:"EventIds"`

	// 重新检查的机器uuid,多个逗号分隔
	Uuids *string `json:"Uuids,omitnil,omitempty" name:"Uuids"`
}

func (r *ScanVulAgainRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ScanVulAgainRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "EventIds")
	delete(f, "Uuids")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ScanVulAgainRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ScanVulAgainResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ScanVulAgainResponse struct {
	*tchttp.BaseResponse
	Response *ScanVulAgainResponseParams `json:"Response"`
}

func (r *ScanVulAgainResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ScanVulAgainResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ScanVulRequestParams struct {
	// 危害等级：1-低危；2-中危；3-高危；4-严重 (多选英文;分隔)
	VulLevels *string `json:"VulLevels,omitnil,omitempty" name:"VulLevels"`

	// 服务器分类：1:专业版服务器；2:自选服务器
	HostType *uint64 `json:"HostType,omitnil,omitempty" name:"HostType"`

	// 漏洞类型：1: web-cms漏洞 2:应用漏洞  4: Linux软件漏洞 5: Windows系统漏洞 (多选英文;分隔)
	VulCategories *string `json:"VulCategories,omitnil,omitempty" name:"VulCategories"`

	// 自选服务器时生效，主机quuid的string数组
	QuuidList []*string `json:"QuuidList,omitnil,omitempty" name:"QuuidList"`

	// 是否是应急漏洞 0 否 1 是
	VulEmergency *uint64 `json:"VulEmergency,omitnil,omitempty" name:"VulEmergency"`

	// 超时时长 单位秒 默认 3600 秒
	TimeoutPeriod *uint64 `json:"TimeoutPeriod,omitnil,omitempty" name:"TimeoutPeriod"`

	// 需要扫描的漏洞id
	VulIds []*uint64 `json:"VulIds,omitnil,omitempty" name:"VulIds"`

	// 0版本比对，2版本比对+poc
	ScanMethod *uint64 `json:"ScanMethod,omitnil,omitempty" name:"ScanMethod"`
}

type ScanVulRequest struct {
	*tchttp.BaseRequest
	
	// 危害等级：1-低危；2-中危；3-高危；4-严重 (多选英文;分隔)
	VulLevels *string `json:"VulLevels,omitnil,omitempty" name:"VulLevels"`

	// 服务器分类：1:专业版服务器；2:自选服务器
	HostType *uint64 `json:"HostType,omitnil,omitempty" name:"HostType"`

	// 漏洞类型：1: web-cms漏洞 2:应用漏洞  4: Linux软件漏洞 5: Windows系统漏洞 (多选英文;分隔)
	VulCategories *string `json:"VulCategories,omitnil,omitempty" name:"VulCategories"`

	// 自选服务器时生效，主机quuid的string数组
	QuuidList []*string `json:"QuuidList,omitnil,omitempty" name:"QuuidList"`

	// 是否是应急漏洞 0 否 1 是
	VulEmergency *uint64 `json:"VulEmergency,omitnil,omitempty" name:"VulEmergency"`

	// 超时时长 单位秒 默认 3600 秒
	TimeoutPeriod *uint64 `json:"TimeoutPeriod,omitnil,omitempty" name:"TimeoutPeriod"`

	// 需要扫描的漏洞id
	VulIds []*uint64 `json:"VulIds,omitnil,omitempty" name:"VulIds"`

	// 0版本比对，2版本比对+poc
	ScanMethod *uint64 `json:"ScanMethod,omitnil,omitempty" name:"ScanMethod"`
}

func (r *ScanVulRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ScanVulRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "VulLevels")
	delete(f, "HostType")
	delete(f, "VulCategories")
	delete(f, "QuuidList")
	delete(f, "VulEmergency")
	delete(f, "TimeoutPeriod")
	delete(f, "VulIds")
	delete(f, "ScanMethod")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ScanVulRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ScanVulResponseParams struct {
	// 任务id
	// 注意：此字段可能返回 null，表示取不到有效值。
	TaskId *uint64 `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ScanVulResponse struct {
	*tchttp.BaseResponse
	Response *ScanVulResponseParams `json:"Response"`
}

func (r *ScanVulResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ScanVulResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ScanVulSettingRequestParams struct {
	// 定期检测间隔时间（天）
	TimerInterval *uint64 `json:"TimerInterval,omitnil,omitempty" name:"TimerInterval"`

	// 漏洞类型：1: web-cms漏洞 2:应用漏洞  4: Linux软件漏洞 5: Windows系统漏洞, 以数组方式传参[1,2]
	VulCategories []*uint64 `json:"VulCategories,omitnil,omitempty" name:"VulCategories"`

	// 危害等级：1-低危；2-中危；3-高危；4-严重,以数组方式传参[1,2,3]
	VulLevels []*uint64 `json:"VulLevels,omitnil,omitempty" name:"VulLevels"`

	// 定期检测时间，如：02:10:50
	TimerTime *string `json:"TimerTime,omitnil,omitempty" name:"TimerTime"`

	// 是否是应急漏洞 0 否 1 是
	VulEmergency *uint64 `json:"VulEmergency,omitnil,omitempty" name:"VulEmergency"`

	// 扫描开始时间，如：00:00
	StartTime *string `json:"StartTime,omitnil,omitempty" name:"StartTime"`

	// 扫描结束时间，如：08:00
	EndTime *string `json:"EndTime,omitnil,omitempty" name:"EndTime"`

	// 是否开启扫描 1开启 0不开启
	EnableScan *uint64 `json:"EnableScan,omitnil,omitempty" name:"EnableScan"`

	// 为空默认扫描全部专业版、旗舰版、普惠版主机，不为空只扫描选中主机
	Uuids []*string `json:"Uuids,omitnil,omitempty" name:"Uuids"`

	// 0版本比对，2版本比对+poc
	ScanMethod *uint64 `json:"ScanMethod,omitnil,omitempty" name:"ScanMethod"`
}

type ScanVulSettingRequest struct {
	*tchttp.BaseRequest
	
	// 定期检测间隔时间（天）
	TimerInterval *uint64 `json:"TimerInterval,omitnil,omitempty" name:"TimerInterval"`

	// 漏洞类型：1: web-cms漏洞 2:应用漏洞  4: Linux软件漏洞 5: Windows系统漏洞, 以数组方式传参[1,2]
	VulCategories []*uint64 `json:"VulCategories,omitnil,omitempty" name:"VulCategories"`

	// 危害等级：1-低危；2-中危；3-高危；4-严重,以数组方式传参[1,2,3]
	VulLevels []*uint64 `json:"VulLevels,omitnil,omitempty" name:"VulLevels"`

	// 定期检测时间，如：02:10:50
	TimerTime *string `json:"TimerTime,omitnil,omitempty" name:"TimerTime"`

	// 是否是应急漏洞 0 否 1 是
	VulEmergency *uint64 `json:"VulEmergency,omitnil,omitempty" name:"VulEmergency"`

	// 扫描开始时间，如：00:00
	StartTime *string `json:"StartTime,omitnil,omitempty" name:"StartTime"`

	// 扫描结束时间，如：08:00
	EndTime *string `json:"EndTime,omitnil,omitempty" name:"EndTime"`

	// 是否开启扫描 1开启 0不开启
	EnableScan *uint64 `json:"EnableScan,omitnil,omitempty" name:"EnableScan"`

	// 为空默认扫描全部专业版、旗舰版、普惠版主机，不为空只扫描选中主机
	Uuids []*string `json:"Uuids,omitnil,omitempty" name:"Uuids"`

	// 0版本比对，2版本比对+poc
	ScanMethod *uint64 `json:"ScanMethod,omitnil,omitempty" name:"ScanMethod"`
}

func (r *ScanVulSettingRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ScanVulSettingRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "TimerInterval")
	delete(f, "VulCategories")
	delete(f, "VulLevels")
	delete(f, "TimerTime")
	delete(f, "VulEmergency")
	delete(f, "StartTime")
	delete(f, "EndTime")
	delete(f, "EnableScan")
	delete(f, "Uuids")
	delete(f, "ScanMethod")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ScanVulSettingRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ScanVulSettingResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ScanVulSettingResponse struct {
	*tchttp.BaseResponse
	Response *ScanVulSettingResponseParams `json:"Response"`
}

func (r *ScanVulSettingResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ScanVulSettingResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ScreenAttackHotspot struct {
	// 事件名
	EventName *string `json:"EventName,omitnil,omitempty" name:"EventName"`

	// 攻击者IP
	SrcIp *string `json:"SrcIp,omitnil,omitempty" name:"SrcIp"`

	// 受害者IP
	DstIp *string `json:"DstIp,omitnil,omitempty" name:"DstIp"`

	// 地域
	Region *string `json:"Region,omitnil,omitempty" name:"Region"`

	// 时间
	CreatedTime *string `json:"CreatedTime,omitnil,omitempty" name:"CreatedTime"`
}

type ScreenBaselineInfo struct {
	// 基线名
	// 注意：此字段可能返回 null，表示取不到有效值。
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// 危害等级：1-低危；2-中危；3-高危；4-严重
	// 注意：此字段可能返回 null，表示取不到有效值。
	Level *uint64 `json:"Level,omitnil,omitempty" name:"Level"`

	// 基线id
	// 注意：此字段可能返回 null，表示取不到有效值。
	CategoryId *uint64 `json:"CategoryId,omitnil,omitempty" name:"CategoryId"`

	// 最后检测时间
	// 注意：此字段可能返回 null，表示取不到有效值。
	LastScanTime *string `json:"LastScanTime,omitnil,omitempty" name:"LastScanTime"`

	// 基线风险项
	// 注意：此字段可能返回 null，表示取不到有效值。
	BaselineFailCount *uint64 `json:"BaselineFailCount,omitnil,omitempty" name:"BaselineFailCount"`

	// 主机uuid
	// 注意：此字段可能返回 null，表示取不到有效值。
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`
}

type ScreenBroadcasts struct {
	// 播报文章标题
	Title *string `json:"Title,omitnil,omitempty" name:"Title"`

	// 播报文章危险程度  0：无， 1：严重， 2: 高危， 3:中危， 4: 低危
	Level *uint64 `json:"Level,omitnil,omitempty" name:"Level"`

	// 发布时间
	Time *string `json:"Time,omitnil,omitempty" name:"Time"`

	// 文章ID
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`
}

type ScreenDefendAttackLog struct {
	// 日志ID
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`

	// 客户端ID
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 来源IP
	SrcIp *string `json:"SrcIp,omitnil,omitempty" name:"SrcIp"`

	// 来源端口
	SrcPort *uint64 `json:"SrcPort,omitnil,omitempty" name:"SrcPort"`

	// 攻击方式
	HttpMethod *string `json:"HttpMethod,omitnil,omitempty" name:"HttpMethod"`

	// 威胁类型
	VulType *string `json:"VulType,omitnil,omitempty" name:"VulType"`

	// 攻击时间
	CreatedTime *string `json:"CreatedTime,omitnil,omitempty" name:"CreatedTime"`

	// 目标端口
	DstPort *uint64 `json:"DstPort,omitnil,omitempty" name:"DstPort"`

	// 主机 quuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 目标IP
	DstIp *string `json:"DstIp,omitnil,omitempty" name:"DstIp"`
}

type ScreenEmergentMsg struct {
	// 通知标签/标题
	Title *string `json:"Title,omitnil,omitempty" name:"Title"`

	// 通知内容
	Text *string `json:"Text,omitnil,omitempty" name:"Text"`

	// 跳转类型：0=漏洞管理
	Type *uint64 `json:"Type,omitnil,omitempty" name:"Type"`
}

type ScreenEventsCnt struct {
	// 展示内容：待处理风险总数，影响资产总数
	Title *string `json:"Title,omitnil,omitempty" name:"Title"`

	// 事件总数
	Total *uint64 `json:"Total,omitnil,omitempty" name:"Total"`

	// name 具体展示内容类型： 攻击事件, 潜在风险, 失陷资产, 潜在风险资产
	// Value: 事件统计数
	Category []*ScreenNameValue `json:"Category,omitnil,omitempty" name:"Category"`
}

type ScreenInvasion struct {
	// 入侵时间
	CreatedTime *string `json:"CreatedTime,omitnil,omitempty" name:"CreatedTime"`

	// 事件类型：0：文件查杀，1：异常登录， 2：密码破解，3：恶意请求，4：高危命令，5：本地提权， 6：反弹shell
	EventType *uint64 `json:"EventType,omitnil,omitempty" name:"EventType"`

	// 事件数据的json, 每种事件不同，
	// 【文件查杀】病毒名 VirusName、文件名 FileName、文件路径 FilePath、文件大小 FileSize、文件MD5 MD5、首次发现时间 CreateTime、最近检测时间LatestScanTime、危害描述 HarmDescribe、修复建议SuggestScheme
	// 【异常登录】来源IP SrcIp、来源地 Location、登录用户名 UserName、登录时间 LoginTime
	// 【密码破解】来源IP SrcIp、来源地 City,Country、协议 Protocol、登录用户名UserName 、端口 Port、尝试次数 Count、首次攻击时间 CreateTime、最近攻击时间 ModifyTime
	// 【恶意请求】恶意请求域名 Url、进程ProcessName 、MD5 ProcessMd5、PID Pid、请求次数 AccessCount、最近请求时间 MergeTime、危害描述 HarmDescribe、修复建议SuggestScheme
	// 【高危命令】命中规则名 RuleName、规则类别 RuleCategory、命令内容 BashCmd、数据来源 DetectBy、登录用户 User、PID Pid、发生时间 CreateTime 、危害描述 HarmDescribe、修复建议SuggestScheme
	// 【本地提权】提权用户 UserName、父进程 ParentProcName 、父进程所属用户 ParentProcGroup、发现时间 CreateTime、危害描述 HarmDescribe、修复建议SuggestScheme
	// 【反弹shell】连接进程 ProcessName、执行命令CmdLine、父进程ParentProcName、目标主机DstIp、目标端口DstPort、发现时间 CreateTime、危害描述 HarmDescribe、修复建议SuggestScheme
	Content *string `json:"Content,omitnil,omitempty" name:"Content"`

	// 事件统一等级 0：提示，1：低危,  2：中危,  3：高危,  4：严重
	Level *uint64 `json:"Level,omitnil,omitempty" name:"Level"`

	// 等级中文展示
	LevelZh *string `json:"LevelZh,omitnil,omitempty" name:"LevelZh"`

	// 事件id
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`

	// 主机uuid
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`
}

type ScreenMachine struct {
	// 主机名称。
	MachineName *string `json:"MachineName,omitnil,omitempty" name:"MachineName"`

	// 主机系统。
	MachineOs *string `json:"MachineOs,omitnil,omitempty" name:"MachineOs"`

	// 云镜客户端唯一Uuid，若客户端长时间不在线将返回空字符。
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 大屏主机状态 0：未安装agent，1：离线状态，2:离线-风险，3：离线-严重
	// 4：安装设备-正常，5：安装设备-正常 且是专业版或旗舰版，6：安装设备-风险（网络攻击事件>0） ，
	//  7：安装设备-风险（网络攻击事件>0 且是专业版或旗舰版，8：安装设备-严重（入侵检测事件>0），
	// 9：安装设备-严重（入侵检测事件>0）且是专业版或旗舰版
	MachineStatus *uint64 `json:"MachineStatus,omitnil,omitempty" name:"MachineStatus"`

	// CVM或BM机器唯一Uuid。
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 漏洞数。
	VulNum *int64 `json:"VulNum,omitnil,omitempty" name:"VulNum"`

	// 主机IP。
	MachineIp *string `json:"MachineIp,omitnil,omitempty" name:"MachineIp"`

	// 主机外网IP。
	MachineWanIp *string `json:"MachineWanIp,omitnil,omitempty" name:"MachineWanIp"`

	// 基线风险数。
	BaselineNum *int64 `json:"BaselineNum,omitnil,omitempty" name:"BaselineNum"`

	// 网络风险数。
	CyberAttackNum *int64 `json:"CyberAttackNum,omitnil,omitempty" name:"CyberAttackNum"`

	// 风险状态。
	// <li>SAFE：安全</li>
	// <li>RISK：风险</li>
	// <li>UNKNOWN：未知</li>
	SecurityStatus *string `json:"SecurityStatus,omitnil,omitempty" name:"SecurityStatus"`

	// 入侵事件数
	InvasionNum *int64 `json:"InvasionNum,omitnil,omitempty" name:"InvasionNum"`

	// 机器所属专区类型 CVM 云服务器, BM 黑石, ECM 边缘计算, LH 轻量应用服务器 ,Other 混合云专区
	MachineType *string `json:"MachineType,omitnil,omitempty" name:"MachineType"`

	// cpu 负载状态
	CpuLoad *string `json:"CpuLoad,omitnil,omitempty" name:"CpuLoad"`

	// cpu 核数
	CpuSize *float64 `json:"CpuSize,omitnil,omitempty" name:"CpuSize"`

	// 硬盘使用率 %
	DiskLoad *string `json:"DiskLoad,omitnil,omitempty" name:"DiskLoad"`

	// 硬盘容量GB
	DiskSize *float64 `json:"DiskSize,omitnil,omitempty" name:"DiskSize"`

	// 内存负载率%
	MemLoad *string `json:"MemLoad,omitnil,omitempty" name:"MemLoad"`

	// 内存容量 GB
	MemSize *float64 `json:"MemSize,omitnil,omitempty" name:"MemSize"`

	// 内核版本
	CoreVersion *string `json:"CoreVersion,omitnil,omitempty" name:"CoreVersion"`

	// 附加信息
	MachineExtraInfo *MachineExtraInfo `json:"MachineExtraInfo,omitnil,omitempty" name:"MachineExtraInfo"`
}

type ScreenNameValue struct {
	// 统计类型 不同接口对应不同的内容
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// 统计数量
	Value *uint64 `json:"Value,omitnil,omitempty" name:"Value"`
}

type ScreenProtection struct {
	// 类型值：文件查杀，暴力破解，漏洞扫描，基线检测
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// 文件查杀:  0:从未检测过，或0资产付费情况, 1:已检测，存在恶意文件, 2:已检测，未开启隔离防护, 3:已检测且已开启防护且无风险；
	// 暴力破解: 0:未开启防护（0付费资产情况）1:已开启自动阻断；
	// 漏洞扫描: 0:从未检测过，或0资产付费情况, 1:存在漏洞风险, 2:无风险；
	// 基线检测: 0:从未检测过，或0资产付费情况, 1:存在基线风险,2:无风险；
	Status *uint64 `json:"Status,omitnil,omitempty" name:"Status"`
}

type ScreenProtectionCnt struct {
	// cloud：云查杀引擎，detect：检测引擎，defend：攻击防御，threat：威胁情报，analysis：异常分析，ai：AI引擎
	Type *string `json:"Type,omitnil,omitempty" name:"Type"`

	// cloud：云查杀引擎，detect：检测引擎，defend：攻击防御，threat：威胁情报，analysis：异常分析，ai：AI引擎
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// 总数
	Count *uint64 `json:"Count,omitnil,omitempty" name:"Count"`
}

type ScreenRegionInfo struct {
	// 地域标志，如 ap-guangzhou，ap-shanghai，ap-beijing
	Region *string `json:"Region,omitnil,omitempty" name:"Region"`

	// 地域中文名，如华南地区（广州），华东地区（上海金融），华北地区（北京）
	RegionName *string `json:"RegionName,omitnil,omitempty" name:"RegionName"`

	// 地域ID
	RegionId *uint64 `json:"RegionId,omitnil,omitempty" name:"RegionId"`

	// 地域代码，如 gz，sh，bj
	RegionCode *string `json:"RegionCode,omitnil,omitempty" name:"RegionCode"`

	// 地域英文名
	RegionNameEn *string `json:"RegionNameEn,omitnil,omitempty" name:"RegionNameEn"`
}

type ScreenRegionMachines struct {
	// 所有区域
	Region *string `json:"Region,omitnil,omitempty" name:"Region"`

	// 区域中文描述
	RegionName *string `json:"RegionName,omitnil,omitempty" name:"RegionName"`

	// 主机列表
	Machines []*ScreenMachine `json:"Machines,omitnil,omitempty" name:"Machines"`

	// 此区域的主机总数
	TotalCount *uint64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// 风险主机数量
	RiskCnt *uint64 `json:"RiskCnt,omitnil,omitempty" name:"RiskCnt"`

	// 潜在风险主机数
	AttackCnt *uint64 `json:"AttackCnt,omitnil,omitempty" name:"AttackCnt"`

	// 无风险主机数
	SafetyCnt *uint64 `json:"SafetyCnt,omitnil,omitempty" name:"SafetyCnt"`

	// 离线/未安装主机数
	UnAgentOfflineCnt *uint64 `json:"UnAgentOfflineCnt,omitnil,omitempty" name:"UnAgentOfflineCnt"`

	// 省略展示多少主机，等于0时没有省略展示
	IgnoreCnt *uint64 `json:"IgnoreCnt,omitnil,omitempty" name:"IgnoreCnt"`
}

type ScreenTrendsChart struct {
	// X轴 时间
	X *string `json:"X,omitnil,omitempty" name:"X"`

	// Y轴 数值
	Y *uint64 `json:"Y,omitnil,omitempty" name:"Y"`

	// 统计分类类型 值：防御次数，攻击次数
	Type *string `json:"Type,omitnil,omitempty" name:"Type"`
}

type ScreenVulInfo struct {
	// 漏洞事件id
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`

	// 漏洞名
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// 漏洞id
	VulId *uint64 `json:"VulId,omitnil,omitempty" name:"VulId"`

	// 最后检测时间
	LastTime *string `json:"LastTime,omitnil,omitempty" name:"LastTime"`

	// 漏洞等级 1:低 2:中 3:高 4:提示
	Level *uint64 `json:"Level,omitnil,omitempty" name:"Level"`

	// 漏洞类型 1: web-cms漏洞, 2:应用漏洞, 4: Linux软件漏洞, 5: Windows系统漏洞
	// 注意：此字段可能返回 null，表示取不到有效值。
	Category *uint64 `json:"Category,omitnil,omitempty" name:"Category"`

	// 主机UUID
	// 注意：此字段可能返回 null，表示取不到有效值。
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`
}

// Predefined struct for user
type SearchLogRequestParams struct {
	// 要检索分析的日志的起始时间，Unix时间戳（毫秒）
	StartTime *int64 `json:"StartTime,omitnil,omitempty" name:"StartTime"`

	// 要检索分析的日志的结束时间，Unix时间戳（毫秒）
	EndTime *int64 `json:"EndTime,omitnil,omitempty" name:"EndTime"`

	// 检索分析语句，最大长度为12KB
	QueryString *string `json:"QueryString,omitnil,omitempty" name:"QueryString"`

	// 表示单次查询返回的原始日志条数，最大值为1000，获取后续日志需使用Context参数
	Count *int64 `json:"Count,omitnil,omitempty" name:"Count"`

	// 原始日志是否按时间排序返回；可选值：asc(升序)、desc(降序)，默认为 desc
	Sort *string `json:"Sort,omitnil,omitempty" name:"Sort"`

	// 透传上次接口返回的Context值，可获取后续更多日志，总计最多可获取1万条原始日志，过期时间1小时
	Context *string `json:"Context,omitnil,omitempty" name:"Context"`
}

type SearchLogRequest struct {
	*tchttp.BaseRequest
	
	// 要检索分析的日志的起始时间，Unix时间戳（毫秒）
	StartTime *int64 `json:"StartTime,omitnil,omitempty" name:"StartTime"`

	// 要检索分析的日志的结束时间，Unix时间戳（毫秒）
	EndTime *int64 `json:"EndTime,omitnil,omitempty" name:"EndTime"`

	// 检索分析语句，最大长度为12KB
	QueryString *string `json:"QueryString,omitnil,omitempty" name:"QueryString"`

	// 表示单次查询返回的原始日志条数，最大值为1000，获取后续日志需使用Context参数
	Count *int64 `json:"Count,omitnil,omitempty" name:"Count"`

	// 原始日志是否按时间排序返回；可选值：asc(升序)、desc(降序)，默认为 desc
	Sort *string `json:"Sort,omitnil,omitempty" name:"Sort"`

	// 透传上次接口返回的Context值，可获取后续更多日志，总计最多可获取1万条原始日志，过期时间1小时
	Context *string `json:"Context,omitnil,omitempty" name:"Context"`
}

func (r *SearchLogRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *SearchLogRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "StartTime")
	delete(f, "EndTime")
	delete(f, "QueryString")
	delete(f, "Count")
	delete(f, "Sort")
	delete(f, "Context")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "SearchLogRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type SearchLogResponseParams struct {
	// 匹配检索条件的原始日志的数量
	Count *int64 `json:"Count,omitnil,omitempty" name:"Count"`

	// 透传本次接口返回的Context值，可获取后续更多日志，过期时间1小时
	Context *string `json:"Context,omitnil,omitempty" name:"Context"`

	// 符合检索条件的日志是否已全部返回，如未全部返回可使用Context参数获取后续更多日志
	ListOver *bool `json:"ListOver,omitnil,omitempty" name:"ListOver"`

	// 返回的是否为统计分析（即SQL）结果
	Analysis *bool `json:"Analysis,omitnil,omitempty" name:"Analysis"`

	// 匹配检索条件的原始日志
	Data []*LogInfo `json:"Data,omitnil,omitempty" name:"Data"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type SearchLogResponse struct {
	*tchttp.BaseResponse
	Response *SearchLogResponseParams `json:"Response"`
}

func (r *SearchLogResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *SearchLogResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type SearchTemplate struct {
	// 检索名称
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// 检索索引类型
	LogType *string `json:"LogType,omitnil,omitempty" name:"LogType"`

	// 检索语句
	Condition *string `json:"Condition,omitnil,omitempty" name:"Condition"`

	// 时间范围
	TimeRange *string `json:"TimeRange,omitnil,omitempty" name:"TimeRange"`

	// 转换的检索语句内容
	Query *string `json:"Query,omitnil,omitempty" name:"Query"`

	// 检索方式。输入框检索：standard,过滤，检索：simple
	Flag *string `json:"Flag,omitnil,omitempty" name:"Flag"`

	// 展示数据
	DisplayData *string `json:"DisplayData,omitnil,omitempty" name:"DisplayData"`

	// 规则ID
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`
}

type SecurityButlerInfo struct {
	// 数据id
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`

	// 订单id
	OrderId *uint64 `json:"OrderId,omitnil,omitempty" name:"OrderId"`

	// cvm id
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 服务状态 0-服务中,1-已到期 2已销毁
	Status *uint64 `json:"Status,omitnil,omitempty" name:"Status"`

	// 服务开始时间
	StartTime *string `json:"StartTime,omitnil,omitempty" name:"StartTime"`

	// 服务结束时间
	EndTime *string `json:"EndTime,omitnil,omitempty" name:"EndTime"`

	// 主机名称
	HostName *string `json:"HostName,omitnil,omitempty" name:"HostName"`

	// 主机Ip
	HostIp *string `json:"HostIp,omitnil,omitempty" name:"HostIp"`

	// 主机 uuid
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 主机风险数
	RiskCount *uint64 `json:"RiskCount,omitnil,omitempty" name:"RiskCount"`
}

type SecurityDynamic struct {
	// 主机安全客户端UUID。
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 安全事件发生时间。
	EventTime *string `json:"EventTime,omitnil,omitempty" name:"EventTime"`

	// 安全事件类型。
	// <li>MALWARE：木马事件</li>
	// <li>NON_LOCAL_LOGIN：异地登录</li>
	// <li>BRUTEATTACK_SUCCESS：密码破解成功</li>
	// <li>VUL：漏洞</li>
	// <li>BASELINE：安全基线</li>
	EventType *string `json:"EventType,omitnil,omitempty" name:"EventType"`

	// 安全事件消息。
	Message *string `json:"Message,omitnil,omitempty" name:"Message"`

	// 安全事件等级。
	// <li>RISK: 严重</li>
	// <li>HIGH: 高危</li>
	// <li>NORMAL: 中危</li>
	// <li>LOW: 低危</li>
	// <li>UNKNOWNED: 可疑</li>
	SecurityLevel *string `json:"SecurityLevel,omitnil,omitempty" name:"SecurityLevel"`
}

type SecurityEventInfo struct {
	// 安全事件数
	EventCnt *uint64 `json:"EventCnt,omitnil,omitempty" name:"EventCnt"`

	// 受影响机器数
	UuidCnt *uint64 `json:"UuidCnt,omitnil,omitempty" name:"UuidCnt"`
}

type SecurityTrend struct {
	// 事件时间。
	Date *string `json:"Date,omitnil,omitempty" name:"Date"`

	// 事件数量。
	EventNum *uint64 `json:"EventNum,omitnil,omitempty" name:"EventNum"`
}

// Predefined struct for user
type SeparateMalwaresRequestParams struct {
	// 木马事件ID数组。(最大100条)
	Ids []*uint64 `json:"Ids,omitnil,omitempty" name:"Ids"`

	// 是否杀掉进程
	KillProcess *bool `json:"KillProcess,omitnil,omitempty" name:"KillProcess"`
}

type SeparateMalwaresRequest struct {
	*tchttp.BaseRequest
	
	// 木马事件ID数组。(最大100条)
	Ids []*uint64 `json:"Ids,omitnil,omitempty" name:"Ids"`

	// 是否杀掉进程
	KillProcess *bool `json:"KillProcess,omitnil,omitempty" name:"KillProcess"`
}

func (r *SeparateMalwaresRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *SeparateMalwaresRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Ids")
	delete(f, "KillProcess")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "SeparateMalwaresRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type SeparateMalwaresResponseParams struct {
	// 隔离成功的ID数组，若无则返回空数组
	SuccessIds []*uint64 `json:"SuccessIds,omitnil,omitempty" name:"SuccessIds"`

	// 隔离失败的ID数组，若无则返回空数组
	FailedIds []*uint64 `json:"FailedIds,omitnil,omitempty" name:"FailedIds"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type SeparateMalwaresResponse struct {
	*tchttp.BaseResponse
	Response *SeparateMalwaresResponseParams `json:"Response"`
}

func (r *SeparateMalwaresResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *SeparateMalwaresResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type SetBashEventsStatusRequestParams struct {
	// ID数组，最大100条。
	Ids []*uint64 `json:"Ids,omitnil,omitempty" name:"Ids"`

	// 新状态(0-待处理 1-高危 2-正常)
	Status *uint64 `json:"Status,omitnil,omitempty" name:"Status"`
}

type SetBashEventsStatusRequest struct {
	*tchttp.BaseRequest
	
	// ID数组，最大100条。
	Ids []*uint64 `json:"Ids,omitnil,omitempty" name:"Ids"`

	// 新状态(0-待处理 1-高危 2-正常)
	Status *uint64 `json:"Status,omitnil,omitempty" name:"Status"`
}

func (r *SetBashEventsStatusRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *SetBashEventsStatusRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Ids")
	delete(f, "Status")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "SetBashEventsStatusRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type SetBashEventsStatusResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type SetBashEventsStatusResponse struct {
	*tchttp.BaseResponse
	Response *SetBashEventsStatusResponseParams `json:"Response"`
}

func (r *SetBashEventsStatusResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *SetBashEventsStatusResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type SetLocalStorageExpireRequestParams struct {
	// 键
	Key *string `json:"Key,omitnil,omitempty" name:"Key"`

	// 过期时间（单位：秒）
	Expire *uint64 `json:"Expire,omitnil,omitempty" name:"Expire"`
}

type SetLocalStorageExpireRequest struct {
	*tchttp.BaseRequest
	
	// 键
	Key *string `json:"Key,omitnil,omitempty" name:"Key"`

	// 过期时间（单位：秒）
	Expire *uint64 `json:"Expire,omitnil,omitempty" name:"Expire"`
}

func (r *SetLocalStorageExpireRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *SetLocalStorageExpireRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Key")
	delete(f, "Expire")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "SetLocalStorageExpireRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type SetLocalStorageExpireResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type SetLocalStorageExpireResponse struct {
	*tchttp.BaseResponse
	Response *SetLocalStorageExpireResponseParams `json:"Response"`
}

func (r *SetLocalStorageExpireResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *SetLocalStorageExpireResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type SetLocalStorageItemRequestParams struct {
	// 键
	Key *string `json:"Key,omitnil,omitempty" name:"Key"`

	// 值
	Value *string `json:"Value,omitnil,omitempty" name:"Value"`

	// 失效时间（单位；秒）
	Expire *uint64 `json:"Expire,omitnil,omitempty" name:"Expire"`
}

type SetLocalStorageItemRequest struct {
	*tchttp.BaseRequest
	
	// 键
	Key *string `json:"Key,omitnil,omitempty" name:"Key"`

	// 值
	Value *string `json:"Value,omitnil,omitempty" name:"Value"`

	// 失效时间（单位；秒）
	Expire *uint64 `json:"Expire,omitnil,omitempty" name:"Expire"`
}

func (r *SetLocalStorageItemRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *SetLocalStorageItemRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Key")
	delete(f, "Value")
	delete(f, "Expire")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "SetLocalStorageItemRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type SetLocalStorageItemResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type SetLocalStorageItemResponse struct {
	*tchttp.BaseResponse
	Response *SetLocalStorageItemResponseParams `json:"Response"`
}

func (r *SetLocalStorageItemResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *SetLocalStorageItemResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type StandardModeConfig struct {
	// 阻断时长，单位：秒
	Ttl *uint64 `json:"Ttl,omitnil,omitempty" name:"Ttl"`
}

// Predefined struct for user
type StartBaselineDetectRequestParams struct {
	// 基线检测参数
	Param *BaselineDetectParam `json:"Param,omitnil,omitempty" name:"Param"`
}

type StartBaselineDetectRequest struct {
	*tchttp.BaseRequest
	
	// 基线检测参数
	Param *BaselineDetectParam `json:"Param,omitnil,omitempty" name:"Param"`
}

func (r *StartBaselineDetectRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *StartBaselineDetectRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Param")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "StartBaselineDetectRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type StartBaselineDetectResponseParams struct {
	// 扫描任务ID
	TaskId *int64 `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type StartBaselineDetectResponse struct {
	*tchttp.BaseResponse
	Response *StartBaselineDetectResponseParams `json:"Response"`
}

func (r *StartBaselineDetectResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *StartBaselineDetectResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type StopAssetScanRequestParams struct {
	// 任务Id
	TaskId *uint64 `json:"TaskId,omitnil,omitempty" name:"TaskId"`
}

type StopAssetScanRequest struct {
	*tchttp.BaseRequest
	
	// 任务Id
	TaskId *uint64 `json:"TaskId,omitnil,omitempty" name:"TaskId"`
}

func (r *StopAssetScanRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *StopAssetScanRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "TaskId")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "StopAssetScanRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type StopAssetScanResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type StopAssetScanResponse struct {
	*tchttp.BaseResponse
	Response *StopAssetScanResponseParams `json:"Response"`
}

func (r *StopAssetScanResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *StopAssetScanResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type StopBaselineDetectRequestParams struct {
	// 取消任务ID集合
	TaskIds []*int64 `json:"TaskIds,omitnil,omitempty" name:"TaskIds"`
}

type StopBaselineDetectRequest struct {
	*tchttp.BaseRequest
	
	// 取消任务ID集合
	TaskIds []*int64 `json:"TaskIds,omitnil,omitempty" name:"TaskIds"`
}

func (r *StopBaselineDetectRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *StopBaselineDetectRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "TaskIds")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "StopBaselineDetectRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type StopBaselineDetectResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type StopBaselineDetectResponse struct {
	*tchttp.BaseResponse
	Response *StopBaselineDetectResponseParams `json:"Response"`
}

func (r *StopBaselineDetectResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *StopBaselineDetectResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type StopNoticeBanTipsRequestParams struct {

}

type StopNoticeBanTipsRequest struct {
	*tchttp.BaseRequest
	
}

func (r *StopNoticeBanTipsRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *StopNoticeBanTipsRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "StopNoticeBanTipsRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type StopNoticeBanTipsResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type StopNoticeBanTipsResponse struct {
	*tchttp.BaseResponse
	Response *StopNoticeBanTipsResponseParams `json:"Response"`
}

func (r *StopNoticeBanTipsResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *StopNoticeBanTipsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type Strategy struct {
	// 策略名
	// 注意：此字段可能返回 null，表示取不到有效值。
	StrategyName *string `json:"StrategyName,omitnil,omitempty" name:"StrategyName"`

	// 策略id
	// 注意：此字段可能返回 null，表示取不到有效值。
	StrategyId *uint64 `json:"StrategyId,omitnil,omitempty" name:"StrategyId"`

	// 基线检测项总数
	// 注意：此字段可能返回 null，表示取不到有效值。
	RuleCount *uint64 `json:"RuleCount,omitnil,omitempty" name:"RuleCount"`

	// 主机数量
	// 注意：此字段可能返回 null，表示取不到有效值。
	HostCount *uint64 `json:"HostCount,omitnil,omitempty" name:"HostCount"`

	// 扫描周期
	// 注意：此字段可能返回 null，表示取不到有效值。
	ScanCycle *uint64 `json:"ScanCycle,omitnil,omitempty" name:"ScanCycle"`

	// 扫描时间
	// 注意：此字段可能返回 null，表示取不到有效值。
	ScanAt *string `json:"ScanAt,omitnil,omitempty" name:"ScanAt"`

	// 是否可用
	// 注意：此字段可能返回 null，表示取不到有效值。
	Enabled *uint64 `json:"Enabled,omitnil,omitempty" name:"Enabled"`

	// 通过率
	// 注意：此字段可能返回 null，表示取不到有效值。
	PassRate *uint64 `json:"PassRate,omitnil,omitempty" name:"PassRate"`

	// 基线id
	// 注意：此字段可能返回 null，表示取不到有效值。
	CategoryIds *string `json:"CategoryIds,omitnil,omitempty" name:"CategoryIds"`

	// 是否默认策略
	// 注意：此字段可能返回 null，表示取不到有效值。
	IsDefault *uint64 `json:"IsDefault,omitnil,omitempty" name:"IsDefault"`
}

// Predefined struct for user
type SwitchBashRulesRequestParams struct {
	// 规则ID
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`

	// 是否禁用
	Disabled *uint64 `json:"Disabled,omitnil,omitempty" name:"Disabled"`
}

type SwitchBashRulesRequest struct {
	*tchttp.BaseRequest
	
	// 规则ID
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`

	// 是否禁用
	Disabled *uint64 `json:"Disabled,omitnil,omitempty" name:"Disabled"`
}

func (r *SwitchBashRulesRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *SwitchBashRulesRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Id")
	delete(f, "Disabled")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "SwitchBashRulesRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type SwitchBashRulesResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type SwitchBashRulesResponse struct {
	*tchttp.BaseResponse
	Response *SwitchBashRulesResponseParams `json:"Response"`
}

func (r *SwitchBashRulesResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *SwitchBashRulesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type SyncAssetScanRequestParams struct {
	// 是否同步：true-是 false-否；默认false
	Sync *bool `json:"Sync,omitnil,omitempty" name:"Sync"`
}

type SyncAssetScanRequest struct {
	*tchttp.BaseRequest
	
	// 是否同步：true-是 false-否；默认false
	Sync *bool `json:"Sync,omitnil,omitempty" name:"Sync"`
}

func (r *SyncAssetScanRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *SyncAssetScanRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Sync")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "SyncAssetScanRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type SyncAssetScanResponseParams struct {
	// 枚举值有(大写)：NOTASK（没有同步任务），SYNCING（同步中），FINISHED（同步完成）
	State *string `json:"State,omitnil,omitempty" name:"State"`

	// 最新开始同步时间
	LatestStartTime *string `json:"LatestStartTime,omitnil,omitempty" name:"LatestStartTime"`

	// 最新结束同步时间
	LatestEndTime *string `json:"LatestEndTime,omitnil,omitempty" name:"LatestEndTime"`

	// 任务ID
	// 注意：此字段可能返回 null，表示取不到有效值。
	TaskId *uint64 `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type SyncAssetScanResponse struct {
	*tchttp.BaseResponse
	Response *SyncAssetScanResponseParams `json:"Response"`
}

func (r *SyncAssetScanResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *SyncAssetScanResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type SyncBaselineDetectSummaryRequestParams struct {
	// 用于计算检测中和进度的任务ID集合，一般不用传入
	TaskIds []*uint64 `json:"TaskIds,omitnil,omitempty" name:"TaskIds"`
}

type SyncBaselineDetectSummaryRequest struct {
	*tchttp.BaseRequest
	
	// 用于计算检测中和进度的任务ID集合，一般不用传入
	TaskIds []*uint64 `json:"TaskIds,omitnil,omitempty" name:"TaskIds"`
}

func (r *SyncBaselineDetectSummaryRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *SyncBaselineDetectSummaryRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "TaskIds")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "SyncBaselineDetectSummaryRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type SyncBaselineDetectSummaryResponseParams struct {
	// 处理进度
	ProgressRate *int64 `json:"ProgressRate,omitnil,omitempty" name:"ProgressRate"`

	// 未通过策略总数
	NotPassPolicyCount *int64 `json:"NotPassPolicyCount,omitnil,omitempty" name:"NotPassPolicyCount"`

	// 主机总数
	HostCount *int64 `json:"HostCount,omitnil,omitempty" name:"HostCount"`

	// 开始时间
	StartTime *string `json:"StartTime,omitnil,omitempty" name:"StartTime"`

	// 结束时间
	EndTime *string `json:"EndTime,omitnil,omitempty" name:"EndTime"`

	// 1:即将进行首次扫描   0:已经扫描过了
	WillFirstScan *int64 `json:"WillFirstScan,omitnil,omitempty" name:"WillFirstScan"`

	// 正在检测的任务ID
	DetectingTaskIds []*int64 `json:"DetectingTaskIds,omitnil,omitempty" name:"DetectingTaskIds"`

	// 扫描中剩余时间(分钟)
	LeftMins *int64 `json:"LeftMins,omitnil,omitempty" name:"LeftMins"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type SyncBaselineDetectSummaryResponse struct {
	*tchttp.BaseResponse
	Response *SyncBaselineDetectSummaryResponseParams `json:"Response"`
}

func (r *SyncBaselineDetectSummaryResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *SyncBaselineDetectSummaryResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type SyncMachinesRequestParams struct {
	// 是否同步
	Sync *bool `json:"Sync,omitnil,omitempty" name:"Sync"`
}

type SyncMachinesRequest struct {
	*tchttp.BaseRequest
	
	// 是否同步
	Sync *bool `json:"Sync,omitnil,omitempty" name:"Sync"`
}

func (r *SyncMachinesRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *SyncMachinesRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Sync")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "SyncMachinesRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type SyncMachinesResponseParams struct {
	// 枚举值有(大写)：NOTASK（没有同步任务），SYNCING（同步中），FINISHED（同步完成）
	State *string `json:"State,omitnil,omitempty" name:"State"`

	// 最新开始同步时间
	LatestStartTime *string `json:"LatestStartTime,omitnil,omitempty" name:"LatestStartTime"`

	// 最新同步结束时间
	LatestEndTime *string `json:"LatestEndTime,omitnil,omitempty" name:"LatestEndTime"`

	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type SyncMachinesResponse struct {
	*tchttp.BaseResponse
	Response *SyncMachinesResponseParams `json:"Response"`
}

func (r *SyncMachinesResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *SyncMachinesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type Tag struct {
	// 标签ID
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`

	// 标签名
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// 服务器数
	Count *uint64 `json:"Count,omitnil,omitempty" name:"Count"`
}

type TagMachine struct {
	// ID
	Id *string `json:"Id,omitnil,omitempty" name:"Id"`

	// 主机ID
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 主机名称
	MachineName *string `json:"MachineName,omitnil,omitempty" name:"MachineName"`

	// 主机内网IP
	MachineIp *string `json:"MachineIp,omitnil,omitempty" name:"MachineIp"`

	// 主机外网IP
	MachineWanIp *string `json:"MachineWanIp,omitnil,omitempty" name:"MachineWanIp"`

	// 主机区域
	MachineRegion *string `json:"MachineRegion,omitnil,omitempty" name:"MachineRegion"`

	// 主机区域类型
	MachineType *string `json:"MachineType,omitnil,omitempty" name:"MachineType"`
}

type Tags struct {
	// 标签键
	TagKey *string `json:"TagKey,omitnil,omitempty" name:"TagKey"`

	// 标签值
	TagValue *string `json:"TagValue,omitnil,omitempty" name:"TagValue"`
}

type TaskStatus struct {
	// 扫描中（包含初始化）
	Scanning *string `json:"Scanning,omitnil,omitempty" name:"Scanning"`

	// 扫描终止（包含终止中）
	Ok *string `json:"Ok,omitnil,omitempty" name:"Ok"`

	// 扫描失败
	Fail *string `json:"Fail,omitnil,omitempty" name:"Fail"`

	// 扫描失败（提示具体原因：扫描超时、客户端版本低、客户端离线）
	// 注意：此字段可能返回 null，表示取不到有效值。
	Stop *string `json:"Stop,omitnil,omitempty" name:"Stop"`
}

// Predefined struct for user
type TestWebHookRuleRequestParams struct {
	// 规则Id
	Id *int64 `json:"Id,omitnil,omitempty" name:"Id"`

	// 测试内容
	Data *string `json:"Data,omitnil,omitempty" name:"Data"`
}

type TestWebHookRuleRequest struct {
	*tchttp.BaseRequest
	
	// 规则Id
	Id *int64 `json:"Id,omitnil,omitempty" name:"Id"`

	// 测试内容
	Data *string `json:"Data,omitnil,omitempty" name:"Data"`
}

func (r *TestWebHookRuleRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *TestWebHookRuleRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Id")
	delete(f, "Data")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "TestWebHookRuleRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type TestWebHookRuleResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type TestWebHookRuleResponse struct {
	*tchttp.BaseResponse
	Response *TestWebHookRuleResponseParams `json:"Response"`
}

func (r *TestWebHookRuleResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *TestWebHookRuleResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type TopInfo struct {
	// top统计数据，如ip、漏洞名等
	Value *string `json:"Value,omitnil,omitempty" name:"Value"`

	// top统计计数
	Count *uint64 `json:"Count,omitnil,omitempty" name:"Count"`
}

// Predefined struct for user
type TrustMalwaresRequestParams struct {
	// 木马ID数组（单次不超过的最大条数：100）
	Ids []*uint64 `json:"Ids,omitnil,omitempty" name:"Ids"`
}

type TrustMalwaresRequest struct {
	*tchttp.BaseRequest
	
	// 木马ID数组（单次不超过的最大条数：100）
	Ids []*uint64 `json:"Ids,omitnil,omitempty" name:"Ids"`
}

func (r *TrustMalwaresRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *TrustMalwaresRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Ids")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "TrustMalwaresRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type TrustMalwaresResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type TrustMalwaresResponse struct {
	*tchttp.BaseResponse
	Response *TrustMalwaresResponseParams `json:"Response"`
}

func (r *TrustMalwaresResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *TrustMalwaresResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type UntrustMalwaresRequestParams struct {
	// 木马ID数组 (最大100条)
	Ids []*uint64 `json:"Ids,omitnil,omitempty" name:"Ids"`
}

type UntrustMalwaresRequest struct {
	*tchttp.BaseRequest
	
	// 木马ID数组 (最大100条)
	Ids []*uint64 `json:"Ids,omitnil,omitempty" name:"Ids"`
}

func (r *UntrustMalwaresRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *UntrustMalwaresRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Ids")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "UntrustMalwaresRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type UntrustMalwaresResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type UntrustMalwaresResponse struct {
	*tchttp.BaseResponse
	Response *UntrustMalwaresResponseParams `json:"Response"`
}

func (r *UntrustMalwaresResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *UntrustMalwaresResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type UpdateBaselineStrategyRequestParams struct {
	// 策略id
	StrategyId *uint64 `json:"StrategyId,omitnil,omitempty" name:"StrategyId"`

	// 策略名称
	StrategyName *string `json:"StrategyName,omitnil,omitempty" name:"StrategyName"`

	// 检测周期
	ScanCycle *uint64 `json:"ScanCycle,omitnil,omitempty" name:"ScanCycle"`

	// 定期检测时间，该时间下发扫描
	ScanAt *string `json:"ScanAt,omitnil,omitempty" name:"ScanAt"`

	// 该策略下选择的基线id数组
	CategoryIds []*string `json:"CategoryIds,omitnil,omitempty" name:"CategoryIds"`

	// 扫描范围是否全部服务器, 1:是  0:否, 为1则为全部专业版主机
	IsGlobal *uint64 `json:"IsGlobal,omitnil,omitempty" name:"IsGlobal"`

	// 云主机类型：
	// cvm：腾讯云服务器
	// bm：裸金属
	// ecm：边缘计算主机
	// lh:轻量应用服务器
	// other:混合云机器
	MachineType *string `json:"MachineType,omitnil,omitempty" name:"MachineType"`

	// 主机地域 ap-guangzhou
	RegionCode *string `json:"RegionCode,omitnil,omitempty" name:"RegionCode"`

	// 主机id数组
	Quuids []*string `json:"Quuids,omitnil,omitempty" name:"Quuids"`
}

type UpdateBaselineStrategyRequest struct {
	*tchttp.BaseRequest
	
	// 策略id
	StrategyId *uint64 `json:"StrategyId,omitnil,omitempty" name:"StrategyId"`

	// 策略名称
	StrategyName *string `json:"StrategyName,omitnil,omitempty" name:"StrategyName"`

	// 检测周期
	ScanCycle *uint64 `json:"ScanCycle,omitnil,omitempty" name:"ScanCycle"`

	// 定期检测时间，该时间下发扫描
	ScanAt *string `json:"ScanAt,omitnil,omitempty" name:"ScanAt"`

	// 该策略下选择的基线id数组
	CategoryIds []*string `json:"CategoryIds,omitnil,omitempty" name:"CategoryIds"`

	// 扫描范围是否全部服务器, 1:是  0:否, 为1则为全部专业版主机
	IsGlobal *uint64 `json:"IsGlobal,omitnil,omitempty" name:"IsGlobal"`

	// 云主机类型：
	// cvm：腾讯云服务器
	// bm：裸金属
	// ecm：边缘计算主机
	// lh:轻量应用服务器
	// other:混合云机器
	MachineType *string `json:"MachineType,omitnil,omitempty" name:"MachineType"`

	// 主机地域 ap-guangzhou
	RegionCode *string `json:"RegionCode,omitnil,omitempty" name:"RegionCode"`

	// 主机id数组
	Quuids []*string `json:"Quuids,omitnil,omitempty" name:"Quuids"`
}

func (r *UpdateBaselineStrategyRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *UpdateBaselineStrategyRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "StrategyId")
	delete(f, "StrategyName")
	delete(f, "ScanCycle")
	delete(f, "ScanAt")
	delete(f, "CategoryIds")
	delete(f, "IsGlobal")
	delete(f, "MachineType")
	delete(f, "RegionCode")
	delete(f, "Quuids")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "UpdateBaselineStrategyRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type UpdateBaselineStrategyResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type UpdateBaselineStrategyResponse struct {
	*tchttp.BaseResponse
	Response *UpdateBaselineStrategyResponseParams `json:"Response"`
}

func (r *UpdateBaselineStrategyResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *UpdateBaselineStrategyResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type UpdateHostLoginWhiteObj struct {
	// 地域信息数组
	Places []*Place `json:"Places,omitnil,omitempty" name:"Places"`

	// 来源ip
	SrcIp *string `json:"SrcIp,omitnil,omitempty" name:"SrcIp"`

	// 用户名
	UserName *string `json:"UserName,omitnil,omitempty" name:"UserName"`

	// 备注信息
	Remark *string `json:"Remark,omitnil,omitempty" name:"Remark"`

	// 要更新的数据id
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`

	// 开始时间
	StartTime *string `json:"StartTime,omitnil,omitempty" name:"StartTime"`

	// 结束时间
	EndTime *string `json:"EndTime,omitnil,omitempty" name:"EndTime"`
}

// Predefined struct for user
type UpdateMachineTagsRequestParams struct {
	// 机器 Quuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 标签ID，该操作会覆盖原有的标签列表
	TagIds []*uint64 `json:"TagIds,omitnil,omitempty" name:"TagIds"`

	// 服务器地区 如: ap-guangzhou
	MachineRegion *string `json:"MachineRegion,omitnil,omitempty" name:"MachineRegion"`

	// 服务器类型(CVM|BM|ECM|LH|Other)
	MachineArea *string `json:"MachineArea,omitnil,omitempty" name:"MachineArea"`
}

type UpdateMachineTagsRequest struct {
	*tchttp.BaseRequest
	
	// 机器 Quuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 标签ID，该操作会覆盖原有的标签列表
	TagIds []*uint64 `json:"TagIds,omitnil,omitempty" name:"TagIds"`

	// 服务器地区 如: ap-guangzhou
	MachineRegion *string `json:"MachineRegion,omitnil,omitempty" name:"MachineRegion"`

	// 服务器类型(CVM|BM|ECM|LH|Other)
	MachineArea *string `json:"MachineArea,omitnil,omitempty" name:"MachineArea"`
}

func (r *UpdateMachineTagsRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *UpdateMachineTagsRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Quuid")
	delete(f, "TagIds")
	delete(f, "MachineRegion")
	delete(f, "MachineArea")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "UpdateMachineTagsRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type UpdateMachineTagsResponseParams struct {
	// 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type UpdateMachineTagsResponse struct {
	*tchttp.BaseResponse
	Response *UpdateMachineTagsResponseParams `json:"Response"`
}

func (r *UpdateMachineTagsResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *UpdateMachineTagsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type UsualPlace struct {
	// ID。
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`

	// 主机安全客户端唯一标识UUID。
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 国家 ID。
	CountryId *uint64 `json:"CountryId,omitnil,omitempty" name:"CountryId"`

	// 省份 ID。
	ProvinceId *uint64 `json:"ProvinceId,omitnil,omitempty" name:"ProvinceId"`

	// 城市 ID。
	CityId *uint64 `json:"CityId,omitnil,omitempty" name:"CityId"`
}

type ValueInfo struct {
	// 字段的分词符
	Tokenizer *string `json:"Tokenizer,omitnil,omitempty" name:"Tokenizer"`

	// 字段类型
	Type *string `json:"Type,omitnil,omitempty" name:"Type"`

	// 字段是否开启分析功能
	SqlFlag *bool `json:"SqlFlag,omitnil,omitempty" name:"SqlFlag"`

	// 是否包含中文
	ContainZH *bool `json:"ContainZH,omitnil,omitempty" name:"ContainZH"`
}

type VersionWhiteConfig struct {
	// 到期天数
	Deadline *uint64 `json:"Deadline,omitnil,omitempty" name:"Deadline"`

	// 授权数量
	LicenseNum *uint64 `json:"LicenseNum,omitnil,omitempty" name:"LicenseNum"`

	// 是否可申请
	IsApplyFor *bool `json:"IsApplyFor,omitnil,omitempty" name:"IsApplyFor"`

	// 类型
	SourceType *uint64 `json:"SourceType,omitnil,omitempty" name:"SourceType"`
}

type VertexDetail struct {
	// 该节点类型，进程:1；网络:2；文件:3；ssh:4
	// 注意：此字段可能返回 null，表示取不到有效值。
	Type *int64 `json:"Type,omitnil,omitempty" name:"Type"`

	// 各节点类型用到的时间，2022-11-29 00:00:00 格式
	// 注意：此字段可能返回 null，表示取不到有效值。
	Time *string `json:"Time,omitnil,omitempty" name:"Time"`

	// 告警信息
	// 注意：此字段可能返回 null，表示取不到有效值。
	AlarmInfo []*AlarmInfo `json:"AlarmInfo,omitnil,omitempty" name:"AlarmInfo"`

	// 进程名，当该节点为进程时生效
	// 注意：此字段可能返回 null，表示取不到有效值。
	ProcName *string `json:"ProcName,omitnil,omitempty" name:"ProcName"`

	// 命令行，当该节点为进程时生效
	// 注意：此字段可能返回 null，表示取不到有效值。
	CmdLine *string `json:"CmdLine,omitnil,omitempty" name:"CmdLine"`

	// 进程id，当该节点为进程时生效
	// 注意：此字段可能返回 null，表示取不到有效值。
	Pid *string `json:"Pid,omitnil,omitempty" name:"Pid"`

	// 文件md5，当该节点为文件时生效
	// 注意：此字段可能返回 null，表示取不到有效值。
	FileMd5 *string `json:"FileMd5,omitnil,omitempty" name:"FileMd5"`

	// 文件写入内容，当该节点为文件时生效
	// 注意：此字段可能返回 null，表示取不到有效值。
	FileContent *string `json:"FileContent,omitnil,omitempty" name:"FileContent"`

	// 文件路径，当该节点为文件时生效
	// 注意：此字段可能返回 null，表示取不到有效值。
	FilePath *string `json:"FilePath,omitnil,omitempty" name:"FilePath"`

	// 文件创建时间，当该节点为文件时生效
	// 注意：此字段可能返回 null，表示取不到有效值。
	FileCreateTime *string `json:"FileCreateTime,omitnil,omitempty" name:"FileCreateTime"`

	// 请求目的地址，当该节点为网络时生效
	// 注意：此字段可能返回 null，表示取不到有效值。
	Address *string `json:"Address,omitnil,omitempty" name:"Address"`

	// 目标端口，当该节点为网络时生效
	// 注意：此字段可能返回 null，表示取不到有效值。
	DstPort *uint64 `json:"DstPort,omitnil,omitempty" name:"DstPort"`

	// 登录源ip，当该节点为ssh时生效
	// 注意：此字段可能返回 null，表示取不到有效值。
	SrcIP *string `json:"SrcIP,omitnil,omitempty" name:"SrcIP"`

	// 登录用户名用户组，当该节点为ssh时生效
	// 注意：此字段可能返回 null，表示取不到有效值。
	User *string `json:"User,omitnil,omitempty" name:"User"`

	// 漏洞名称，当该节点为漏洞时生效
	// 注意：此字段可能返回 null，表示取不到有效值。
	VulName *string `json:"VulName,omitnil,omitempty" name:"VulName"`

	// 漏洞利用时间，当该节点为漏洞时生效
	// 注意：此字段可能返回 null，表示取不到有效值。
	VulTime *string `json:"VulTime,omitnil,omitempty" name:"VulTime"`

	// http请求内容，当该节点为漏洞时生效
	// 注意：此字段可能返回 null，表示取不到有效值。
	HttpContent *string `json:"HttpContent,omitnil,omitempty" name:"HttpContent"`

	// 漏洞利用者来源ip，当该节点为漏洞时生效
	// 注意：此字段可能返回 null，表示取不到有效值。
	VulSrcIP *string `json:"VulSrcIP,omitnil,omitempty" name:"VulSrcIP"`

	// 点id
	// 注意：此字段可能返回 null，表示取不到有效值。
	VertexId *string `json:"VertexId,omitnil,omitempty" name:"VertexId"`
}

type VertexInfo struct {
	// 该结点类型，进程:1；网络:2；文件:3；ssh:4；
	Type *int64 `json:"Type,omitnil,omitempty" name:"Type"`

	// 该节点包含的vid
	Vid *string `json:"Vid,omitnil,omitempty" name:"Vid"`

	// 该节点的父节点vid
	ParentVid *string `json:"ParentVid,omitnil,omitempty" name:"ParentVid"`

	// 是否叶子
	IsLeaf *bool `json:"IsLeaf,omitnil,omitempty" name:"IsLeaf"`

	// 进程名，当Type=1时使用
	ProcNamePrefix *string `json:"ProcNamePrefix,omitnil,omitempty" name:"ProcNamePrefix"`

	// 进程名md5，当Type=1时使用
	ProcNameMd5 *string `json:"ProcNameMd5,omitnil,omitempty" name:"ProcNameMd5"`

	// 命令行，当Type=1时使用
	CmdLinePrefix *string `json:"CmdLinePrefix,omitnil,omitempty" name:"CmdLinePrefix"`

	// 命令行md5，当Type=1时使用
	CmdLineMd5 *string `json:"CmdLineMd5,omitnil,omitempty" name:"CmdLineMd5"`

	// 文件路径，当Type=3时使用
	FilePathPrefix *string `json:"FilePathPrefix,omitnil,omitempty" name:"FilePathPrefix"`

	// 请求目的地址，当Type=2时使用
	AddressPrefix *string `json:"AddressPrefix,omitnil,omitempty" name:"AddressPrefix"`

	// 是否漏洞节点
	IsWeDetect *bool `json:"IsWeDetect,omitnil,omitempty" name:"IsWeDetect"`

	// 是否告警节点
	IsAlarm *bool `json:"IsAlarm,omitnil,omitempty" name:"IsAlarm"`

	// 文件路径md5，当Type=3时使用
	FilePathMd5 *string `json:"FilePathMd5,omitnil,omitempty" name:"FilePathMd5"`

	// 请求目的地址md5，当Type=2时使用
	AddressMd5 *string `json:"AddressMd5,omitnil,omitempty" name:"AddressMd5"`
}

type VulDefenceEvent struct {
	// 漏洞ID
	VulId *uint64 `json:"VulId,omitnil,omitempty" name:"VulId"`

	// 漏洞名称
	VulName *string `json:"VulName,omitnil,omitempty" name:"VulName"`

	// cve编号
	CveId *string `json:"CveId,omitnil,omitempty" name:"CveId"`

	// 漏洞事件id
	Id *int64 `json:"Id,omitnil,omitempty" name:"Id"`

	// 主机quuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 主机名
	Alias *string `json:"Alias,omitnil,omitempty" name:"Alias"`

	// 内网ip
	PrivateIp *string `json:"PrivateIp,omitnil,omitempty" name:"PrivateIp"`

	// 公网ip
	PublicIp *string `json:"PublicIp,omitnil,omitempty" name:"PublicIp"`

	// 0: 尝试攻击(WeDetect) 1:尝试攻击成功(WeDetect) 2:rasp防御事件
	EventType *uint64 `json:"EventType,omitnil,omitempty" name:"EventType"`

	// 攻击源ip
	SourceIp *string `json:"SourceIp,omitnil,omitempty" name:"SourceIp"`

	// 攻击源ip地址所在城市
	City *string `json:"City,omitnil,omitempty" name:"City"`

	// 攻击源端口
	SourcePort []*uint64 `json:"SourcePort,omitnil,omitempty" name:"SourcePort"`

	// 创建事件时间
	CreateTime *string `json:"CreateTime,omitnil,omitempty" name:"CreateTime"`

	// 更新事件时间
	MergeTime *string `json:"MergeTime,omitnil,omitempty" name:"MergeTime"`

	// 事件发生次数
	Count *int64 `json:"Count,omitnil,omitempty" name:"Count"`

	// 状态 0: 待处理 1:已防御 2:已处理 3: 已忽略 4: 已删除
	Status *int64 `json:"Status,omitnil,omitempty" name:"Status"`

	// 0 专业版,1 旗舰版,2 LH普惠版（仅限LH使用）,3  CVM普惠版（仅限CVM使用）
	UpgradeType *int64 `json:"UpgradeType,omitnil,omitempty" name:"UpgradeType"`

	// 0 不支持修复，1 支持修复
	FixType *int64 `json:"FixType,omitnil,omitempty" name:"FixType"`

	// 主机uuid
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 主机额外信息
	// 注意：此字段可能返回 null，表示取不到有效值。
	MachineExtraInfo *MachineExtraInfo `json:"MachineExtraInfo,omitnil,omitempty" name:"MachineExtraInfo"`
}

type VulDefenceEventDetail struct {
	// 漏洞名称
	VulName *string `json:"VulName,omitnil,omitempty" name:"VulName"`

	// cve编号
	CveId *string `json:"CveId,omitnil,omitempty" name:"CveId"`

	// 漏洞事件id
	Id *int64 `json:"Id,omitnil,omitempty" name:"Id"`

	// 主机quuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 主机名
	Alias *string `json:"Alias,omitnil,omitempty" name:"Alias"`

	// 内网ip
	PrivateIp *string `json:"PrivateIp,omitnil,omitempty" name:"PrivateIp"`

	// 公网ip
	PublicIp *string `json:"PublicIp,omitnil,omitempty" name:"PublicIp"`

	// 0: 尝试攻击(WeDetect) 1:尝试攻击成功(WeDetect) 2:rasp防御事件
	EventType *uint64 `json:"EventType,omitnil,omitempty" name:"EventType"`

	// 攻击源ip
	SourceIp *string `json:"SourceIp,omitnil,omitempty" name:"SourceIp"`

	// 攻击源ip地址所在城市
	City *string `json:"City,omitnil,omitempty" name:"City"`

	// 攻击源端口
	// 注意：此字段可能返回 null，表示取不到有效值。
	SourcePort []*uint64 `json:"SourcePort,omitnil,omitempty" name:"SourcePort"`

	// 创建事件时间
	CreateTime *string `json:"CreateTime,omitnil,omitempty" name:"CreateTime"`

	// 更新事件时间
	MergeTime *string `json:"MergeTime,omitnil,omitempty" name:"MergeTime"`

	// 事件发生次数
	Count *int64 `json:"Count,omitnil,omitempty" name:"Count"`

	// 状态 0: 待处理 1:已防御 2:已处理 3: 已忽略 4: 已删除
	Status *int64 `json:"Status,omitnil,omitempty" name:"Status"`

	// ONLINE OFFLINE
	MachineStatus *string `json:"MachineStatus,omitnil,omitempty" name:"MachineStatus"`

	// 漏洞描述信息
	Description *string `json:"Description,omitnil,omitempty" name:"Description"`

	// 修复建议
	Fix *string `json:"Fix,omitnil,omitempty" name:"Fix"`

	// 攻击payload
	NetworkPayload *string `json:"NetworkPayload,omitnil,omitempty" name:"NetworkPayload"`

	// 关联进程pid
	Pid *int64 `json:"Pid,omitnil,omitempty" name:"Pid"`

	// 关联进程主类名
	MainClass *string `json:"MainClass,omitnil,omitempty" name:"MainClass"`

	// 堆栈信息(rasp特有)
	StackTrace *string `json:"StackTrace,omitnil,omitempty" name:"StackTrace"`

	// 漏洞ID相关的事件详情(json array格式 rasp特有)
	EventDetail *string `json:"EventDetail,omitnil,omitempty" name:"EventDetail"`

	// 主机失陷事件进程树(json格式 WeDetect特有)
	ExceptionPstree *string `json:"ExceptionPstree,omitnil,omitempty" name:"ExceptionPstree"`

	// 主机额外信息
	// 注意：此字段可能返回 null，表示取不到有效值。
	MachineExtraInfo *MachineExtraInfo `json:"MachineExtraInfo,omitnil,omitempty" name:"MachineExtraInfo"`
}

type VulDefenceOverview struct {
	// 防御开关：0 关闭 1 开启
	Enable *int64 `json:"Enable,omitnil,omitempty" name:"Enable"`

	// 已开启防御主机数
	DefendHostCount *int64 `json:"DefendHostCount,omitnil,omitempty" name:"DefendHostCount"`

	// 插件异常数
	ExceptionCount *int64 `json:"ExceptionCount,omitnil,omitempty" name:"ExceptionCount"`

	// 每日攻击趋势
	// 注意：此字段可能返回 null，表示取不到有效值。
	AttackCounts []*int64 `json:"AttackCounts,omitnil,omitempty" name:"AttackCounts"`

	// 每日防御趋势
	// 注意：此字段可能返回 null，表示取不到有效值。
	DefendCounts []*int64 `json:"DefendCounts,omitnil,omitempty" name:"DefendCounts"`

	// 日期
	// 注意：此字段可能返回 null，表示取不到有效值。
	Date []*string `json:"Date,omitnil,omitempty" name:"Date"`
}

type VulDefencePluginDetail struct {
	// 注入进程Pid
	Pid *int64 `json:"Pid,omitnil,omitempty" name:"Pid"`

	// 注入进程主类名
	MainClass *string `json:"MainClass,omitnil,omitempty" name:"MainClass"`

	// 插件状态：0: 注入中, 1: 注入成功, 2: 插件超时, 3: 插件退出, 4: 注入失败 5: 软删除
	Status *int64 `json:"Status,omitnil,omitempty" name:"Status"`

	// 错误日志
	ErrorLog *string `json:"ErrorLog,omitnil,omitempty" name:"ErrorLog"`

	// 注入日志
	InjectLog *string `json:"InjectLog,omitnil,omitempty" name:"InjectLog"`
}

type VulDefencePluginStatus struct {
	// 主机quuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 主机别名
	Alias *string `json:"Alias,omitnil,omitempty" name:"Alias"`

	// 内网ip
	PrivateIp *string `json:"PrivateIp,omitnil,omitempty" name:"PrivateIp"`

	// 公网ip
	PublicIp *string `json:"PublicIp,omitnil,omitempty" name:"PublicIp"`

	// 插件状态：0 正常，1 异常
	Exception *int64 `json:"Exception,omitnil,omitempty" name:"Exception"`

	// 创建时间
	CreateTime *string `json:"CreateTime,omitnil,omitempty" name:"CreateTime"`

	// 最后跟新时间
	ModifyTime *string `json:"ModifyTime,omitnil,omitempty" name:"ModifyTime"`
}

type VulDefenceRangeDetail struct {
	// 漏洞名称
	VulName *string `json:"VulName,omitnil,omitempty" name:"VulName"`

	// 标签
	Label *string `json:"Label,omitnil,omitempty" name:"Label"`

	// 漏洞级别：  1低危 2中危 3高危 4严重
	Level *uint64 `json:"Level,omitnil,omitempty" name:"Level"`

	// cvss 分数
	CvssScore *float64 `json:"CvssScore,omitnil,omitempty" name:"CvssScore"`

	// cve id
	CveId *string `json:"CveId,omitnil,omitempty" name:"CveId"`

	// 发布时间
	PublishTime *string `json:"PublishTime,omitnil,omitempty" name:"PublishTime"`

	// 漏洞id
	VulId *int64 `json:"VulId,omitnil,omitempty" name:"VulId"`

	// 状态，0:防御中，1：已加白，指的是在白名单列表中有这个漏洞的，不一定是全局型白名单
	// 注意：此字段可能返回 null，表示取不到有效值。
	Status *int64 `json:"Status,omitnil,omitempty" name:"Status"`
}

type VulDetailInfo struct {
	// 漏洞ID
	VulId *uint64 `json:"VulId,omitnil,omitempty" name:"VulId"`

	// 漏洞级别
	Level *uint64 `json:"Level,omitnil,omitempty" name:"Level"`

	// 漏洞名称
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// cve编号
	CveId *string `json:"CveId,omitnil,omitempty" name:"CveId"`

	// 1: web-cms漏洞 2:应用漏洞  4: Linux软件漏洞 5: Windows系统漏洞 0= 应急漏洞
	VulCategory *uint64 `json:"VulCategory,omitnil,omitempty" name:"VulCategory"`

	// 漏洞描述
	Descript *string `json:"Descript,omitnil,omitempty" name:"Descript"`

	// 修复建议
	Fix *string `json:"Fix,omitnil,omitempty" name:"Fix"`

	// 参考链接
	Reference *string `json:"Reference,omitnil,omitempty" name:"Reference"`

	// CVSS评分
	CvssScore *float64 `json:"CvssScore,omitnil,omitempty" name:"CvssScore"`

	// CVSS详情
	Cvss *string `json:"Cvss,omitnil,omitempty" name:"Cvss"`

	// 发布时间
	PublishTime *string `json:"PublishTime,omitnil,omitempty" name:"PublishTime"`
}

type VulEffectHostList struct {
	// 事件id
	// 注意：此字段可能返回 null，表示取不到有效值。
	EventId *uint64 `json:"EventId,omitnil,omitempty" name:"EventId"`

	// 状态：0: 待处理 1:忽略  3:已修复  5:检测中 6:修复中 7: 回滚中 8:修复失败
	// 注意：此字段可能返回 null，表示取不到有效值。
	Status *uint64 `json:"Status,omitnil,omitempty" name:"Status"`

	// 最后检测时间
	// 注意：此字段可能返回 null，表示取不到有效值。
	LastTime *string `json:"LastTime,omitnil,omitempty" name:"LastTime"`

	// 危害等级：1-低危；2-中危；3-高危；4-严重
	// 注意：此字段可能返回 null，表示取不到有效值。
	Level *uint64 `json:"Level,omitnil,omitempty" name:"Level"`

	// 主机Quuid
	// 注意：此字段可能返回 null，表示取不到有效值。
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 主机Uuid
	// 注意：此字段可能返回 null，表示取不到有效值。
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 主机HostIp
	// 注意：此字段可能返回 null，表示取不到有效值。
	HostIp *string `json:"HostIp,omitnil,omitempty" name:"HostIp"`

	// 主机别名
	// 注意：此字段可能返回 null，表示取不到有效值。
	AliasName *string `json:"AliasName,omitnil,omitempty" name:"AliasName"`

	// 主机标签
	// 注意：此字段可能返回 null，表示取不到有效值。
	Tags []*string `json:"Tags,omitnil,omitempty" name:"Tags"`

	// 说明
	// 注意：此字段可能返回 null，表示取不到有效值。
	Description *string `json:"Description,omitnil,omitempty" name:"Description"`

	// 版本信息：0-基础版 1-专业版 2-旗舰版 3-普惠版
	// 注意：此字段可能返回 null，表示取不到有效值。
	HostVersion *uint64 `json:"HostVersion,omitnil,omitempty" name:"HostVersion"`

	// 是否能自动修复 0 :漏洞不可自动修复，  1：可自动修复， 2：客户端已离线， 3：主机不是旗舰版只能手动修复， 4：机型不允许 ，5：修复中 ，6：已修复， 7：检测中  9:修复失败，10:已忽略 11:漏洞只支持linux不支持Windows 12：漏洞只支持Windows不支持linux，13:修复失败但此时主机已离线，14:修复失败但此时主机不是旗舰版， 15:已手动修复
	// 注意：此字段可能返回 null，表示取不到有效值。
	IsSupportAutoFix *uint64 `json:"IsSupportAutoFix,omitnil,omitempty" name:"IsSupportAutoFix"`

	// 失败原因
	// 注意：此字段可能返回 null，表示取不到有效值。
	FixStatusMsg *string `json:"FixStatusMsg,omitnil,omitempty" name:"FixStatusMsg"`

	// 首次发现时间
	// 注意：此字段可能返回 null，表示取不到有效值。
	FirstDiscoveryTime *string `json:"FirstDiscoveryTime,omitnil,omitempty" name:"FirstDiscoveryTime"`

	// 实例状态："PENDING"-创建中 "LAUNCH_FAILED"-创建失败 "RUNNING"-运行中 "STOPPED"-关机 "STARTING"-表示开机中 "STOPPING"-表示关机中 "REBOOTING"-重启中 "SHUTDOWN"-表示停止待销毁 "TERMINATING"-表示销毁中 "
	// 注意：此字段可能返回 null，表示取不到有效值。
	InstanceState *string `json:"InstanceState,omitnil,omitempty" name:"InstanceState"`

	// 外网ip
	// 注意：此字段可能返回 null，表示取不到有效值。
	PublicIpAddresses *string `json:"PublicIpAddresses,omitnil,omitempty" name:"PublicIpAddresses"`

	// 云标签信息
	// 注意：此字段可能返回 null，表示取不到有效值。
	CloudTags []*Tags `json:"CloudTags,omitnil,omitempty" name:"CloudTags"`

	// 主机额外信息
	// 注意：此字段可能返回 null，表示取不到有效值。
	MachineExtraInfo *MachineExtraInfo `json:"MachineExtraInfo,omitnil,omitempty" name:"MachineExtraInfo"`
}

type VulEffectModuleInfo struct {
	// 组件名
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// 影响的主机uuid
	Uuids []*string `json:"Uuids,omitnil,omitempty" name:"Uuids"`

	// 组件影响版本
	Rule *string `json:"Rule,omitnil,omitempty" name:"Rule"`

	// 组件路径
	Path *string `json:"Path,omitnil,omitempty" name:"Path"`

	// 组件版本
	Version *string `json:"Version,omitnil,omitempty" name:"Version"`

	// 修复命令
	FixCmd *string `json:"FixCmd,omitnil,omitempty" name:"FixCmd"`

	// 影响的主机quuid
	Quuids []*string `json:"Quuids,omitnil,omitempty" name:"Quuids"`
}

type VulEmergentMsgInfo struct {
	// 漏洞id
	VulId *uint64 `json:"VulId,omitnil,omitempty" name:"VulId"`

	// 漏洞纰漏时间
	PublishTime *string `json:"PublishTime,omitnil,omitempty" name:"PublishTime"`

	// 漏洞名
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`
}

type VulFixStatusHostInfo struct {
	// 主机名称
	HostName *string `json:"HostName,omitnil,omitempty" name:"HostName"`

	// 主机ip
	HostIp *string `json:"HostIp,omitnil,omitempty" name:"HostIp"`

	// 主机的quuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 状态：0-初始状态；1-已下发任务（修复中）2-完成（成功）；3-修复失败（失败）4-快照创建失败 导致修复失败（未修复）；
	Status *uint64 `json:"Status,omitnil,omitempty" name:"Status"`

	// 修复时间
	ModifyTime *string `json:"ModifyTime,omitnil,omitempty" name:"ModifyTime"`

	// 修复失败原因
	FailReason *string `json:"FailReason,omitnil,omitempty" name:"FailReason"`
}

type VulFixStatusInfo struct {
	// 漏洞id
	// 注意：此字段可能返回 null，表示取不到有效值。
	VulId *uint64 `json:"VulId,omitnil,omitempty" name:"VulId"`

	// 漏洞名称
	// 注意：此字段可能返回 null，表示取不到有效值。
	VulName *string `json:"VulName,omitnil,omitempty" name:"VulName"`

	// 漏洞修复进度 1-100；
	Progress *uint64 `json:"Progress,omitnil,omitempty" name:"Progress"`

	// 漏洞对应主机修复状态
	// 注意：此字段可能返回 null，表示取不到有效值。
	HostList []*VulFixStatusHostInfo `json:"HostList,omitnil,omitempty" name:"HostList"`

	// 漏洞修复失败主机数量
	// 注意：此字段可能返回 null，表示取不到有效值。
	FailCnt *uint64 `json:"FailCnt,omitnil,omitempty" name:"FailCnt"`

	// 修复成功的数量
	// 注意：此字段可能返回 null，表示取不到有效值。
	FixSuccessCnt *uint64 `json:"FixSuccessCnt,omitnil,omitempty" name:"FixSuccessCnt"`

	// 修复方式 0组件更新或者安装补丁,1禁用服务
	// 注意：此字段可能返回 null，表示取不到有效值。
	FixMethod *uint64 `json:"FixMethod,omitnil,omitempty" name:"FixMethod"`
}

type VulFixStatusSnapshotInfo struct {
	// cvm id
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 主机名称
	// 注意：此字段可能返回 null，表示取不到有效值。
	HostName *string `json:"HostName,omitnil,omitempty" name:"HostName"`

	// 主机ip
	// 注意：此字段可能返回 null，表示取不到有效值。
	HostIp *string `json:"HostIp,omitnil,omitempty" name:"HostIp"`

	// 快照名称
	// 注意：此字段可能返回 null，表示取不到有效值。
	SnapshotName *string `json:"SnapshotName,omitnil,omitempty" name:"SnapshotName"`

	// 快照创建时间
	// 注意：此字段可能返回 null，表示取不到有效值。
	ModifyTime *string `json:"ModifyTime,omitnil,omitempty" name:"ModifyTime"`

	// 快照id
	// 注意：此字段可能返回 null，表示取不到有效值。
	SnapshotId *string `json:"SnapshotId,omitnil,omitempty" name:"SnapshotId"`

	// 记录唯一id
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`

	// 快照状态 0-初始状态1-快照创建成功；2-快照创建失败；
	Status *uint64 `json:"Status,omitnil,omitempty" name:"Status"`

	// 快照创建失败原因
	// 注意：此字段可能返回 null，表示取不到有效值。
	FailReason *string `json:"FailReason,omitnil,omitempty" name:"FailReason"`
}

type VulHostTopInfo struct {
	// 主机名
	// 注意：此字段可能返回 null，表示取不到有效值。
	HostName *string `json:"HostName,omitnil,omitempty" name:"HostName"`

	// 漏洞等级与数量统计列表
	// 注意：此字段可能返回 null，表示取不到有效值。
	VulLevelList []*VulLevelCountInfo `json:"VulLevelList,omitnil,omitempty" name:"VulLevelList"`

	// 主机Quuid
	// 注意：此字段可能返回 null，表示取不到有效值。
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// top评分
	// 注意：此字段可能返回 null，表示取不到有效值。
	Score *uint64 `json:"Score,omitnil,omitempty" name:"Score"`
}

type VulInfoByCveId struct {
	// 漏洞id
	VulId *uint64 `json:"VulId,omitnil,omitempty" name:"VulId"`

	// 修复支持情况：0-Windows/Linux均不支持修复 ;1-Windows/Linux 均支持修复 ;2-仅Linux支持修复;3-仅Windows支持修复
	FixSwitch *uint64 `json:"FixSwitch,omitnil,omitempty" name:"FixSwitch"`
}

type VulInfoHostInfo struct {
	// 主机名
	HostName *string `json:"HostName,omitnil,omitempty" name:"HostName"`

	// 主机ip
	HostIp *string `json:"HostIp,omitnil,omitempty" name:"HostIp"`

	// 主机标签
	Tags []*string `json:"Tags,omitnil,omitempty" name:"Tags"`

	// 主机quuid
	Quuid *string `json:"Quuid,omitnil,omitempty" name:"Quuid"`

	// 0 :漏洞不可自动修复，  1：可自动修复， 2：客户端已离线， 3：主机不是旗舰版只能手动修复， 4：机型不允许 ，5：修复中 ，6：已修复， 7：检测中, 9:修复失败, 10:已忽略 ,11:漏洞只支持linux不支持Windows, 12：漏洞只支持Windows不支持linux
	IsSupportAutoFix *uint64 `json:"IsSupportAutoFix,omitnil,omitempty" name:"IsSupportAutoFix"`

	// 主机uuid
	Uuid *string `json:"Uuid,omitnil,omitempty" name:"Uuid"`

	// 主机InstanceId
	InstanceId *string `json:"InstanceId,omitnil,omitempty" name:"InstanceId"`
}

type VulInfoList struct {
	// 漏洞包含的事件id串，多个用“,”分割
	Ids *string `json:"Ids,omitnil,omitempty" name:"Ids"`

	// 漏洞名
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// 0: 待处理 1:忽略  3:已修复  5:检测中 6:修复中  8:修复失败
	Status *uint64 `json:"Status,omitnil,omitempty" name:"Status"`

	// 漏洞id
	VulId *uint64 `json:"VulId,omitnil,omitempty" name:"VulId"`

	// 漏洞披露事件
	PublishTime *string `json:"PublishTime,omitnil,omitempty" name:"PublishTime"`

	// 最后检测时间
	LastTime *string `json:"LastTime,omitnil,omitempty" name:"LastTime"`

	// 影响主机数
	HostCount *uint64 `json:"HostCount,omitnil,omitempty" name:"HostCount"`

	// 漏洞等级 1:低 2:中 3:高 4:严重
	Level *uint64 `json:"Level,omitnil,omitempty" name:"Level"`

	// 废弃字段
	// 注意：此字段可能返回 null，表示取不到有效值。
	From *uint64 `json:"From,omitnil,omitempty" name:"From"`

	// 描述
	// 注意：此字段可能返回 null，表示取不到有效值。
	Descript *string `json:"Descript,omitnil,omitempty" name:"Descript"`

	// 废弃字段
	// 注意：此字段可能返回 null，表示取不到有效值。
	PublishTimeWisteria *string `json:"PublishTimeWisteria,omitnil,omitempty" name:"PublishTimeWisteria"`

	// 废弃字段
	// 注意：此字段可能返回 null，表示取不到有效值。
	NameWisteria *string `json:"NameWisteria,omitnil,omitempty" name:"NameWisteria"`

	// 废弃字段
	// 注意：此字段可能返回 null，表示取不到有效值。
	DescriptWisteria *string `json:"DescriptWisteria,omitnil,omitempty" name:"DescriptWisteria"`

	// 聚合后事件状态串
	// 注意：此字段可能返回 null，表示取不到有效值。
	StatusStr *string `json:"StatusStr,omitnil,omitempty" name:"StatusStr"`

	// cve编号
	// 注意：此字段可能返回 null，表示取不到有效值。
	CveId *string `json:"CveId,omitnil,omitempty" name:"CveId"`

	// CVSS评分
	// 注意：此字段可能返回 null，表示取不到有效值。
	CvssScore *float64 `json:"CvssScore,omitnil,omitempty" name:"CvssScore"`

	// 漏洞标签 多个逗号分割
	// 注意：此字段可能返回 null，表示取不到有效值。
	Labels *string `json:"Labels,omitnil,omitempty" name:"Labels"`

	// 是否能自动修复且包含能自动修复的主机， 0=否  1=是
	// 注意：此字段可能返回 null，表示取不到有效值。
	FixSwitch *uint64 `json:"FixSwitch,omitnil,omitempty" name:"FixSwitch"`

	// 最后扫描任务的id
	// 注意：此字段可能返回 null，表示取不到有效值。
	TaskId *uint64 `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// 是否支持防御， 0:不支持 1:支持
	// 注意：此字段可能返回 null，表示取不到有效值。
	IsSupportDefense *uint64 `json:"IsSupportDefense,omitnil,omitempty" name:"IsSupportDefense"`

	// 已防御的攻击次数
	// 注意：此字段可能返回 null，表示取不到有效值。
	DefenseAttackCount *uint64 `json:"DefenseAttackCount,omitnil,omitempty" name:"DefenseAttackCount"`

	// 首次出现时间
	// 注意：此字段可能返回 null，表示取不到有效值。
	FirstAppearTime *string `json:"FirstAppearTime,omitnil,omitempty" name:"FirstAppearTime"`

	// 漏洞类别 1: web-cms漏洞 2:应用漏洞  4: Linux软件漏洞 5: Windows系统漏洞
	// 注意：此字段可能返回 null，表示取不到有效值。
	VulCategory *uint64 `json:"VulCategory,omitnil,omitempty" name:"VulCategory"`

	// 攻击热度级别
	// 注意：此字段可能返回 null，表示取不到有效值。
	AttackLevel *uint64 `json:"AttackLevel,omitnil,omitempty" name:"AttackLevel"`

	// 漏洞修复后是否需要重启
	// 注意：此字段可能返回 null，表示取不到有效值。
	FixNoNeedRestart *bool `json:"FixNoNeedRestart,omitnil,omitempty" name:"FixNoNeedRestart"`

	// 检测方式0 - 版本比对, 1 - POC验证
	// 注意：此字段可能返回 null，表示取不到有效值。
	Method *uint64 `json:"Method,omitnil,omitempty" name:"Method"`

	// 漏洞是否支持修复 0不支持，1支持
	// 注意：此字段可能返回 null，表示取不到有效值。
	VulFixSwitch *uint64 `json:"VulFixSwitch,omitnil,omitempty" name:"VulFixSwitch"`
}

type VulLevelCountInfo struct {
	// 漏洞等级
	VulLevel *uint64 `json:"VulLevel,omitnil,omitempty" name:"VulLevel"`

	// 漏洞数量
	VulCount *uint64 `json:"VulCount,omitnil,omitempty" name:"VulCount"`
}

type VulLevelInfo struct {
	// // 危害等级：1-低危；2-中危；3-高危；4-严重
	VulLevel *uint64 `json:"VulLevel,omitnil,omitempty" name:"VulLevel"`

	// 数量
	Count *uint64 `json:"Count,omitnil,omitempty" name:"Count"`
}

type VulOverview struct {
	// 总数
	TotalCount *uint64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// 今日新增数量
	TodayCount *int64 `json:"TodayCount,omitnil,omitempty" name:"TodayCount"`
}

type VulStoreListInfo struct {
	// 漏洞ID
	VulId *uint64 `json:"VulId,omitnil,omitempty" name:"VulId"`

	// 漏洞级别
	Level *uint64 `json:"Level,omitnil,omitempty" name:"Level"`

	// 漏洞名称
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// cve编号
	CveId *string `json:"CveId,omitnil,omitempty" name:"CveId"`

	// 1: web-cms漏洞 2:应用漏洞  4: Linux软件漏洞 5: Windows系统漏洞 0= 应急漏洞
	VulCategory *uint64 `json:"VulCategory,omitnil,omitempty" name:"VulCategory"`

	// 发布时间
	PublishDate *string `json:"PublishDate,omitnil,omitempty" name:"PublishDate"`

	// 漏洞检测方法 0 - 版本比对, 1 - POC验证
	Method *uint64 `json:"Method,omitnil,omitempty" name:"Method"`

	// 漏洞攻击热度
	AttackLevel *uint64 `json:"AttackLevel,omitnil,omitempty" name:"AttackLevel"`

	// 漏洞是否支持自动修复
	// 0-Windows/Linux均关闭; 1-Windows/Linux均打开; 2-仅Linux; 3-仅Windows
	FixSwitch *uint64 `json:"FixSwitch,omitnil,omitempty" name:"FixSwitch"`

	// 漏洞是否支持防御
	// 0:不支持 1:支持
	SupportDefense *uint64 `json:"SupportDefense,omitnil,omitempty" name:"SupportDefense"`
}

type VulTopInfo struct {
	// 漏洞 名
	// 注意：此字段可能返回 null，表示取不到有效值。
	VulName *string `json:"VulName,omitnil,omitempty" name:"VulName"`

	// 危害等级：1-低危；2-中危；3-高危；4-严重
	// 注意：此字段可能返回 null，表示取不到有效值。
	VulLevel *uint64 `json:"VulLevel,omitnil,omitempty" name:"VulLevel"`

	// 漏洞数量
	// 注意：此字段可能返回 null，表示取不到有效值。
	VulCount *uint64 `json:"VulCount,omitnil,omitempty" name:"VulCount"`

	// 漏洞id
	// 注意：此字段可能返回 null，表示取不到有效值。
	VulId *uint64 `json:"VulId,omitnil,omitempty" name:"VulId"`
}

type WarningInfoObj struct {
	// 事件告警类型；1：离线，2：木马，3：异常登录，4：爆破，5：漏洞（已拆分为9-12四种类型）6：高危命令，7：反弹sell，8：本地提权，9：应用漏洞，10：web-cms漏洞，11：应急漏洞，12：安全基线 ,13: 防篡改，14：恶意请求，15: 网络攻击，16：Windows系统漏洞，17：Linux软件漏洞，18：核心文件监控告警，19：客户端卸载告警。20：客户端离线告警
	Type *uint64 `json:"Type,omitnil,omitempty" name:"Type"`

	// 1: 关闭告警 0: 开启告警
	DisablePhoneWarning *uint64 `json:"DisablePhoneWarning,omitnil,omitempty" name:"DisablePhoneWarning"`

	// 开始时间，格式: HH:mm
	BeginTime *string `json:"BeginTime,omitnil,omitempty" name:"BeginTime"`

	// 结束时间，格式: HH:mm
	EndTime *string `json:"EndTime,omitnil,omitempty" name:"EndTime"`

	// 时区信息
	TimeZone *string `json:"TimeZone,omitnil,omitempty" name:"TimeZone"`

	// 漏洞等级控制位（对应DB的十进制存储）
	ControlBit *uint64 `json:"ControlBit,omitnil,omitempty" name:"ControlBit"`

	// 漏洞等级控制位二进制，每一位对应页面漏洞等级的开启关闭：低中高（0:关闭；1：开启），例如：101 → 同时勾选低+高
	ControlBits *string `json:"ControlBits,omitnil,omitempty" name:"ControlBits"`

	// 告警主机范围类型，0:全部主机，1:按所属项目选，2:按腾讯云标签选，3:按主机安全标签选，4:自选主机
	// 注意：此字段可能返回 null，表示取不到有效值。
	HostRange *int64 `json:"HostRange,omitnil,omitempty" name:"HostRange"`

	// 配置的告警范围主机个数，前端用此判断展示提示信息
	// 注意：此字段可能返回 null，表示取不到有效值。
	Count *int64 `json:"Count,omitnil,omitempty" name:"Count"`
}

type WarningObject struct {
	// 事件告警类型；1：离线，2：木马，3：异常登录，4：爆破，5：漏洞（已拆分为9-12四种类型）6：高位命令，7：反弹sell，8：本地提权，9：系统组件漏洞，10：web应用漏洞，11：应急漏洞，12：安全基线，14：恶意请求，15: 网络攻击，16：Windows系统漏洞，17：Linux软件漏洞
	Type *uint64 `json:"Type,omitnil,omitempty" name:"Type"`

	// 1: 关闭告警 0: 开启告警
	DisablePhoneWarning *uint64 `json:"DisablePhoneWarning,omitnil,omitempty" name:"DisablePhoneWarning"`

	// 开始时间，格式: HH:mm
	BeginTime *string `json:"BeginTime,omitnil,omitempty" name:"BeginTime"`

	// 结束时间，格式: HH:mm
	EndTime *string `json:"EndTime,omitnil,omitempty" name:"EndTime"`

	// 漏洞等级控制位二进制，每一位对应页面漏洞等级的开启关闭：低中高（0:关闭；1：开启），例如：101 → 同时勾选低+高；01→(登录审计)疑似不告警，高危告警
	ControlBits *string `json:"ControlBits,omitnil,omitempty" name:"ControlBits"`

	// 告警主机范围类型，0:全部主机，1:按所属项目选，2:按腾讯云标签选，3:按主机安全标签选，4:自选主机
	HostRange *int64 `json:"HostRange,omitnil,omitempty" name:"HostRange"`
}

type WebHookCustomField struct {
	// key
	Key *string `json:"Key,omitnil,omitempty" name:"Key"`

	// value
	Value *string `json:"Value,omitnil,omitempty" name:"Value"`
}

type WebHookEventKv struct {
	// 事件类型
	Type *int64 `json:"Type,omitnil,omitempty" name:"Type"`

	// 事件内容
	ControlBit *string `json:"ControlBit,omitnil,omitempty" name:"ControlBit"`
}

type WebHookHostLabel struct {
	// 主机范围[1:所属项目|2:腾讯云标签|3:主机安全标签|4:自选]空数组为全部
	Type *int64 `json:"Type,omitnil,omitempty" name:"Type"`

	// 主机项目或标签内容
	Values []*string `json:"Values,omitnil,omitempty" name:"Values"`
}

type WebHookPolicy struct {
	// id
	// 注意：此字段可能返回 null，表示取不到有效值。
	Id *int64 `json:"Id,omitnil,omitempty" name:"Id"`

	// 策略名称
	// 注意：此字段可能返回 null，表示取不到有效值。
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// 事件类型
	// 注意：此字段可能返回 null，表示取不到有效值。
	Events []*WebHookEventKv `json:"Events,omitnil,omitempty" name:"Events"`

	// 主机范围
	// 注意：此字段可能返回 null，表示取不到有效值。
	HostLabels []*WebHookHostLabel `json:"HostLabels,omitnil,omitempty" name:"HostLabels"`

	// 接收人
	// 注意：此字段可能返回 null，表示取不到有效值。
	Receivers []*WebHookReceiver `json:"Receivers,omitnil,omitempty" name:"Receivers"`

	// 格式 0text 1json
	// 注意：此字段可能返回 null，表示取不到有效值。
	Format *int64 `json:"Format,omitnil,omitempty" name:"Format"`

	// 自定义透传字段
	// 注意：此字段可能返回 null，表示取不到有效值。
	CustomFields []*WebHookCustomField `json:"CustomFields,omitnil,omitempty" name:"CustomFields"`

	// 是否启用[1:禁用|0:启用]
	// 注意：此字段可能返回 null，表示取不到有效值。
	IsDisabled *int64 `json:"IsDisabled,omitnil,omitempty" name:"IsDisabled"`

	// 主机列表
	// 注意：此字段可能返回 null，表示取不到有效值。
	Quuids []*string `json:"Quuids,omitnil,omitempty" name:"Quuids"`

	// 主机数目
	// 注意：此字段可能返回 null，表示取不到有效值。
	HostCount *int64 `json:"HostCount,omitnil,omitempty" name:"HostCount"`
}

type WebHookReceiver struct {
	// id
	Id *int64 `json:"Id,omitnil,omitempty" name:"Id"`

	// 接收人名称
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// webhook地址
	Addr *string `json:"Addr,omitnil,omitempty" name:"Addr"`
}

type WebHookReceiverUsage struct {
	// 接收人id
	// 注意：此字段可能返回 null，表示取不到有效值。
	ReceiverId *int64 `json:"ReceiverId,omitnil,omitempty" name:"ReceiverId"`

	// 接收人名称
	// 注意：此字段可能返回 null，表示取不到有效值。
	ReceiverName *string `json:"ReceiverName,omitnil,omitempty" name:"ReceiverName"`

	// 策略名称
	// 注意：此字段可能返回 null，表示取不到有效值。
	PolicyName *string `json:"PolicyName,omitnil,omitempty" name:"PolicyName"`
}

type WebHookRuleDetail struct {
	// 规则名称
	RuleName *string `json:"RuleName,omitnil,omitempty" name:"RuleName"`

	// 机器人地址
	HookAddr *string `json:"HookAddr,omitnil,omitempty" name:"HookAddr"`

	// 事件类型
	RuleItems []*WebHookEventKv `json:"RuleItems,omitnil,omitempty" name:"RuleItems"`

	// 规则Id
	RuleId *int64 `json:"RuleId,omitnil,omitempty" name:"RuleId"`

	// 备注信息
	RuleRemark *string `json:"RuleRemark,omitnil,omitempty" name:"RuleRemark"`

	// 主机范围
	HostLabels []*WebHookHostLabel `json:"HostLabels,omitnil,omitempty" name:"HostLabels"`

	// 主机Id列表
	HostIds []*string `json:"HostIds,omitnil,omitempty" name:"HostIds"`

	// 是否启用[1:禁用|0:启用]
	IsDisabled *int64 `json:"IsDisabled,omitnil,omitempty" name:"IsDisabled"`
}

type WebHookRuleSummary struct {
	// 规则Id
	RuleId *int64 `json:"RuleId,omitnil,omitempty" name:"RuleId"`

	// 规则名称
	RuleName *string `json:"RuleName,omitnil,omitempty" name:"RuleName"`

	// 机器人地址
	HookAddr *string `json:"HookAddr,omitnil,omitempty" name:"HookAddr"`

	// 备注信息
	RuleRemark *string `json:"RuleRemark,omitnil,omitempty" name:"RuleRemark"`

	// 事件类型
	RuleItems []*WebHookEventKv `json:"RuleItems,omitnil,omitempty" name:"RuleItems"`

	// 主机范围
	HostLabels []*WebHookHostLabel `json:"HostLabels,omitnil,omitempty" name:"HostLabels"`

	// 是否启用[1:禁用|0:启用]
	IsDisabled *int64 `json:"IsDisabled,omitnil,omitempty" name:"IsDisabled"`

	// 创建时间
	CreateTime *string `json:"CreateTime,omitnil,omitempty" name:"CreateTime"`

	// 更新时间
	UpdateTime *string `json:"UpdateTime,omitnil,omitempty" name:"UpdateTime"`

	// 主机数目
	HostCount *int64 `json:"HostCount,omitnil,omitempty" name:"HostCount"`
}

type ZoneInfo struct {
	// 可用区名称
	ZoneName *string `json:"ZoneName,omitnil,omitempty" name:"ZoneName"`
}